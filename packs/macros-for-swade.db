{"name":"Next Turn","type":"script","author":"tckKxzbezKvre3KI","img":"icons/magic/time/arrows-circling-pink.webp","scope":"global","command":"/*\nSkip the current turn.\n*/\n\ngame.combat.nextTurn()","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"core":{"sourceId":"Macro.NRdx6XFmIKNd8ENh"}},"_id":"8T7pB1AIa6zpW4K1"}
{"name":"Survival Guide","type":"script","author":"tckKxzbezKvre3KI","img":"icons/magic/symbols/star-solid-gold.webp","scope":"global","command":"//icon: \nlet compendiumName2 = 'swademacros.guide-macros-for-swade';\nlet pack = game.packs.get(compendiumName2);\nlet content = await pack.getDocuments();\nlet guide = content.find( i => (i.data.name === 'Survival Guide') );\nguide.sheet.render(true);","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.0gaSE9FSwBQsZvWD"}},"_id":"8hnNjXUpwM1KKX1S"}
{"name":"Mass Battle","type":"script","author":"tckKxzbezKvre3KI","img":"icons/environment/people/charge.webp","scope":"global","command":"const version = 'v1.3';\nconst chatimage = \"icons/environment/people/charge.webp\";\nlet coreRules = false;\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\n\n/* Mass Battle p133 SWADE\n\nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Savage%20Worlds/MassBattle.js\nicon: icons/environment/people/charge.webp\n*/\n\nmain();\n\nfunction main() {  \n  let template = `  \n    <style type=\"text/css\">\n      div.purpleHorizon {\n        border: 4px solid #ff0000;\n        background-color: #000000;\n        width: 100%;\n        text-align: center;\n        border-collapse: collapse;\n      }\n      .divTable.purpleHorizon .divTableCell, .divTable.purpleHorizon .divTableHead {\n        border: 0px solid #550000;\n        padding: 5px 2px;\n      }\n      .divTable.purpleHorizon .divTableBody .divTableCell {\n        font-size: 13px;\n        font-weight: bold;\n        color: #FFFFFF;\n      }\n      \n      .divTable{ display: table; }\n      .divTableRow { display: table-row; }\n      .divTableHeading { display: table-header-group;}\n      .divTableCell, .divTableHead { display: table-cell;}\n      .divTableHeading { display: table-header-group;}\n      .divTableFoot { display: table-footer-group;}\n      .divTableBody { display: table-row-group;}\n\n      /* HIDE RADIO */\n      [type=radio] { \n      position: absolute;\n      opacity: 0;\n      width: 0;\n      height: 0;\n      }\n\n      /* IMAGE STYLES */\n      [type=radio] + img {\n      cursor: pointer;\n      }\n\n      /* CHECKED STYLES */\n      [type=radio]:checked + img {\n      outline: 4px solid #f00;\n      }\n      \n      .container {\n        position: relative;\n        text-align: center;\n        color: white;\n      }\n      /* Centered text */\n      .centered {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        font-size: 18px;\n      }    \n\n      #kultcss .window-content {    \n        background: #000000;\n      }     \n      #kultcss .dialog-button {\n        height: 40px;\n        background: #000000;\n        color: #ffffff;\n        justify-content: space-evenly;\n        align-items: center;\n        cursor: pointer;\n        border: none;    \n      }  \n      #kultcss header {\n        background: #000000;\n        border-radius: 0;    \n        border: none;    \n        margin-bottom: 2px;\n        font-size: .75rem;\n      }\n    </style>    \n    \n    <h1 style=\"color:white\">Force 1</h1>\n    <div class=\"divTable purpleHorizon\">\n    <div class=\"divTableBody\">\n    \n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <p>Name</p>\n        <input id=\"name1\" type=\"text\" max=\"20\" style=\"width: 100px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=\"Force1\">    \n    </div>\n    <div class=\"divTableCell\">      \n      <label>        \n        <div class=\"container\">\n          <p>Force</p>\n        <input id=\"force1\" type=\"number\" min=\"10\" max=\"10\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=10>\n        </div>\n      </label>      \n    </div>    \n    <div class=\"divTableCell\">\n        <p>Die</p>\n        <select id=\"commanderdie1\" type=\"text\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\">\n        <option value=\"1d4x\">1d4x</option>\n        <option value=\"1d6x\">1d6x</option>\n        <option value=\"1d8x\" selected=\"selected\">1d8x</option>\n        <option value=\"1d10x\">1d10x</option>\n        <option value=\"1d12x\">1d12x</option>\n        </select>\n    </div>\n    <div class=\"divTableCell\">\n        <p>Bonus</p>\n        <input id=\"commanderbonus1\" type=\"text\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=\"3\">       \n    </div>       \n    </div>\n\n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <p>Advantage</p>\n        <input id=\"tacticaladvantage1\" type=\"number\" min=\"0\" max=\"4\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=0>       \n    </div>\n    <div class=\"divTableCell\">      \n      <p>Plan</p>\n      <input id=\"battleplan1\" type=\"number\" min=\"0\" max=\"4\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=0>       \n    </div>    \n    <div class=\"divTableCell\">\n        <p>Players Bonus</p>\n        <input id=\"playersbonus1\" type=\"number\" min=\"-20\" max=\"20\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=0>       \n    </div>\n    <div class=\"divTableCell\">\n        <p>Is Wild?</p>\n        <input id=\"wildcard1\" type=\"checkbox\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" checked>       \n    </div>    \n    </div>\n    \n    </div>\n    </div>\n    \n\n    <h1 style=\"color:white\">Force 2</h1>\n    <div class=\"divTable purpleHorizon\">\n    <div class=\"divTableBody\">\n    \n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <p>Name</p>\n        <input id=\"name2\" type=\"text\" max=\"20\" style=\"width: 100px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=\"Force2\">    \n    </div>\n    <div class=\"divTableCell\">      \n      <label>        \n        <div class=\"container\">\n          <p>Force</p>\n        <input id=\"force2\" type=\"number\" min=\"10\" max=\"10\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=7>\n        </div>\n      </label>      \n    </div>   \n    <div class=\"divTableCell\">\n        <p>Die</p>\n        <select id=\"commanderdie2\" type=\"text\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\">\n        <option value=\"1d4x\">1d4x</option>\n        <option value=\"1d6x\">1d6x</option>\n        <option value=\"1d8x\" selected=\"selected\">1d8x</option>\n        <option value=\"1d10x\">1d10x</option>\n        <option value=\"1d12x\">1d12x</option>\n        </select>\n    </div>\n    <div class=\"divTableCell\">\n        <p>Bonus</p>\n        <input id=\"commanderbonus2\" type=\"text\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=\"3\">       \n    </div>    \n    </div>\n\n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <p>Advantage</p>\n        <input id=\"tacticaladvantage2\" type=\"number\" min=\"0\" max=\"4\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=0>       \n    </div>\n    <div class=\"divTableCell\">      \n      <label>        \n        <div class=\"container\">\n          <p>Plan</p>\n        <input id=\"battleplan2\" type=\"number\" min=\"0\" max=\"4\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=0>       \n        </div>\n      </label>      \n    </div>    \n    <div class=\"divTableCell\">\n        <p>Players Bonus</p>\n        <input id=\"playersbonus2\" type=\"number\" min=\"-20\" max=\"20\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=0>       \n    </div>\n    <div class=\"divTableCell\">\n        <p>Is Wild?</p>\n        <input id=\"wildcard2\" type=\"checkbox\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" checked>       \n    </div>      \n    </div>\n    \n    </div>\n    </div>\n    \n  `;\n  \n  new Dialog({\n    title: `Mass Battle - ${version}`,\n    content: template,\n    buttons: {\n      ok: {\n        label: \"Battle!\",\n        callback: async (html) => {\n          massbattle(html);\n        },\n      },\n      cancel: {\n        label: \"Cancel\",\n      }\n    },\n    default: \"ok\"\n  }, { id: 'kultcss'}).render(true);\n}\n\nasync function massbattle(html){\n  // FORCE 1\n  const name1 =  html.find(\"#name1\")[0].value;    \n  const force1 = parseInt( html.find(\"#force1\")[0].value );    \n  const commanderdie1 = html.find(\"#commanderdie1\")[0].value;  \n  const commanderbonus1 = html.find(\"#commanderbonus1\")[0].value;    \n  const tacticaladvantage1 =  parseInt( html.find(\"#tacticaladvantage1\")[0].value );    \n  const battleplan1 = parseInt( html.find(\"#battleplan1\")[0].value );    \n  const playersbonus1 = parseInt( html.find(\"#playersbonus1\")[0].value );  \n  const wildcard1 = html.find(\"#wildcard1\")[0].checked;\n  //const stackupcards = html.find(\"#stackupcards\")[0].checked;\n\n  // FORCE 2\n  const name2 =  html.find(\"#name2\")[0].value;    \n  const force2 = parseInt( html.find(\"#force2\")[0].value );    \n  const commanderdie2 = html.find(\"#commanderdie2\")[0].value;  \n  const commanderbonus2 = html.find(\"#commanderbonus2\")[0].value;    \n  const tacticaladvantage2 =  parseInt( html.find(\"#tacticaladvantage2\")[0].value );    \n  const battleplan2 = parseInt( html.find(\"#battleplan2\")[0].value );    \n  const playersbonus2 = parseInt( html.find(\"#playersbonus2\")[0].value ); \n  const wildcard2 = html.find(\"#wildcard2\")[0].checked;\n\n  // \n  let commander1DiceExpression;\n  if (wildcard1) {\n    commander1DiceExpression = '{' + commanderdie1 + '+' + commanderbonus1 + ', 1d6x+' + commanderbonus1 + '}';\n  } else {\n    commander1DiceExpression = commanderdie1 + '+' + commanderbonus1;\n  }  \n  if (wildcard2) {\n    commander2DiceExpression = '{' + commanderdie2 + '+' + commanderbonus2 + ', 1d6x+' + commanderbonus2 + '}';\n  } else {\n    commander2DiceExpression = commanderdie2 + '+' + commanderbonus2;\n  }  \n  \n  let commander1Dice = await new Roll(commander1DiceExpression).roll({ async : false });  \n  let commanderRolled1;\n  if (wildcard1) {\n    commanderRolled1 = Math.max( commander1Dice.terms[0].rolls[0].total,  commander1Dice.terms[0].rolls[1].total );\n  } else {\n    commanderRolled1 = commander1Dice.total;\n  }\n  \n  let commander2Dice = new Roll(commander2DiceExpression).roll({ async : false });  \n  let commanderRolled2;\n  if (wildcard2) {\n    commanderRolled2 = Math.max( commander2Dice.terms[0].rolls[0].total,  commander2Dice.terms[0].rolls[1].total );\n  } else {\n    commanderRolled2 = commander2Dice.total;\n  }\n  let result1=0;\n  let result2=0;\n  \n  let message;\n  if (coreRules) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> @Compendium[swade-core-rules.swade-rules.IJkWxV4kddDaU0Gl]{ Mass Battles}</h2></div>`;\n  } else {\n    message = `<div><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Mass Battle</h2><div>`;\n  }\n  \n  let forceMessage1;\n  let forceMessage2;\n  if (force1>force2) {\n    result1 += forceBonus(force1, force2);\n    forceMessage1 = `<li><b>Force Size:</b> ${force1} <b style=\"color:red\">(+${forceBonus(force1, force2)})</b></li>`;\n    forceMessage2 = `<li><b>Force Size:</b> ${force2} <b style=\"color:red\">(+0)</b></li>`;\n  } else {\n    result2 += forceBonus(force1, force2);\n    forceMessage2 = `<li><b>Force Size:</b> ${force2} <b style=\"color:red\">(+${forceBonus(force1, force2)})</b></li>`;\n    forceMessage1 = `<li><b>Force Size:</b> ${force1} <b style=\"color:red\">(+0)</b></li>`;    \n  }\n  result1 += tacticaladvantage1;\n  result2 += tacticaladvantage2;\n  result1 += battleplan1;\n  result2 += battleplan2;\n  result1 += playersbonus1;\n  result2 += playersbonus2;\n  result1 += commanderRolled1;\n  result2 += commanderRolled2;\n  \n  if (wildcard1) {\n    message += `<h2>(Wild Card) ${name1}</h2>`;\n  } else {\n    message += `<h2>${name1}</h2>`;\n  }\n   \n  message += `<ul>\n  <li><b style=\"color:red\">Total:</b> ${result1}</li>\n  <li><b>Commander Roll:</b> ${commanderRolled1}</li>\n  ${forceMessage1}\n  <li><b>Tactical Advantage:</b> ${tacticaladvantage1}</li>\n  <li><b>Battle Plan:</b> ${battleplan1}</li>\n  <li><b>Players Bonus:</b> ${playersbonus1}</li>\n  </ul>`;\n  \n  if (wildcard2) {\n    message += `<h2>(Wild Card) ${name2}</h2>`;\n  } else {\n    message += `<h2>${name2}</h2>`;\n  }\n  message += `<ul>\n  <li><b style=\"color:red\">Total:</b> ${result2}</li>\n  <li><b>Commander Roll:</b> ${commanderRolled2}</li>\n  ${forceMessage2}\n  <li><b>Tactical Advantage:</b> ${tacticaladvantage2}</li>\n  <li><b>Battle Plan:</b> ${battleplan2}</li>\n  <li><b>Players Bonus:</b> ${playersbonus2}</li>\n  </ul>`;\n  \n  message += winnerCheck(result1, result2, name1, name2, force1, force2);\n  \n  let chatData = {\n    content: message\n  };  \n  ChatMessage.create(chatData, {});\n  \n  commander1Dice.toMessage({flavor: `${name1}`});\n  commander2Dice.toMessage({flavor: `${name2}`});\n}\n\nfunction forceBonus(force1, force2) {\n  if (force1>force2) {\n    return (force1-force2)\n  } else if (force2>force1) {\n    return (force2-force1)\n  } else {\n    return 0;\n  }\n}\n\nfunction winnerCheck(result1, result2, name1, name2, force1, force2) {\n  let message = `<h2 style=\"color:red\">Result</h2>`;\n  let force1after = force1;\n  let force2after = force2;\n  if (result1>result2) {\n    if ( (result1+4)>=result2 ) { // raise\n      message += `<p><b>Victory:</b> The defeated army loses two Force Tokens.</p>`;        \n      force2after -= 2; \n    } else {\n      message += `<p><b>Marginal Victory:</b> The victor loses one Force Token, the defeated loses two.</p>`;        \n      force2after -= 2; \n      force1after -= 1;          \n    }    \n    message += `<ul><li>Winner: <b>${name1}</b></li>`;\n    message += `<li>Loser: <b>${name2}</b></li>`;         \n  } else if (result2>result1) {\n    if ( (result2+4)>=result1 ) { // raise\n      message += `<p><b>Victory:</b> The defeated army loses two Force Tokens.</p>`;        \n      force1after -= 2; \n    } else {\n      message += `<p><b>Marginal Victory:</b> The victor loses one Force Token, the defeated loses two.</p>`;        \n      force1after -= 2; \n      force2after -= 1;          \n    }\n    message += `<ul><li>Winner: <b>${name2}</b></li>`;\n    message += `<li>Loser: <b>${name1}</b></li>`;    \n  } else {\n    message += `<p><b>Draw:</b> Both sides lose one Force Token.</p>`;    \n    force1after -= 1; \n    force2after -= 1;\n    message += `<ul><li>The <b>${name1}</b> and <b>${name2}</b> are tied.</li>`;    \n  }\n\n  message += `<li><b>${name1}:</b> has ${force1after} force tokens</li>`;\n  message += `<li><b>${name2}:</b> has ${force2after} force tokens</li></ul>`;\n  \n  message += `<h2 style=\"color:darkblue\">Morale</h2><ul>`;\n  if ( (force1-force1after)>0 ) {\n    message += `<li>-${force1-force1after}: for <b>${name1}</b> spirit roll</li>`;\n  }\n  if ( (force2-force2after)>0 ) {\n    message += `<li>-${force2-force2after}: for <b>${name2}</b> spirit roll</li>`;\n  }\n  message += `<li>+2: The army is made up mostly of undead or other fearless troops.</li>`;\n  message += `<li>+2: The army is within fortifications or prepared positions.</li>`;\n  message += `<li>+2: The army cannot retreat or will be killed if it does.</li></ul>`;\n\n  return message;\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.aEsJaGoeQTaaoJ0G"}},"_id":"AuKkFPr7j9pDZU9q"}
{"name":"Chase","type":"script","author":"tckKxzbezKvre3KI","img":"icons/sundries/gaming/playing-cards.webp","scope":"global","command":"const version = 'v1.7';\n\n/* Chase\nFeatures\n- Draw n cards placing them in the scene\n- This macro can reset the table preventing from the error\n- This macro can line up the cards\nsource:\nicon: icons/sundries/gaming/playing-cards.webp\n*/\n\nasync function makeTiles(html) {\n    let spacingX = parseInt(html.find('#spacing-x')[0].value);\n    let spacingY = parseInt(html.find('#spacing-y')[0].value);\n    const rows = parseInt(html.find('#card-rows')[0].value);\n    const columns = parseInt(html.find('#card-columns')[0].value);\n    const stackCards = html.find('#stack-cards')[0].checked;\n    const tableName = html.find('#table-name')[0].value;\n    let cardHeight = parseInt(html.find('#card-height')[0].value);\n    let cardWidth = parseInt(html.find('#card-width')[0].value);\n\n    if (tableName === '') {\n        ui.notifications.warn(`Please select a RollTable from which to draw.`);\n    } else {\n        const cardsToDraw = rows * columns;\n        const cardDraws = (\n            await game.tables\n                .find((t) => t.data.name == tableName)\n                .drawMany(cardsToDraw, { displayChat: false })\n        ).results;\n\n        const sceneWidth = canvas.scene.dimensions.sceneWidth;\n        const sceneHeight = canvas.scene.dimensions.sceneHeight;\n        const sceneRectX = canvas.scene.dimensions.sceneRect.x;\n        const sceneRectY = canvas.scene.dimensions.sceneRect.y;\n\n        let totalSpacingX = spacingX * (columns - 1);\n        let totalSpacingY = spacingY * (rows - 1);\n        let fullSpreadWidth = (cardWidth * columns) + totalSpacingX;\n        let fullSpreadHeight = (cardHeight * rows) + totalSpacingY;\n\n        if (fullSpreadWidth > sceneWidth || fullSpreadHeight > sceneHeight) {\n            let newSpreadRatio = 1;\n\n            if (fullSpreadWidth > sceneWidth) {\n                newSpreadRatio = sceneWidth / fullSpreadWidth;\n                cardWidth = cardWidth * newSpreadRatio;\n                cardHeight = cardHeight * newSpreadRatio;\n                spacingX = spacingX * newSpreadRatio;\n                spacingY = spacingY * newSpreadRatio;\n                totalSpacingX = spacingX * (columns - 1);\n                totalSpacingY = spacingY * (rows - 1);\n                fullSpreadWidth = cardWidth * columns + totalSpacingX;\n                fullSpreadHeight = cardHeight * rows + totalSpacingY;\n            }\n\n            if (fullSpreadHeight > sceneHeight) {\n                newSpreadRatio = sceneHeight / fullSpreadHeight;\n                cardWidth = cardWidth * newSpreadRatio;\n                cardHeight = cardHeight * newSpreadRatio;\n                spacingX = spacingX * newSpreadRatio;\n                spacingY = spacingY * newSpreadRatio;\n                totalSpacingX = spacingX * (columns - 1);\n                totalSpacingY = spacingY * (rows - 1);\n                fullSpreadWidth = cardWidth * columns + totalSpacingX;\n                fullSpreadHeight = cardHeight * rows + totalSpacingY;\n            }\n        }\n\n        let startX = sceneRectX + ((sceneWidth - fullSpreadWidth) / 2);\n        let startY = sceneRectY + ((sceneHeight - fullSpreadHeight) / 2);\n\n        if (stackCards) {\n            startX = sceneRectX + ((sceneWidth - cardWidth) / 2);\n            startY = sceneRectY + ((sceneHeight - cardHeight) / 2);\n        }\n\n        let positionX = startX;\n        let positionY = startY;\n        let i = 0;\n\n        for (let y = 0; y < rows; y++) {\n            for (let x = 0; x < columns; x++) {\n                const tData = {\n                    img: cardDraws[i].data.img,\n                    width: cardWidth,\n                    height: cardHeight,\n                    x: positionX,\n                    y: positionY,\n                    'flags.swademacros.isChaseCard': true\n                };\n                if (!stackCards) {\n                    positionX = positionX + cardWidth + spacingX;\n                }\n                await TileDocument.create(tData, { parent: canvas.scene });\n                i++;\n            }\n            if (!stackCards) {\n                positionY = positionY + cardHeight + spacingY;\n            }\n            positionX = startX;\n        }\n    }\n}\n\nfunction main() {\n    //How Many Cards to Draw\n    //Width/Height\n    //Which Table to Draw From\n    const grid = canvas.scene.data.grid;\n\n    let cardsList = ``;\n    Array.from(game.tables).map((t) => {\n        cardsList += `<option value=\"${t.data.name}\">${t.data.name}</option>`;\n    });\n\n    const template = `\n        <style scoped>\n            .custom-sizing-spacing {\n                margin: 1em 0;\n            }\n        </style>\n        <form>\n            <fieldset>\n                <legend>Choose a Roll Table</legend>\n                <p>\n                    <label for=\"table-name\">Table to Draw From: <select id=\"table-name\">${cardsList}</select></label>\n                </p>\n            </fieldset>\n            <fieldset>\n                <legend>Layout</legend>\n                <table style=\"text-align: center;\">\n                <tbody>\n                  <tr>\n                    <td><label for=\"card-rows\">Rows: <input id=\"card-rows\" type=\"number\" min=\"1\" style=\"width: 50px;\" value=\"1\"></label></td>\n                    <td><label for=\"card-columns\">Columns: <input id=\"card-columns\" type=\"number\" min=\"1\" style=\"width: 50px;\" value=\"9\"></label></td>\n                  </tr>\n                </tbody>\n                </table>\n                <p>--OR--</p>\n                <p>\n                    <label for=\"stack-cards\"><input type=\"checkbox\" id=\"stack-cards\"/> Stack cards into single pile</label>\n                </p>\n            </fieldset>\n            <details class=\"custom-sizing-spacing\">\n                <summary>Customize Card Size and Spacing</summary>\n                <fieldset>\n                    <legend>Card Size (in pixels)</legend>\n                    <table style=\"text-align: center;\">\n                    <tbody>\n                      <tr>\n                        <td>\n                          <label for=\"card-height\">Height: <input id=\"card-height\" type=\"number\" min=\"1\" style=\"width: 50px;\" value=\"${grid * 3.5}\"></label>\n                        </td>\n                        <td>\n                          <label for=\"card-width\">Width: <input id=\"card-width\" type=\"number\" min=\"1\" style=\"width: 50px;\" value=\"${grid * 2.5}\"></label>\n                        </td>\n                      </tr>\n                    </tbody>\n                    </table>\n                </fieldset>\n                <fieldset>\n                    <legend>Spacing between Cards (in pixels)</legend>\n                      <table style=\"text-align: center;\">\n                      <tbody>\n                        <tr>\n                          <td>\n                            <label for=\"spacing-x\">Columns: <input id=\"spacing-x\" type=\"number\" min=\"0\" value=\"${grid / 2}\" step=\"1\" style=\"width: 50px;\"></label>\n                          </td>\n                          <td>\n                            <label for=\"spacing-y\">Rows: <input id=\"spacing-y\" type=\"number\" min=\"0\" value=\"${grid / 2}\" step=\"1\" style=\"width: 50px;\"></label>\n                          </td>\n                        </tr>\n                      </tbody>\n                      </table>\n                </fieldset>\n            </details>\n        </form>\n        `;\n    new Dialog({\n        title: `Draw Cards To Table - ${version}`,\n        content: template,\n        buttons: {\n            ok: {\n                label: `<b>Draw</b>`,\n                callback: async (html) => {\n                    makeTiles(html);\n                },\n            },\n            resetTable: {\n                label: `<b style=\"color:red\">Reset</b>`,\n                callback: async (html) => {\n                    const tableName = html.find('#table-name')[0].value;\n                    const table = await game.tables.find((t) => t.data.name === tableName);\n                    if (table !== undefined) {\n                        table.reset();\n                        ui.notifications.info(`The RollTable \"${tableName}\" has been reset.`)\n\n                    } else {\n                        ui.notifications.warn(`Please select a RollTable to reset.`)\n                    }\n                    const chaseCards = await canvas.scene.tiles.filter(t => t.getFlag('swademacros', 'isChaseCard') === true);\n                    if (chaseCards.length) {\n                        for await (const card of chaseCards) {\n                            await card.delete();\n                        }\n                        ui.notifications.info(`All tiles from ${tableName} have been removed from the scene.`)\n                    }\n                }\n            },\n            cancel: {\n                label: 'Cancel',\n            },\n        },\n    }).render(true);\n}\n\nmain();","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.I87UuOLuH6ww73uM"}},"_id":"GDpSV9qnf3fJhFdJ"}
{"name":"Gang Up","type":"script","author":"tckKxzbezKvre3KI","img":"icons/creatures/mammals/wolf-shadow-black.webp","scope":"global","command":"const version = 'v1.5';\nconst chatimage = \"icons/creatures/mammals/wolf-shadow-black.webp\";\n\n/* Gang Up p101 SWADE core\nIMPORTANT\n- YOU SHOULD DEFINE TOKEN DISPOSITION: FRIENDLY FOR PCS AND ALLIES. HOSTILE FOR ENEMIES\n\nMODULES\n- OPTIONAL: Token Faction\n\nTODO\n- detect dead\n- JB2A\n\nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Savage%20Worlds/GangUp.js\nicon: icons/creatures/mammals/wolf-shadow-black.webp\n*/\n\n// Requires at least 1 target\nif (canvas.tokens.controlled[0]===undefined || Array.from(game.user.targets)[0]===undefined){\n  ui.notifications.warn(\"You must select a token and target another one!\");    \n} else {\n  let target=Array.from(game.user.targets)[0]; // token will not be count\n  let attacker=canvas.tokens.controlled[0];  \n  messageToTheChat(attacker, target);\n}\n\nfunction messageToTheChat(attacker, target) {\n  let message = `<h2 style=\"color:red\"><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\">Gang Up</h2>`;\n  message += `<p><b style=\"color:red\">${attacker.name}</b> will receive ${gangUp(attacker, target)} to attack <b style=\"color:darkblue\">${target.name}</b></p>`;\n  \n  // send message\n  let chatData = {\n    user: game.user.id,    \n    content: message\n  };  \n  ChatMessage.create(chatData, {});  \n}\n\n// pg 101 swade core\n// - Each additional adjacent foe (who isn’t Stunned)\n// - adds +1 to all the attackers’ Fighting rolls, up to a maximum of +4.\n// - Each ally adjacent to the defender cancels out one point of Gang Up bonus from an attacker adjacent to both.\nfunction gangUp(attacker, target) {\n  const debug_flag=true;\n\n  let itemRange=1; // dist 1''\n  let enemies;\n  let allies;\n  let modifier=0;\n  \n  let withinRangeOfToken;\n  let alliedWithinRangeOfToken;\n  let alliedWithinRangeOfTargetAndAttacker;\n  \n  if (attacker.data.disposition===-1) { // NPC (hostile) is attacking PCs (friendly)\n    withinRangeOfToken = canvas.tokens.placeables.filter(t => \n      t.id !== attacker.id \n      && t.data.disposition === -1 \n      && t.actor.data.data.status.isStunned === false \n      && t.visible \n      && withinRange(target, t, itemRange)\n    );    \n    alliedWithinRangeOfToken = canvas.tokens.placeables.filter(t => \n      t.id !== target.id \n      && t.data.disposition === 1 \n      && t.actor.data.data.status.isStunned === false \n      && withinRange(target, t, itemRange)\n    );    \n    //alliedWithinRangeOfTargetAndAttacker intersection with attacker and target\n    alliedWithinRangeOfTargetAndAttacker = alliedWithinRangeOfToken.filter(t => \n      t.data.disposition === 1 \n      && t.actor.data.data.status.isStunned === false \n      && withinRange(attacker, t, itemRange)\n    );    \n  } else if (attacker.data.disposition===1) { // PCs (friendly) is attacking NPC (hostile)\n    withinRangeOfToken = canvas.tokens.placeables.filter(t => \n      t.id !== attacker.id \n      && t.data.disposition === 1 \n      && t.actor.data.data.status.isStunned === false \n      && t.visible \n      && withinRange(target, t, itemRange)\n    );    \n    alliedWithinRangeOfToken = canvas.tokens.placeables.filter(t => \n      t.id !== target.id \n      && t.data.disposition === -1 \n      && t.actor.data.data.status.isStunned === false \n      && withinRange(target, t, itemRange)\n    );    \n    //alliedWithinRangeOfTargetAndAttacker intersection with attacker and target\n    alliedWithinRangeOfTargetAndAttacker = alliedWithinRangeOfToken.filter(t => \n      t.data.disposition === -1 \n      && t.actor.data.data.status.isStunned === false \n      && withinRange(attacker, t, itemRange)\n    ); \n  }\n\n  enemies = withinRangeOfToken.length;   \n  allies = alliedWithinRangeOfTargetAndAttacker.length;\n  modifier = Math.max(0, (enemies-allies) );  \n\n  //debug\n  if (debug_flag) {\n    console.log('-----------------------');\n    console.log('Enemies: ' + withinRangeOfToken.length);\n    console.log('Allies: ' + alliedWithinRangeOfToken.length);\n    console.log('Allies Adjacent to Both: ' + alliedWithinRangeOfTargetAndAttacker.length);\n    console.log('Modifier: ' + modifier);\n    console.log('-----------------------');\n  }\n  return Math.min( 4, modifier );\n}\n\n// function from Kekilla\nfunction withinRange(origin, target, range) {\n    const ray = new Ray(origin, target);\n    let distance = canvas.grid.measureDistances([{ ray }], { gridSpaces: true })[0];\n    return range >= distance;\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.DLCBPZ662cUYbgil"}},"_id":"Sw39b1nae5G5P7MX"}
{"name":"3D Measure","type":"script","author":"tckKxzbezKvre3KI","img":"icons/tools/navigation/sextant-steel-blue.webp","scope":"global","command":"const version = '0.1';\nconst icon = 'icons/tools/navigation/sextant-steel-blue.webp';\n\n/* Medir distância v0.1 / Measure distance between two 3d coordinates\nHow to\n1 - Marque um token.\n2 - Selecione outro token\n3 - Execute a macro.\n*/\n\nfunction measureDistance(origin, target) {\n  const gs = canvas.dimensions.size;\n  const ray = new Ray(origin, target);\n\n  // How many squares do we travel across to get there? If 2.3, we should count that as 3 instead of 2; hence, Math.ceil\n  const nx = Math.ceil(Math.abs(ray.dx / gs));\n  const ny = Math.ceil(Math.abs(ray.dy / gs));\n\n  // Elevation\n  const gd = game.scenes.active.data.gridDistance;\n  const oz = origin.elevation ? origin.elevation : 0;\n  const tz = target.elevation ? target.elevation : 0;\n  const nz = Math.ceil(Math.abs(tz - oz) / gd);\n\n  // Let's order and rename nx, ny, nz so that A >= B >= C\n  let [A, B, C] = [nx, ny, nz].sort(function(a, b) { return b - a; });\n\n  // Get the total number of straight and diagonal moves\n  const nStraight = A - B;\n  const nDiagonal = B;\n  const n3dDiagonal = C;\n\n  // Get total distance\n  const distance =\n      nStraight                       // 1 each\n    + Math.floor(nDiagonal * 1.5)     // 1 then 2 then 1 then 2...\n    + Math.floor(n3dDiagonal * 0.5);  // 0 then 1 then 0 then 1...\n\n  // Convert distance to grid's dimensions\n  const distanceOnGrid = distance * canvas.dimensions.distance;\n  return distanceOnGrid;\n}\n\n/*\n * Measure distance between two tokens\n */\nfunction computeDistance(token, target)\n{\n  let tokenData = token.data;\n  let targetData = target.data;\n  const gs = canvas.dimensions.size;\n  const gd = game.scenes.active.data.gridDistance;\n\n  // Set search variables\n  var minDistance = 100000;\n  var minTokenSquare = {};\n  var minTargetSquare = {};\n  var tokenSquare = {};\n  var targetSquare = {};\n  var distance;\n\n  // Search for minimum distance\n  for (let toX = 0; toX < tokenData.width; ++toX) {\n    for (let toY = 0; toY < tokenData.height; ++toY) {\n      for (let toZ = 0; toZ < tokenData.width; ++toZ) {\n        for (let taX = 0; taX < targetData.width; ++taX) {\n          for (let taY = 0; taY < targetData.height; ++taY) {\n            for (let taZ = 0; taZ < targetData.width; ++taZ) {\n              tokenSquare = {\n                x: tokenData.x + toX * gs,\n                y: tokenData.y + toY * gs,\n                elevation: tokenData.elevation + toZ * gd,\n              };\n              targetSquare = {\n                x: targetData.x + taX * gs,\n                y: targetData.y + taY * gs,\n                elevation: targetData.elevation + taZ * gd,\n              }\n              distance = measureDistance(tokenSquare, targetSquare);\n              if (distance < minDistance) {\n                minDistance = distance;\n                minTokenSquare = tokenSquare;\n                minTargetSquare = targetSquare;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return minDistance;\n}\n\n/*\n * Measure distances between a token and a list of targets\n */\nfunction computeDistances(token, targets)\n{\n  return targets.map(function(target) {\n    return {\n      name: target.data.name,\n      distance: computeDistance(token, target),\n    };\n  });\n}\n\n/*\n * Print results to chat\n */\nfunction showResults(token, distances)\n{\n  let content = '';\n  message = `<h3><img style=\"vertical-align:middle\" src=${icon} width=\"28\" height=\"28\"> Distance From <b>${token.name}</b></h3>`;\n  \n  for(const d of distances) {\n    message += `<p><b>${d.name}</b>: <b style=\"color: red\">${d.distance}</b></p>`;\n  };    \n\n  ChatMessage.create({\n    content: message,\n    type: CONST.CHAT_MESSAGE_TYPES.OOC\n  });\n}\n\n/*\n * Run everything\n */\nfunction main() {\n  const selected = canvas.tokens.controlled;\n  if (selected.length === 0) {\n    ui.notifications.error(\"Please select at least one token\");\n    return;\n  }\n\n  const targets = Array.from(game.user.targets);\n  if (targets.length === 0) {\n    ui.notifications.error(\"Please select at least one target\");\n    return;\n  }\n\n  for (let token of selected) {\n    const distances = computeDistances(token, targets);\n    showResults(token, distances);\n  }\n}\n\nmain();","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.lpW34BDw1BpoKhXD"}},"_id":"USH33cO8nLvsfB9E"}
{"name":"Grappling","type":"script","author":"tckKxzbezKvre3KI","img":"icons/commodities/biological/tentacle-purple-white.webp","scope":"global","command":"const version = 'v1.2';\nconst chatimage = \"icons/commodities/biological/tentacle-purple-white.webp\";\nlet coreRules = false;\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\n\n/* Grappling p101 SWADE core\nIMPORTANT\n- \n\nTODO\n- \nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Savage%20Worlds/Grappling.js\nicon: icons/commodities/biological/tentacle-purple-white.webp\n*/\n\n// Requires at least 1 target\nif (canvas.tokens.controlled[0]===undefined || Array.from(game.user.targets)[0]===undefined){\n  ui.notifications.warn(\"You must select a token and target another one!\");    \n} else {\n  let attacker=canvas.tokens.controlled[0];\n  let target=Array.from(game.user.targets)[0];    \n  messageToTheChat(attacker, target);\n}\n\nfunction messageToTheChat(attacker, target) {\n  let gangupbonus = gangUp(attacker, target);\n  let sizebonus = Math.abs(calc(attacker, target));\n  let attackerRolled;\n  let targetRolled;\n  let rolls3D=[];\n  \n  let message;\n  if (coreRules) {\n      message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> @Compendium[swade-core-rules.swade-rules.od3tHNJTS8Ma4n2o]{Grappling}</h2>`;\n  } else {\n     message = `<div><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Grappling</h2>`;\n  }    \n\n  attackerRolled = rollSkill(attacker, 'Athletics');  \n  rolls3D.push(attackerRolled);\n\n  targetRolled = rollSkill(target, 'Athletics');  \n  rolls3D.push(targetRolled);\n  \n  let attackerResult;\n  let attackerCriticalFailure=false;  \n  let targetResult;\n  let targetCriticalFailure=false;  \n  if (isWildCard(attacker)) {\n    let attackerTrait = attackerRolled.terms[0].rolls[0].total;\n    let attackerWild = attackerRolled.terms[0].rolls[1].total;  \n    attackerResult = Math.max( attackerTrait, attackerWild );\n    if ( attackerTrait==1 && attackerWild==1 ) {attackerCriticalFailure=true;}\n  } else {\n    attackerResult = attackerRolled.total;\n  }\n  if (isWildCard(target)) {\n    let targetTrait = targetRolled.terms[0].rolls[0].total;\n    let targetWild = targetRolled.terms[0].rolls[1].total;       \n    targetResult = Math.max( targetTrait, targetWild );\n    if ( targetTrait==1 && targetWild==1 ) {targetCriticalFailure=true;}\n  } else {\n    targetResult = targetRolled.total;\n  }  \n\n  //other bonuses\n  attackerResult+=gangupbonus-sizebonus;  \n  \n  message += `<p><b style=\"color:red\">${attacker.name} (${attackerResult})</b> is trying to grab <b style=\"color:darkblue\">${target.name} (${targetResult})</b>.</p>`;\n  if (coreRules) {\n    message += `<ul><li>The @Compendium[swade-core-rules.swade-rules.hdXOHCe38O8KGyUz]{Ganging Up} bonus is: ${gangupbonus}</li>`;\n  } else {\n    message += `<ul><li>The Gang Up bonus is: ${gangupbonus}</li>`;  \n  }   \n  if (coreRules) {\n    message += `<li>The @Compendium[swade-core-rules.swade-rules.mbP0fwcquD98QtwX]{Size & Scale} penalty is: -${sizebonus}</li></ul>`;\n  } else {\n    message += `<li>The Size/Scale penalty is: ${sizebonus}</li></ul>`;    \n  }  \n\n  //outcome\n  if ( attackerResult>=targetResult ) {\n    if ( (attackerResult+4)>=targetResult ) {\n      if (coreRules) {\n        message += `<p>The ${target.name} is @Compendium[swade-core-rules.swade-rules.sTArFBzbesQkjLVg]{Bound and Entangled}.</p>`;\n      } else {\n        message += `<p>The ${target.name} is Entangled and Bound.</p>`;        \n      }        \n    } else {\n      if (coreRules) {\n        message += `<p>The ${target.name} is @Compendium[swade-core-rules.swade-rules.sTArFBzbesQkjLVg]{Entangled}.</p>`;\n      } else {\n        message += `<p>The ${target.name} is Entangled.</p>`;        \n      }         \n    }\n  } else {\n    message += `<p>${attacker.name} failed.</p>`;\n  }  \n  \n  message+=`</div>`;\n  \n  // send message\n  let chatData = {\n    content: message\n  };  \n  ChatMessage.create(chatData, {});  \n  let criticalFailureMessage = `<p><b style=\"color:red\">CRITICAL FAILURE</b></p>`;   \n  if (!attackerCriticalFailure) {criticalFailureMessage =``;}   \n  rolls3D[0].toMessage({flavor: `<h3 style=\"color:red\">${attacker.name}</h3>${criticalFailureMessage}`});\n  \n  criticalFailureMessage = `<p><b style=\"color:red\">CRITICAL FAILURE</b></p>`;   \n  if (!targetCriticalFailure) {criticalFailureMessage =``;}  \n  rolls3D[1].toMessage({flavor: `<h3 style=\"color:red\">${target.name}</h3>${criticalFailureMessage}`});  \n  \n}\n\n// pg 101 swade core\n// - Each additional adjacent foe (who isn’t Stunned)\n// - adds +1 to all the attackers’ Fighting rolls, up to a maximum of +4.\n// - Each ally adjacent to the defender cancels out one point of Gang Up bonus from an attacker adjacent to both.\nfunction gangUp(attacker, target) {\n  const debug_flag=true;\n\n  let itemRange=1; // dist 1''\n  let enemies;\n  let allies;\n  let modifier=0;\n  \n  let withinRangeOfToken;\n  let alliedWithinRangeOfToken;\n  let alliedWithinRangeOfTargetAndAttacker;\n  \n  if (attacker.data.disposition===-1) { // NPC (hostile) is attacking PCs (friendly)\n    withinRangeOfToken = canvas.tokens.placeables.filter(t => \n      t.id !== attacker.id \n      && t.data.disposition === -1 \n      && t.actor.data.data.status.isStunned === false \n      && t.visible \n      && withinRange(target, t, itemRange)\n    );    \n    alliedWithinRangeOfToken = canvas.tokens.placeables.filter(t => \n      t.id !== target.id \n      && t.data.disposition === 1 \n      && t.actor.data.data.status.isStunned === false \n      && withinRange(target, t, itemRange)\n    );    \n    //alliedWithinRangeOfTargetAndAttacker intersection with attacker and target\n    alliedWithinRangeOfTargetAndAttacker = alliedWithinRangeOfToken.filter(t => \n      t.data.disposition === 1 \n      && t.actor.data.data.status.isStunned === false \n      && withinRange(attacker, t, itemRange)\n    );   \n    console.log('case 1')\n  } else if (attacker.data.disposition===1) { // PCs (friendly) is attacking NPC (hostile)\n    withinRangeOfToken = canvas.tokens.placeables.filter(t => \n      t.id !== attacker.id \n      && t.data.disposition === 1 \n      && t.actor.data.data.status.isStunned === false \n      && t.visible \n      && withinRange(target, t, itemRange)\n    );    \n    alliedWithinRangeOfToken = canvas.tokens.placeables.filter(t => \n      t.id !== target.id \n      && t.data.disposition === -1 \n      && t.actor.data.data.status.isStunned === false \n      && withinRange(target, t, itemRange)\n    );    \n    //alliedWithinRangeOfTargetAndAttacker intersection with attacker and target\n    alliedWithinRangeOfTargetAndAttacker = alliedWithinRangeOfToken.filter(t => \n      t.data.disposition === -1 \n      && t.actor.data.data.status.isStunned === false \n      && withinRange(attacker, t, itemRange)\n    ); \n    console.log('case 2')\n  }\n\n  enemies = withinRangeOfToken.length;   \n  allies = alliedWithinRangeOfTargetAndAttacker.length;\n  modifier = Math.max(0, (enemies-allies) );  \n\n  //debug\n  if (debug_flag) {\n    console.log('-----------------------');\n    console.log('Enemies: ' + withinRangeOfToken.length);\n    console.log('Allies: ' + alliedWithinRangeOfToken.length);\n    console.log('Allies Adjacent to Both: ' + alliedWithinRangeOfTargetAndAttacker.length);\n    console.log('Modifier: ' + modifier);\n    console.log('Output: ' + Math.min( 4, modifier ));\n    console.log('-----------------------');\n  }\n  return Math.min( 4, modifier );\n}\n\n// function from Kekilla\nfunction withinRange(origin, target, range) {\n    const ray = new Ray(origin, target);\n    let distance = canvas.grid.measureDistances([{ ray }], { gridSpaces: true })[0];\n    return range >= distance;\n}\n\n// ======================\nfunction calc(attacker, target) {\n  let actorSize = attacker.actor.data.data.stats.size;\n  let targetSize = target.actor.data.data.stats.size;\n  let actorModifier = sizeToModifier(actorSize);\n  let targetModifier = sizeToModifier(targetSize);\n  let swat=false;   \n  \n  let diff;\n  if (actorModifier == targetModifier) {\n      return 0;\n  } else {\n      if (actorModifier < targetModifier) {\n          if (swat) {\n            diff = Math.abs(actorModifier) + Math.abs(targetModifier);\n            diff = Math.max( (diff-4), 0);\n          } else {                  \n            diff = Math.abs(actorModifier) + Math.abs(targetModifier);\n          }\n          return diff;\n      } else {\n          if (swat) {\n            diff = Math.abs(actorModifier) + Math.abs(targetModifier);                  \n            diff = Math.max( (diff-4), 0);\n          } else {\n            diff = Math.abs(actorModifier) + Math.abs(targetModifier);\n          }                \n          return -diff;\n      }\n  }\n}\n\nfunction sizeToModifier(size) { //p179 swade core\n    if (size == -4) {\n        return -6;\n    } else if (size == -3) {\n        return -4;\n    } else if (size == -2) {\n        return -2;\n    } else if (size >= -1 && size <= 3) {\n        return 0;\n    } else if (size >= 4 && size <= 7) {\n        return 2;\n    } else if (size >= 8 && size <= 11) {\n        return 4;\n    } else if (size >= 12 && size <= 20) {\n        return 6;\n    }\n}\n\n// COMMONS v0.1\nfunction rollSkill(myActor, skill) { \n  let actorSkill = myActor.actor.data.items.find(i => (i.name.toLowerCase().includes(skill.toLowerCase()) ) );\n  let diceExpression;\n  if (actorSkill) { // healing\n    let actorSkillMod = actorSkill.data.data.die.modifier;\n    if(!actorSkillMod) { actorSkillMod = 0; }\n    if (isWildCard(myActor)) {\n      diceExpression = '{1d'+actorSkill.data.data.die.sides + 'x+' + actorSkillMod + ',1d6x}';\n    } else {\n      diceExpression = '1d'+actorSkill.data.data.die.sides + 'x+' + actorSkillMod;\n    }    \n  } else { // untrained\n    if (isWildCard(myActor)) {\n      diceExpression = '{1d4x-2,1d6x}';\n    } else {\n      diceExpression = '1d4x-2';\n    }\n  }\n  return new Roll(diceExpression).roll({ async : false });  \n}\n\nfunction isWildCard(token) {  \n  return token.actor.data.data.wildcard;\n}\n\nfunction isCritical(rolled) {\n  let trait = rolled.terms[0].rolls[0].terms[0].results[0].result;  \n  let wild = rolled.terms[0].rolls[1].terms[0].results[0].result;  \n  return (trait==1 && wild==1);\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.nUOg0MYMaKIATGUq"}},"_id":"ZOqnfCLOw28qMSuh"}
{"name":"Adventure Generator","type":"script","author":"tckKxzbezKvre3KI","img":"modules/deadlands-core-rules/assets/icons/deadlands-logo.webp","scope":"global","command":"const version = '1.0';\n// icon: modules/deadlands-core-rules/assets/icons/deadlands-logo.webp\n\nmain();\n\nasync function main() {\n  let message;\n\n  let Objective = await drawFromTable('Objective');\n  let Obstacle = await drawFromTable('Obstacle');\n  let Complication = await drawFromTable('Complication');\n  \n  let adventureContent = `<h2>Objective</h2>` + Objective.results[0].text;\n  adventureContent += `<h2>Obstacle</h2>` + Obstacle.results[0].text;\n  adventureContent += `<h2>Complication</h2>` + Complication.results[0].text;  \n\n  let data = {\n    name: 'My New Adventure',\n    content: adventureContent\n  };\n\n  addEventListenerOnHtmlElement(\"#createAdventure\", 'click', (e) => {    \n    createAdventure(data);\n  });            \n  message+=`<p>If you click the button this adventure will be posted in a journal.</p>`;\n  message+=`<button style=\"background:#d10000;color:white\" id=\"createAdventure\">Create Adventure</button>`;\n  \n  let chatData = {\n    user: game.user.id,    \n    content: message,\n    whisper : ChatMessage.getWhisperRecipients(\"GM\")\n  };   \n  ChatMessage.create(chatData, {});  \n}\n\nfunction addEventListenerOnHtmlElement(element, event, func){    \n    Hooks.once(\"renderChatMessage\", (chatItem, html) => { // Use Hook to add event to chat message html element\n        html[0].querySelector(element).addEventListener(event, func);        \n    });\n} // end addEventListenerOnHtmlElement\n\nasync function createAdventure(data) {  \n  const instantAdventure = await JournalEntry.create(data);\n  await instantAdventure.sheet.render(true);    \n}\n\nasync function drawFromTable(tableName) {\n  let list_compendium = await game.packs.filter(p=>p.documentName=='RollTable');      \n  let inside = await list_compendium.filter( p=>p.metadata.label=='Deadlands Tables' )[0].getDocuments();      \n  let table = await inside.filter( p=>p.data['name']==tableName )[0];\n  \n  if (!table) {\n    ui.notifications.warn(`Table ${tableName} not found.`, {});\n    return;\n  }\n  return await table.draw({rollMode: 'gmroll'});\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.F4cGOLzvnvTtupRT"}},"_id":"bhrJg0AjjpUCJULi"}
{"name":"Deviation","type":"script","author":"tckKxzbezKvre3KI","img":"icons/weapons/thrown/dynamite-simple-brown.webp","scope":"global","command":"const version = 'v1.1';\nconst chatimage = \"https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Savage%20Worlds/icons/clock.webp\";\n\n/* Deviation p99 SWADE\nIf a blast template misses, it deviates 1d6″\nfor thrown weapons (such as grenades) and\n2d6″ for fired projectiles. Multiply by 2 if the\nattack was made at Medium Range, 3 if Long,\nand 4 for Extreme.\n\nNext roll a d12 and read it like a clock\nfacing to determine the direction the missile\ndeviates. A weapon can never deviate more\nthan half the distance to the original target\n(that keeps it from going behind the thrower).\n\nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Savage%20Worlds/Deviation.js\nicon: icons/weapons/thrown/dynamite-simple-brown.webp\n*/\n\nlet coreRules = false;\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\nconst chaticon = 'icons/weapons/thrown/dynamite-simple-brown.webp';\n\ngetRequirements();\n\nfunction getRequirements() {\n  let template = `\n  <h2>Weapon Type</h2>\n  <table style=\"width:100%\">\n  <tr>\n    <td><input type=\"radio\" id=\"thrown\" name=\"weapontype\" value=\"thrown\"><label for=\"thrown\">Thrown weapon</label></td>\n    <td><input type=\"radio\" id=\"projectile\" name=\"weapontype\" value=\"projectile\" checked=\"checked><label for=\"projectile\">Projectile</label></td>    \n  </tr>\n  </table>  \n  <h2>Range</h2>\n  <table style=\"width:100%\">\n  <tr>\n    <td><input type=\"radio\" id=\"short\" name=\"range\" value=\"short\" checked=\"checked><label for=\"thrown\">Short</label></td>\n    <td><input type=\"radio\" id=\"medium\" name=\"range\" value=\"medium\"><label for=\"projectile\">Medium</label></td>    \n    <td><input type=\"radio\" id=\"long\" name=\"range\" value=\"long\"><label for=\"projectile\">Long</label></td>    \n    <td><input type=\"radio\" id=\"extreme\" name=\"range\" value=\"extreme\"><label for=\"projectile\">Extreme</label></td>    \n  </tr>\n  </table>    \n  `;\n  new Dialog({\n    title: \"Deviation\",\n    content: template,\n    buttons: {\n      ok: {\n        label: \"Go!\",\n        callback: async (html) => {\n          rollForIt(html);\n        },\n      }\n    },\n  }).render(true);\n}\n\nfunction rollForIt(html) {\n  const weapontype=html.find('input[name=\"weapontype\"]:checked').val();\n  const range=html.find('input[name=\"range\"]:checked').val();\n  \n  if (weapontype=='thrown') {\n    diceRoll('1d6', range);\n  } else {\n    diceRoll('2d6', range);\n  }\n}\n\nfunction diceRoll(die, range) {\n  const rangeMultiplier = rangeCheck(range);\n  let roll = new Roll('{1d12,'+die+'}').roll({ async : false });\n  let direction = roll.terms[0].rolls[0].total;  \n  let distance =  roll.terms[0].rolls[1].total*rangeMultiplier;  \n\n  let message = `<div><h2><img style=\"vertical-align:middle\" src=${chaticon} width=\"28\" height=\"28\">Deviation</h2>`;    \n  if (coreRules === true) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chaticon} width=\"28\" height=\"28\"> @Compendium[swade-core-rules.swade-rules.xxEcWExtn36PPxg0]{Deviation}</h2>`;\n  }  \n  \n  message += `<p>Move the blast <b>${distance}\"</b> to <b style=\"color:red\">${direction}</b> O'Clock.</p>`;\n  if (directionCheck(direction)) {\n    message += `<p><b style=\"color:red\">A weapon can never deviate more than half the distance to the original target (that keeps it from going behind the thrower).</b></p>`;\n  }\n  message += `<p style=\"text-align:center\"><img style=\"vertical-align:middle\" src=${chatimage} width=\"200\" height=\"200\"><p></div>`;\n  \n  let chatData = {\n      content: message\n  };\n  ChatMessage.create(chatData, {});  \n  let tempChatData = {\n    content: message\n  };     \n  roll.toMessage();\n}\n\nfunction rangeCheck(range) {\n  if (range=='short') {\n    return 1;\n  } else if (range=='medium') {\n    return 2;\n  } else if (range=='long') {\n    return 3;\n  } else if (range=='extreme') {\n    return 4;\n  }\n}\n\nfunction directionCheck(direction) {\n  console.log(direction);\n  if (direction==4 || direction==5 || direction==6 || direction==7 || direction==8) {\n    return true\n  } else {\n    return false\n  } \n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"core":{"sourceId":"Macro.WMkBn3WtDCfnSJYY"}},"_id":"cvZoXMvk2le5LmAX"}
{"name":"GM Macro Manager","type":"script","author":"tckKxzbezKvre3KI","img":"icons/sundries/documents/document-sealed-signatures-red.webp","scope":"global","command":"const version = '0.2';\n\n/*\n  GM Menu\n  \n  icons: icons/sundries/documents/document-sealed-signatures-red.webp\n  \n  Fill the constant macros with the names of your macros, when you click the button it will run the macro.\n\n  Dialog Window will not close until the X button is pressed.\n*/\nconst managerType = 'GM - Macro Manager';\n\n(()=>{\n  const macros = [\n    \"Chase\",\n    \"Deviation\",\n    \"Mass Battle\",\n    \"Raise Calculator\",\n    \"Size/Scale Calculator\",\n    \"Quick Combat\"\n  ];\n\n  let buttons = {}, dialog, content = `<div sytle=\"width:100%;text-align:center;><h2>Choose Macro</h2></div>`;\n  \n  macros.forEach((str)=> {\n    let macro = game.macros.getName(str);\n    if(!macro) return;\n\n    buttons[str] = {\n      label : `\n        <div style=\"display:flex;flex-direction:row;justify-content:center;align-items:center;width\">\n          <div style=\"display:flex;justify-content:left;flex-grow:1;\"><img src=\"${macro.data.img}\" width=\"25\" height=\"25\" style=\"background-color:#5c5c5c;\"/></div>\n          <div style=\"display:flex;justify-content:left;flex-grow:4\"><label>${str}</label></div>\n        </div>`,\n      callback : () => {\n        game.macros.getName(str).execute();\n        dialog.render(true);\n      }\n    }\n  });\n  dialog = new Dialog({title : `${managerType}`,content, buttons}).render(true);\n})();","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.CYeOLOiduSlAuvpG"}},"_id":"djvP5XBRrSpg9dXL"}
{"name":"Quick Combat","type":"script","author":"tckKxzbezKvre3KI","img":"icons/magic/time/clock-stopwatch-white-blue.webp","scope":"global","command":"/* All tokens to Combat v1.1\n* - This macro select all tokens in the scene\n* - Add all of them to the combat tracker\n* - Roll Initiave for all\n* modified from @atnoslen with a little help from @Atropos (thanks!) \n* source: \n* icon: icons/magic/time/clock-stopwatch-white-blue.webp\n*/\n\n(async () => {\n  const scene = game.scenes.contents.filter(scene => scene.active === true)[0];\n  let tokens = [];\n  \n  let startCRoll=async function rollAndStart() {\n    await game.combat.rollAll();\n    await game.combat.startCombat();\n  }\n\n  if (!game.combat) {\n    scene.data.tokens.forEach(function(token) {\n      tokens.push({tokenId:token.id});\n    });\n\n    Combat.create({scene:scene.data._id, combatants:tokens}).then(startCRoll);\n\n  } else {\n    // Combat already exists, add the missing tokens.\n    // This assumes createCombatant is expensive, so create an array\n    // instead of calling individually.\n    scene.data.tokens.forEach(function(token) {\n      if (game.combat.combatants.filter(combatant => combatant.tokenId === token.id).length === 0) {\n        tokens.push({tokenId:token.id});\n      }\n    });\n\n    //game.combat.createCombatant(tokens).then(startCRoll);\n    game.combat.createEmbeddedDocuments(\"Combatant\", tokens).then(startCRoll);\n\n    //The Combat#createCombatant method has been deprecated in favor of Combatant.create and will be removed in 0.9.0\n  }\n  \n})()","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"core":{"sourceId":"Macro.JyWJ0QNXLbgQWcls"}},"_id":"exK7nAmwLUGxg4HM"}
{"name":"Size/Scale Calculator","type":"script","author":"tckKxzbezKvre3KI","img":"icons/tools/hand/scale-balances-merchant-brown.webp","scope":"global","command":"const version = 'v1.7';\nconst chatimage = \"icons/tools/hand/scale-balances-merchant-brown.webp\";\n\n/* Size Scale p106 SWADE\n\nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Savage%20Worlds/SizeScaleCalculator.js\nicon: icons/tools/hand/scale-balances-merchant-brown.webp\n*/\n\nlet tokenActor = canvas.tokens.controlled[0];\nlet tokenTarget = Array.from(game.user.targets)[0];\nlet coreRules = false;\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\n\nif (tokenActor === undefined || tokenTarget === undefined) {\n    ui.notifications.warn(\"You must select a token and target another one!\");\n} else {\n    const actorSwat = token.actor.data.items.find(function (item) {\n        return ((item.name.toLowerCase() === \"swat\") && item.type === \"ability\");\n    });\n    const targetSwat = tokenTarget.actor.data.items.find(function (item) {\n        return ((item.name.toLowerCase() === \"swat\") && item.type === \"ability\");\n    });\n    rollForIt();\n\n\n    function rollForIt() {\n        let actorSize = tokenActor.actor.data.data.stats.size;\n        let targetSize = tokenTarget.actor.data.data.stats.size;\n        let actorModifier = sizeToModifier(actorSize);\n        let targetModifier = sizeToModifier(targetSize);\n        let modifier = calc(actorModifier, targetModifier);\n\n        let message = `<div><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Size & Scale Calculator</h2>`;\n        if (coreRules === true) {\n            message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> @Compendium[swade-core-rules.swade-rules.mbP0fwcquD98QtwX]{Size & Scale} Calculator</h2>`;\n        }\n        message += `<ul><li><b>${tokenActor.name}:</b> Size = ${actorSize} / Modifier = ${actorModifier}</li>`;\n        message += `<li><b>${tokenTarget.name}:</b> Size = ${targetSize} / Modifier = ${targetModifier}</li></ul>`;\n        message += `<h3>Result:</h3>`;\n        if (modifier != 0) {\n            message += `<ul><li>${tokenActor.name} has <b style=\"color:red\">${modifier}</b> to attack ${tokenTarget.name}`;\n            if (actorSwat) {\n                message += ` and has Swat*.</li>`;\n            } else { message += `.</li>` }\n            message += `<li>${tokenTarget.name} has <b style=\"color:red\">${calc(targetModifier, actorModifier)}</b> to attack ${tokenActor.name}`;\n            if (targetSwat) {\n                message += ` and has Swat*.</li></ul>`;\n            } else { message += `.</li></ul>` }\n            if ((actorSwat && targetSwat) || (actorSwat || targetSwat)) {\n                if (coreRules === true) {\n                    message += `<p>*<b>@Compendium[swade-core-rules.swade-rules.q5sk5hEw6TED0FOU]{Swat}:</b> Ignore up to 4 points of penalties from Scale for the specified action(s).</p>`;\n                } else {\n                    message += `<p>*<b>Swat:</b> Ignore up to 4 points of penalties from Scale for the specified action(s).</p>`;\n                }\n                if (coreRules === true) {\n                    message += `</div>`;\n                }\n            }\n        } else {\n            message += `<p><b>There is no modifier.</b> They have the same Scale.</p>`;\n        }\n\n        // send message\n        let chatData = {\n            content: message\n        };\n        ChatMessage.create(chatData, {});\n    }\n\n    function calc(actorModifier, targetModifier) {\n        let diff;\n        if (actorModifier == targetModifier) {\n            return 0;\n        } else {\n            if (actorModifier < targetModifier) {\n                diff = Math.abs(actorModifier) + Math.abs(targetModifier);\n                return diff;\n            } else {\n                diff = Math.abs(actorModifier) + Math.abs(targetModifier);\n                return -diff;\n            }\n        }\n    }\n\n    function sizeToModifier(size) { //p179 swade core\n        if (size == -4) {\n            return -6;\n        } else if (size == -3) {\n            return -4;\n        } else if (size == -2) {\n            return -2;\n        } else if (size >= -1 && size <= 3) {\n            return 0;\n        } else if (size >= 4 && size <= 7) {\n            return 2;\n        } else if (size >= 8 && size <= 11) {\n            return 4;\n        } else if (size >= 12 && size <= 20) {\n            return 6;\n        }\n    }\n    // v. 1.0.0 - Original code by brunocalado, modified by SalieriC#8263.\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"core":{"sourceId":"Macro.mvLjJ3zzm6PzElPZ"}},"_id":"gVCX5tmLi3jpRrMB"}
{"name":"Healing","type":"script","author":"tckKxzbezKvre3KI","img":"icons/magic/life/cross-area-circle-green-white.webp","scope":"global","command":"/*\nHealing\n- Med kit heal faz roll\n- Natural heal faz roll\n- Fatigue\n\nicon: icons/magic/life/cross-area-circle-green-white.webp\n*/\n\nlet token;\nconst version = 'v1.2';\nconst chatimage = \"icons/magic/life/cross-area-circle-green-white.webp\";\nlet coreRules = false;\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\n\nif (canvas.tokens.controlled[0]===undefined) {\n  ui.notifications.error(\"Please, select a token.\"); // No Token is Selected\n} else {\n  token = canvas.tokens.controlled[0];\n  main();\n}\n\nfunction main() {\n  let dialogText = `\n    <div class=\"divTableCell\">\n      <p>Modifier (support, item, edge, etc): \n      <input id=\"modifier\" type=\"number\" min=\"-10\" max=\"10\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=\"0\"></p>       \n    </div>\n    `;\n  \n  dialogButtons = {\n    one: {\n      label: \"Natural Healing\",\n      callback: (html) => {\n        naturalHeal(html);\n      }\n    },\n    two: {\n      label: \"Healing Skill\",\n      callback: (html) => {\n        skillHeal(html);\n      }\n    }\n  }\n\n  // Main Dialogue    \n  new Dialog({\n    title: 'Healing',\n    content: dialogText,\n    buttons: dialogButtons,\n    default: \"one\",\n  }).render(true);\n\n}\n\n// MACRO FUNCTIONS\n\n/*\nWounded characters make a Vigor roll every five days. Success recovers one Wounds, and a raise recovers two.\nA Critical Failure increases the victim’s Wounds level by one—either from infection, blood loss, or aggravating the injuries. If this causes Incapacitation, don’t use the usual rules for taking damage. Instead, the victim lapses in and out of consciousness and makes a Vigor roll every 12 hours. If the roll is failed, he expires. Success means he must roll again 12 hours later. With a raise he stabilizes and wakes. Allies may also attempt to stabilize the hero as explained under Bleeding Out, above.\nSupport: Don’t forget to use Support when your party has been beaten up a bit. Characters with Healing, Survival, or other skills can make Support rolls to help allies make their Vigor rolls to heal!\n*/\nfunction naturalHeal(html) {\n  const modifier = parseInt( html.find(\"#modifier\")[0].value );    \n  \n  const edgeNames = ['fast healer'];  \n  // Roll Vigor and check for Fast Healer.\n  let rolled = sm.rollAttribute(token, 'vigor');\n\n  let r = sm.betterDice(rolled);\n  \n  const edges = token.actor.data.items.filter(function (item) {\n    return edgeNames.includes(item.name.toLowerCase()) && (item.type === \"edge\" || item.type === \"ability\");\n  });\n  let rollWithEdge = r;\n  let edgeText = \"\";\n  for (let edge of edges) {\n    rollWithEdge += 2;\n    edgeText += `<br/><i>+ ${edge.name}</i>`;\n  }\n  r = rollWithEdge+modifier;\n  \n  // Roll Vigor including +2 if Fast Healer is present and another +2 if this is a reroll.\n  let message;\n  if (coreRules) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> @Compendium[swade-core-rules.swade-rules.gCrNh35pUQHaVN4J]{Healing}</h2></div>`;\n  } else {\n    message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Healing</h2>`;\n  }\n\n  // Checking for a Critical Failure.  \n  if ( sm.isWildCard(token) && sm.isCritical(rolled) ) {\n    message += `${actorAlias} rolled a <b style=\"color: red; font-size:150%\">Critical Failure!</b> and takes another Wound!`;    \n    sm.applyWounds(token, 1);\n    ChatMessage.create({ content: message });\n  } else {\n    message += `<p><b style=\"color:red\">${token.name}</b> rolled <b style=\"color:blue\">${r}</b>`;    \n    if (r < 4) {\n      message += ` and is <b style=\"color:red\">unable to heal</b> any Wounds.</p>`;\n    } else if ( r>=4 && r<8 ) {\n      message += ` and heals <b style=\"color:darkgreen\">1</b> of his ${sm.getWounds(token)} Wounds.</p>`;      \n      sm.applyWounds(token, -1);\n    } else if ( r>8 ) {\n      message += ` and heals <b style=\"color:darkgreen\">2</b> of his ${sm.getWounds(token)} Wounds.</p>`;      \n      sm.applyWounds(token, -2);\n    }\n        \n    message += ` ${edgeText}`;\n  }\n\n  message += `<ul><li>This roll can be done every five day</li></ul>`;\n\n  ChatMessage.create({ content: message });\n  rolled.toMessage();\n}\n\n/*\nHealing skill: Each attempt requires 10 minutes per wound level of the patient. Subtract 1 from Healing rolls without a basic First Aid kit or similar supplies.\nA success removes one Wound, and a raise removes two. Failure means no Wounds are removed. A Critical Failure increases the victim’s Wound level by one.\n*/\nfunction skillHeal(html) {\n  const modifier = parseInt( html.find(\"#modifier\")[0].value );    \n\n  // Roll Vigor and check for Fast Healer.  \n  let rolled = sm.rollSkill(token, 'healing');  \n  let r = sm.betterDice(rolled) + modifier;\n\n  let message;\n  if (coreRules) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> @Compendium[swade-core-rules.swade-rules.gCrNh35pUQHaVN4J]{Healing}</h2></div>`;\n  } else {\n    message = `<div><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Healing</h2></div>`;\n  }\n\n  // Checking for a Critical Failure.\n  if ( sm.isWildCard(token) && sm.isCritical(rolled) ) {\n    message += `${actorAlias} rolled a <b style=\"color: red; font-size:150%\">Critical Failure!</b> and takes another Wound!`;    \n    sm.applyWounds(token, 1);\n  } else {\n    let skill = 'Healing'.toLowerCase();\n    let actorSkill = token.actor.data.items.find(i => (i.name.toLowerCase() === skill) );\n    let skillName; \n    if (!actorSkill) {skillName = 'Untrained';} else {skillName = actorSkill.name;}\n    message += `<p><b style=\"color:red\">${token.name}</b> rolled <b style=\"color:blue\">${r}</b> with <b style=\"color:darkgreen\">${skillName}</b>`;\n    if (r < 4) {\n      message += ` and is <b style=\"color:red\">unable to heal</b> any Wounds.</p>`;\n    } else if ( r>=4 && r<8 ) {\n      message += ` and heals <b style=\"color:darkgreen\">1</b> of his ${sm.getWounds(token)} Wounds.</p>`;      \n      sm.applyWounds(token, -1);\n    } else if ( r>8 ) {\n      message += ` and heals <b style=\"color:darkgreen\">2</b> of his ${sm.getWounds(token)} Wounds.</p>`;      \n      sm.applyWounds(token, -2);\n    }\n  }\n  \n  message += `<ul>\n  <li><b>Subtract 1</b> from Healing rolls without a basic First Aid kit or similar supplies.</li>\n  <li>This attempt required <b>${sm.getWounds(token)*10}</b> minutes</li></ul>`;\n  \n  ChatMessage.create({ content: message });\n  rolled.toMessage();\n}","folder":null,"sort":0,"permission":{"default":0,"wpWSO3unowg8siJN":3,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.SjOf7Sp0D4ljIWfQ"}},"_id":"jCAnDWpx2pTnehAK"}
{"name":"LP Check","type":"script","author":"tckKxzbezKvre3KI","img":"icons/commodities/treasure/puzzle-box-glowing-blue.webp","scope":"global","command":"const version = 'v1.2';\nconst chatimage = \"icons/commodities/treasure/puzzle-box-glowing-blue.webp\";\nconst rule = '@Compendium[sprawl-core-rules.sprawl-rules.jhEs3al7qA4sAwaa]{Logistics Points}';\nlet coreRules = false;\nif (game.modules.get(\"sprawl-core-rules\")?.active) { coreRules = true; }\n\n/* LP Check\n\nTODO \n- async\n\nsource: https://gitlab.com/sigil-vtt-projects/sprawlrunners/sprawlrunners/-/issues/10\nicon: icons/commodities/treasure/puzzle-box-glowing-blue.webp\n*/\n\nlet grandTotal = 0;\nlet grandTotalMax = 0;\nlet message;\n\nif (coreRules) {\n  message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${rule}</h2></div><ul>`;\n} else {\n  message = `<div><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Logistics Points</h2><div><ul>`;\n}\n\nlet characters = game.actors.contents.filter(e => e.data.type === 'character' && e.hasPlayerOwner);\n\nif (characters==undefined) {\n  ui.notifications.warn(\"Each player should own a character!\");    \n} else {\n  for(const character of characters) {\n    if (character.data.data.additionalStats.LP==undefined) {\n      ui.notifications.error(\"You need to check Enabled for LP in player Tweaks!\");\n      return;\n    }   \n    \n    let maxLP = character.data.data.additionalStats.LP.max;\n\n    let total = character.items.map(i => i.data.data).filter(p => (p.price > 0) && (p.equipped) ).reduce((total, curr) => total + curr.price, 0);\n    /*let total = character.items\n        .map(i => i.data.data.price)\n        .filter(p => p > 0)\n        .reduce((total, curr) => total + curr, 0);*/\n\n    message += `<li> ${character.name}: <b style=\"color:darkblue\">${total}</b> of <b style=\"color:red\">${maxLP}</b> </li>`;\n\n    character.update({\"data.additionalStats.LP.value\": total});\n\n    grandTotal += total;\n    grandTotalMax += maxLP;\n  }\n\n  message += `</ul><p>Total: <b style=\"color:darkblue\">${grandTotal}</b> of <b style=\"color:red\">${grandTotalMax}</b> </p>`;\n\n  // to chat\n  let chatData = {\n    user: game.user.id,\n    speaker: ChatMessage.getSpeaker(),\n    content: message\n  };\n\n  ChatMessage.create(chatData, {});\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.uuzhONr0XNLfHqPr"}},"_id":"k3fmRxMtY20saRrZ"}
{"name":"Unshaken","type":"script","author":"tckKxzbezKvre3KI","img":"icons/magic/control/fear-fright-white.webp","scope":"global","command":"const version = 'v1.0';\nconst chatimage = \"icons/magic/control/fear-fright-white.webp\";\n\n/* Unshaken\n\nsource: \nicon: icons/magic/control/fear-fright-white.webp\n*/\n\nlet bennies;\nlet token;\nlet bv;\nif (canvas.tokens.controlled[0]===undefined) {\n  ui.notifications.error(\"Please select a token.\"); // No Token is Selected\n} else {\n  token = canvas.tokens.controlled[0];\n  main();\n}\n\nasync function main() {\n  if (token.actor.data.data.status.isShaken === true) {\n    rollUnshake()\n  } else if (token) {\n    token.actor.update({ \"data.status.isShaken\": true });\n    ChatMessage.create({\n      user: game.user.id,\n      content: `<p><b style=\"color:red\">${game.user.name}</b> is Shaken now!</p>`,\n    });        \n  }\n}\n\nasync function rollUnshake() {\n  const edgeNames = ['combat reflexes', 'demon', 'undead', 'construct', 'undead (harrowed)'];\n  const actorAlias = speaker.alias;\n  // ROLL SPIRIT AND CHECK COMBAT REFLEXES\n  let spirit = '{1d' + token.actor.data.data.attributes.spirit.die.sides + 'x+' + token.actor.data.data.attributes.spirit.die.modifier+',1d6x}';  \n  let spiritDice = new Roll(spirit).roll({ async : false });  \n  let traitdie = spiritDice.terms[0].results[0].result;\n  let wilddie = spiritDice.terms[0].results[1].result;  \n  let spiritRolled=Math.max(traitdie, wilddie);\n  \n  const edges = token.actor.data.items.filter(function (item) {\n    return edgeNames.includes(item.name.toLowerCase()) && (item.type === \"edge\" || item.type === \"ability\");\n  });\n  \n  let rollWithEdge = spiritRolled;\n  let edgeText = \"\";\n  for (let edge of edges) {\n    rollWithEdge += 2;\n    edgeText += `<br/><i>+ ${edge.name}</i>`;\n  }\n  \n  let chatData = `<div><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\">Shaken</h2>`;    \n  chatData += `${actorAlias} rolled <b style=\"color:blue\"> ${rollWithEdge} </b>`;\n  \n  // Checking for a Critical Failure.\n  if ( spiritDice.terms[0].results[0].result==1 && spiritDice.terms[0].results[1].result==1 ) {\n    ui.notifications.notify(\"You've rolled a Critical Failure!\");\n    chatData += `${actorAlias} rolled a <span style=\"font-size:150% color:red\"> Critical Failure! </span>`;\n  } else {\n    if (rollWithEdge <= 3) {\n        chatData += ` and remains Shaken.`;\n        useBenny();\n    } else if (rollWithEdge >= 4) {\n        chatData += `, is no longer Shaken and may act normally.`;\n        token.actor.update({ \"data.status.isShaken\": false });\n    }\n    chatData += ` ${edgeText}`;\n  }\n  ChatMessage.create({ content: chatData+`</div>` });\n  spiritDice.toMessage();\n}\n\nfunction useBenny() {\n  bv = checkBennies();\n  if (bv > 0) {\n    new Dialog({\n      title: 'Spend a Benny?',\n      content: `Do you want to spend a Benny to act immediately? (You have ${bv} Bennies left.)`,\n      buttons: {\n          one: {\n            label: \"Yes.\",\n            callback: (html) => {\n              spendBenny();\n              token.actor.update({ \"data.status.isShaken\": false });\n            }\n          },\n          two: {\n            label: \"No.\",\n            callback: (html) => { return; },\n          }\n        },\n        default: \"one\"\n      }).render(true)\n  }\n  else {\n      return;\n  }\n}\n\n// Check for Bennies\nfunction checkBennies() {\n  bennies = token.actor.data.data.bennies.value;\n\n  // Non GM token has <1 bennie OR GM user AND selected token has <1 benny\n  if ((!game.user.isGM && bennies < 1) || (game.user.isGM && bennies < 1 && game.user.getFlag(\"swade\", \"bennies\") < 1)) {\n    ui.notifications.error(\"You have no more bennies left.\");\n  }\n  if (game.user.isGM) {\n    bv = bennies + game.user.getFlag(\"swade\", \"bennies\");\n  }\n  else {\n    bv = bennies;\n  }\n  return bv;\n}\n\n// Spend Benny function\nasync function spendBenny() {\n  bennies = token.actor.data.data.bennies.value;\n  //Subtract the spend, use GM benny if user is GM and token has no more bennies left or spend token benny if user is player and/or token has bennies left.\n  if (game.user.isGM && bennies < 1) {\n    game.user.setFlag(\"swade\", \"bennies\", game.user.getFlag(\"swade\", \"bennies\") - 1)\n  } else {\n    token.actor.update({\n      \"data.bennies.value\": bennies - 1,\n    })\n  }\n\n  //Show the Benny Flip\n  if (game.dice3d) {\n    game.dice3d.showForRoll(new Roll(\"1dB\").roll({ async : false }), game.user, true, null, false);\n  }\n\n  //Chat Message to let the everyone know a benny was spent\n  ChatMessage.create({\n    user: game.user.id,\n    content: `<p><b style=\"color:red\">${game.user.name}</b> spent a Benny and <b style=\"color:red\">${token.name}</b> may act normally now.</p>`,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"wpWSO3unowg8siJN":3,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.xwvNVeOMp5PjtWaK"}},"_id":"rCgcXWAXLiqpvZlp"}
{"name":"Player Macro Manager","type":"script","author":"tckKxzbezKvre3KI","img":"icons/sundries/documents/document-writing-pink.webp","scope":"global","command":"const version = '0.2';\n\n/*\n  GM Menu\n  \n  icons: icons/sundries/documents/document-writing-pink.webp\n  \n  Fill the constant macros with the names of your macros, when you click the button it will run the macro.\n\n  Dialog Window will not close until the X button is pressed.\n*/\nconst managerType = 'Player - Macro Manager';\n\n(()=>{\n  const macros = [\n    \"3D Measure\",\n    \"Unshaken\",\n    \"Next Turn\",\n    \"Gang Up\",\n    \"Grappling\",\n    \"Healing\",\n    \"Push\",\n    \"Raise Calculator\",\n    \"Size/Scale Calculator\",\n    \"Survival Guide\"\n  ];\n\n  let buttons = {}, dialog, content = `<div sytle=\"width:100%;text-align:center;><h2>Choose Macro</h2></div>`;\n  \n  macros.forEach((str)=> {\n    let macro = game.macros.getName(str);\n    if(!macro) return;\n\n    buttons[str] = {\n      label : `\n        <div style=\"display:flex;flex-direction:row;justify-content:center;align-items:center;width\">\n          <div style=\"display:flex;justify-content:left;flex-grow:1;\"><img src=\"${macro.data.img}\" width=\"25\" height=\"25\" style=\"background-color:#5c5c5c;\"/></div>\n          <div style=\"display:flex;justify-content:left;flex-grow:4\"><label>${str}</label></div>\n        </div>`,\n      callback : () => {\n        game.macros.getName(str).execute();\n        dialog.render(true);\n      }\n    }\n  });\n  dialog = new Dialog({title : `${managerType}`,content, buttons}).render(true);\n})();","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.QfOsBn5tQHs5OSun"}},"_id":"tLwXqmf3jbg0h99E"}
{"name":"Raise Calculator","type":"script","author":"tckKxzbezKvre3KI","img":"icons/skills/movement/arrow-upward-yellow.webp","scope":"global","command":"const iconSize = 45;\nconst icon = 'icons/skills/movement/arrow-upward-yellow.webp';\nconst failureIcon = 'icons/magic/death/bones-crossed-orange.webp';\nconst successIcon = 'icons/skills/social/trading-justice-scale-yellow.webp';\nconst raisesIcon = 'icons/skills/social/peace-luck-insult.webp';\nconst text = `<div>\n  <img style=\"vertical-align:middle\" src=\"${icon}\" alt=\"\" width=\"${iconSize}\" height=\"${iconSize}\" /> \n  <span>Raises will show here once you leave the Result field.</span>\n</div>`;  \n\n\nnew Dialog({\n  title: 'Raise Calculator',\n  content: `\n    <style type=\"text/css\">\n    .tg  {border-collapse:collapse;border-spacing:0;height:200px;}\n    .tg td{border-color:black;border-style:solid;border-width:0px; width:60px;\n      overflow:hidden;padding:10px 5px;word-break:normal;}\n    .tg th{border-color:black;border-style:solid;border-width:0px;\n      font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n    .tg .tg-xwyw{border-color:#000000;text-align:center;vertical-align:middle}\n    </style>\n\n    <form>\n\n    <table class=\"tg\">\n    <tbody>\n      <tr>\n        <td class=\"tg-xwyw\">\n          <b style=\"font-size:20px\">Target Number</b>\n        </td>\n        <td class=\"tg-xwyw\">\n          <b style=\"font-size:20px\">Result</b>\n        </td>\n      </tr>\n      <tr>\n        <td class=\"tg-xwyw\">\n          <div class=\"form-group\">\n            <input name=\"target\" type=\"number\" min=\"0\" max=\"200\" value=4 autofocus onClick=\"this.select();\" style=\"width: 50px;\"/>\n          </div>                  \n        </td>\n        <td class=\"tg-xwyw\">\n          <div class=\"form-group\"> \n            <input name=\"result\" type=\"number\" min=\"0\" max=\"200\" onClick=\"this.select();\" style=\"width: 50px;\"/>\n          </div>        \n        </td>\n      </tr>\n      <tr>\n        <td colspan=\"2\">\n          <div class=\"calculation\">${text}</div>\n        </td>\n      </tr>\n    </tbody>\n    </table>\n\n    </form>`,\n  buttons: {},\n  render: ([dialogContent]) => {\n    \n    dialogContent.querySelector(`input[name=\"target\"`).focus();\n    dialogContent.querySelector(`input[name=\"result\"`).addEventListener(\"input\", (event) => {\n        const textInput = event.target;\n        const form = textInput.closest(\"form\")\n        const calcResult = form.querySelector(\".calculation\");\n        const target = form.querySelector('input[name=\"target\"]').value;\n        const result = form.querySelector('input[name=\"result\"]').value;\n        let raises = Math.floor((parseInt(result) - parseInt(target)) / 4);\n        let tmpIcon;\n        \n        if (parseInt(target) > parseInt(result)) {\n          tmpIcon = failureIcon;\n          calcResult.innerHTML = `<div>\n          <img style=\"vertical-align:middle\" src=\"${tmpIcon}\" alt=\"\" width=\"${iconSize}\" height=\"${iconSize}\" /> \n          <span style=\"font-size:20px\"><b>Failure</b></span>\n          </div>`;\n        }\n        else if (parseInt(target) <= parseInt(result) && raises < 1) {\n          tmpIcon = successIcon;\n          calcResult.innerHTML = `<div>\n          <img style=\"vertical-align:middle\" src=\"${tmpIcon}\" alt=\"\" width=\"${iconSize}\" height=\"${iconSize}\" /> \n          <span style=\"font-size:20px\"><b>Success</b></span>\n          </div>`;          \n        }\n        else {\n          tmpIcon = raisesIcon;\n          calcResult.innerHTML = `<div>\n          <img style=\"vertical-align:middle\" src=\"${tmpIcon}\" alt=\"\" width=\"${iconSize}\" height=\"${iconSize}\" /> \n          <span style=\"font-size:20px\"><b>${raises} Raise(s)</b></span>\n          </div>`;      \n        }\n        \n      });\n      \n  },\n}).render(true);","folder":null,"sort":0,"permission":{"default":0,"wpWSO3unowg8siJN":3,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.onkkfY2zBddVpiLr"}},"_id":"tzZ5KhHADw3Uz7Zh"}
{"name":"Push","type":"script","author":"tckKxzbezKvre3KI","img":"icons/creatures/mammals/bull-horned-blue.webp","scope":"global","command":"const version = 'v1.1';\nconst chatimage = \"icons/creatures/mammals/bull-horned-blue.webp\";\nlet coreRules = false;\nconst coreRulesLink = '@Compendium[swade-core-rules.swade-rules.GsNwqTjOQLVbQras]{Push}';\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\n\n/* Push p104 SWADE core\nIMPORTANT\n- \n\nTODO\n- \nsource: \nicon: icons/creatures/mammals/bull-horned-blue.webp\n*/\n\n// Requires at least 1 target\nlet attacker;\nlet target;    \nif (canvas.tokens.controlled[0]===undefined || Array.from(game.user.targets)[0]===undefined){\n  ui.notifications.warn(\"You must select a token and target another one!\");    \n} else {\n  attacker=canvas.tokens.controlled[0];\n  target=Array.from(game.user.targets)[0];    \n  main();\n}\n\nfunction main() {  \n  let template = `  \n    <style type=\"text/css\">\n      div.purpleHorizon {\n        border: 4px solid #ff0000;\n        background-color: #000000;\n        width: 100%;\n        text-align: center;\n        border-collapse: collapse;\n      }\n      .divTable.purpleHorizon .divTableCell, .divTable.purpleHorizon .divTableHead {\n        border: 0px solid #550000;\n        padding: 5px 2px;\n      }\n      .divTable.purpleHorizon .divTableBody .divTableCell {\n        font-size: 13px;\n        font-weight: bold;\n        color: #FFFFFF;\n      }\n      \n      .divTable{ display: table; }\n      .divTableRow { display: table-row; }\n      .divTableHeading { display: table-header-group;}\n      .divTableCell, .divTableHead { display: table-cell;}\n      .divTableHeading { display: table-header-group;}\n      .divTableFoot { display: table-footer-group;}\n      .divTableBody { display: table-row-group;}\n\n      /* HIDE RADIO */\n      [type=radio] { \n      position: absolute;\n      opacity: 0;\n      width: 0;\n      height: 0;\n      }\n\n      /* IMAGE STYLES */\n      [type=radio] + img {\n      cursor: pointer;\n      }\n\n      /* CHECKED STYLES */\n      [type=radio]:checked + img {\n      outline: 4px solid #f00;\n      }\n      \n      .container {\n        position: relative;\n        text-align: center;\n        color: white;\n      }\n      /* Centered text */\n      .centered {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        font-size: 18px;\n      }    \n\n      #kultcss .window-content {    \n        background: #000000;\n      }     \n      #kultcss .dialog-button {\n        height: 40px;\n        background: #000000;\n        color: #ffffff;\n        justify-content: space-evenly;\n        align-items: center;\n        cursor: pointer;\n        border: none;    \n      }  \n      #kultcss header {\n        background: #000000;\n        border-radius: 0;    \n        border: none;    \n        margin-bottom: 2px;\n        font-size: .75rem;\n      }\n    </style>    \n    \n    <h2 style=\"text-align:center; color:white\">${attacker.name} will try to Push ${target.name}</h2>\n    <div class=\"divTable purpleHorizon\">\n    <div class=\"divTableBody\">\n    \n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <p>Running?</p>\n        <input id=\"running\" type=\"checkbox\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" >       \n    </div>    \n    <div class=\"divTableCell\">\n        <p>Attacker Skill</p>\n        <select id=\"skillAttacker\" type=\"text\" style=\"width: 100px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\">\n        <option value=\"Strength\">Strength</option>\n        <option value=\"Athletics\" selected=\"selected\">Athletics</option>\n        </select>      \n    </div>\n    <div class=\"divTableCell\">\n        <p>Defender Skill</p>\n        <select id=\"skillTarget\" type=\"text\" style=\"width: 100px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\">\n        <option value=\"Strength\">Strength</option>\n        <option value=\"Athletics\" selected=\"selected\">Athletics</option>\n        </select>      \n    </div>    \n    <div class=\"divTableCell\">      \n      <p>Shields</p>\n      <input id=\"shields\" type=\"number\" min=\"0\" max=\"10\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=0>       \n    </div>   \n    </div>\n    \n    </div>\n    </div>\n\n   \n    </div>\n    </div>\n    \n  `;\n  \n  new Dialog({\n    title: `Push - ${version}`,\n    content: template,\n    buttons: {\n      ok: {\n        label: \"Battle!\",\n        callback: async (html) => {\n          pushTheTarget(html);\n        },\n      },\n      cancel: {\n        label: \"Cancel\",\n      }\n    },\n    default: \"ok\"\n  }, { id: 'kultcss'}).render(true);\n}\n\nfunction pushTheTarget(html) {\n  const skillAttacker = html.find(\"#skillAttacker\")[0].value;    \n  const skillTarget = html.find(\"#skillTarget\")[0].value;    \n  const shields = parseInt( html.find(\"#shields\")[0].value );    \n  const running = html.find(\"#running\")[0].checked;\n  \n  let sizebonus = howBigAmI(attacker, target);\n  let attackerRolled;\n  let targetRolled;\n  let targetProneRolled;\n  let rolls3D=[];\n  \n  let message;\n  if (coreRules) {\n      message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${coreRulesLink}</h2>`;\n  } else {\n     message = `<div><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Push</h2>`;\n  }    \n\n  if (skillAttacker=='Athletics') {\n    attackerRolled = rollSkill(attacker, skillAttacker);    \n  } else {\n    attackerRolled = rollAttribute(attacker, skillAttacker);    \n  }\n  rolls3D.push(attackerRolled);\n  if (skillTarget=='Athletics') {\n    targetRolled = rollSkill(target, skillTarget);  \n  } else {\n    targetRolled = rollAttribute(target, skillTarget);    \n  }\n  \n  rolls3D.push(targetRolled);\n  \n  let attackerResult;\n  let attackerCriticalFailure=false;  \n  if (isWildCard(attacker)) {\n    let attackerTrait = attackerRolled.terms[0].rolls[0].total;\n    let attackerWild = attackerRolled.terms[0].rolls[1].total;  \n    attackerResult = Math.max( attackerTrait, attackerWild );\n    if ( attackerTrait==1 && attackerWild==1 ) {attackerCriticalFailure=true;}\n  } else {\n    attackerResult = attackerRolled.total;\n  }\n  let targetResult;\n  let targetCriticalFailure=false;    \n  if (isWildCard(target)) {\n    let targetTrait = targetRolled.terms[0].rolls[0].total;\n    let targetWild = targetRolled.terms[0].rolls[1].total;       \n    targetResult = Math.max( targetTrait, targetWild );\n    if ( targetTrait==1 && targetWild==1 ) {targetCriticalFailure=true;}\n  } else {\n    targetResult = targetRolled.total;\n  }  \n  \n  //other bonuses\n  attackerResult+=shields;\n  if (running) {attackerResult+=2;}\n  \n  message += `<p><b style=\"color:red\">${attacker.name} (${attackerResult})</b> is trying to push <b style=\"color:darkblue\">${target.name} (${targetResult})</b>.</p>`;  \n\n  //prone\n  targetProneRolled = rollSkill(target, 'Athletics');  \n  rolls3D.push(targetProneRolled);  \n  let targetProneResult; //----------------prone\n  let targetProneCriticalFailure=false;    \n  if (isWildCard(target)) {\n    let targetTrait = targetProneRolled.terms[0].rolls[0].total;\n    let targetWild = targetProneRolled.terms[0].rolls[1].total;       \n    targetProneResult = Math.max( targetTrait, targetWild );\n    if ( targetTrait==1 && targetWild==1 ) {targetProneCriticalFailure=true;}\n  } else {\n    targetProneResult = targetProneRolled.total;\n  }  \n  //outcome  \n  let distance;\n  let proneBonusMessage=``;\n  if ( (attackerResult>=4) && (attackerResult>targetResult) && sizebonus!=-1 ) { // success\n    if ( (attackerResult+4)>=targetResult ) {\n      if (sizebonus==0) {\n        distance=2;        \n      } else if (sizebonus>0) {\n        distance=4;\n      } \n      message += `<p>The ${target.name} is pushed ${distance} square(s).</p>`;\n      targetProneResult+=-2;\n      proneBonusMessage=`(-2 attacker raise)`;\n    } else {\n      if (sizebonus==0) {\n        distance=1;        \n      } else if (sizebonus>0) {\n        distance=2;\n      } \n      message += `<p>The ${target.name} is pushed ${distance} square(s).</p>`;\n    }\n    \n    if( targetProneResult<4 ) {      \n      if (coreRules) {\n        message += `<p>The ${target.name} rolled ${targetProneResult} ${proneBonusMessage} and is knocked @Compendium[swade-core-rules.swade-rules.JhBfyamFYWMA4T93]{Prone}.</p>`;        \n      } else {        \n        message += `<p>The ${target.name} rolled ${targetProneResult} ${proneBonusMessage} and is knocked prone.</p>`;\n      }               \n    } else {\n      message += `<p>The ${target.name} rolled ${targetProneResult} ${proneBonusMessage} and was not knocked prone.</p>`;\n    } \n    \n  } else {\n    if (sizebonus==-1) {\n      message += `<p>${attacker.name} is too small to push ${target.name}.</p>`;\n    } else {\n      message += `<p>${attacker.name} failed.</p>`;      \n    }\n  }  \n  \n  message+=`</div>`;\n  \n  // send message\n  let chatData = {\n    content: message\n  };  \n  ChatMessage.create(chatData, {});  \n  if (sizebonus!=-1) {\n    let criticalFailureMessage = `<p><b style=\"color:red\">CRITICAL FAILURE</b></p>`;   \n    if (!attackerCriticalFailure) {criticalFailureMessage =``;}   \n    rolls3D[0].toMessage({flavor: `<h3 style=\"color:red\">${attacker.name}</h3>${criticalFailureMessage}`});\n    \n    criticalFailureMessage = `<p><b style=\"color:red\">CRITICAL FAILURE</b></p>`;   \n    if (!targetCriticalFailure) {criticalFailureMessage =``;}  \n    rolls3D[1].toMessage({flavor: `<h3 style=\"color:red\">${target.name}</h3>${criticalFailureMessage}`});  \n    //prone\n    if ( (attackerResult>=targetResult) ) { // success\n      criticalFailureMessage = `<p><b style=\"color:red\">CRITICAL FAILURE</b></p>`;   \n      if (!targetProneCriticalFailure) {criticalFailureMessage =``;}  \n      rolls3D[2].toMessage({flavor: `<h3 style=\"color:red\">${target.name}</h3>${criticalFailureMessage}`});      \n    }\n  }\n}\n\n// ======================\nfunction howBigAmI(attacker, target) {\n  let actorSize = attacker.actor.data.data.stats.size;\n  let targetSize = target.actor.data.data.stats.size;\n  if (actorSize == targetSize) {\n    return 0;\n  } else { \n    if ( targetSize>(actorSize+2) ) {      \n      return -1;\n    } else if (actorSize>targetSize) {\n      return 2;\n    } else if (targetSize>actorSize) {\n      return 0;\n    }\n  }\n}\n\n// COMMONS v0.2\nfunction rollSkill(myActor, skill) { \n  let actorSkill = myActor.actor.data.items.find(i => (i.name.toLowerCase().includes(skill.toLowerCase()) ) );\n  let diceExpression;\n  if (actorSkill) { // healing\n    let actorSkillMod = actorSkill.data.data.die.modifier;\n    if(!actorSkillMod) { actorSkillMod = 0; }\n    if (isWildCard(myActor)) {\n      diceExpression = '{1d'+actorSkill.data.data.die.sides + 'x+' + actorSkillMod + ',1d6x}';\n    } else {\n      diceExpression = '1d'+actorSkill.data.data.die.sides + 'x+' + actorSkillMod;\n    }    \n  } else { // untrained\n    if (isWildCard(myActor)) {\n      diceExpression = '{1d4x-2,1d6x}';\n    } else {\n      diceExpression = '1d4x-2';\n    }\n  }\n  return new Roll(diceExpression).roll({ async : false });  \n}\n\nfunction rollAttribute(myActor, attribute) {\n  let diceExpression;\n  attribute=attribute.toLowerCase();\n  if (attribute=='agility') {\n    diceExpression = '{1d' + myActor.actor.data.data.attributes.agility.die.sides + 'x+' + myActor.actor.data.data.attributes.agility.die.modifier+',1d6x}';      \n  } else if (attribute=='smarts') {\n    diceExpression = '{1d' + myActor.actor.data.data.attributes.smarts.die.sides + 'x+' + myActor.actor.data.data.attributes.smarts.die.modifier+',1d6x}';      \n  } else if (attribute=='spirit') {\n    diceExpression = '{1d' + myActor.actor.data.data.attributes.spirit.die.sides + 'x+' + myActor.actor.data.data.attributes.spirit.die.modifier+',1d6x}';      \n  } else if (attribute=='strength') {\n    diceExpression = '{1d' + myActor.actor.data.data.attributes.strength.die.sides + 'x+' + myActor.actor.data.data.attributes.strength.die.modifier+',1d6x}';      \n  } else if (attribute=='vigor') {\n    diceExpression = '{1d' + myActor.actor.data.data.attributes.vigor.die.sides + 'x+' + myActor.actor.data.data.attributes.vigor.die.modifier+',1d6x}';      \n  }\n  return new Roll(diceExpression).roll({ async : false });  \n}\n\n\nfunction isWildCard(token) {  \n  return token.actor.data.data.wildcard;\n}\n\nfunction isCritical(rolled) {\n  let trait = rolled.terms[0].rolls[0].terms[0].results[0].result;  \n  let wild = rolled.terms[0].rolls[1].terms[0].results[0].result;  \n  return (trait==1 && wild==1);\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.33gzvkMRfqQIJE8Q"}},"_id":"zJQhEJRv4JIgNWPF"}
