{"name":"Next Turn","type":"script","author":"tckKxzbezKvre3KI","img":"icons/magic/time/arrows-circling-pink.webp","scope":"global","command":"/*\nSkip the current turn.\n*/\n\ngame.combat.nextTurn()","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"core":{"sourceId":"Macro.NRdx6XFmIKNd8ENh"}},"_id":"3WqQ6opMa3kZE5xP"}
{"name":"Grappling","type":"script","author":"tckKxzbezKvre3KI","img":"icons/commodities/biological/tentacle-purple-white.webp","scope":"global","command":"const version = 'v1.0';\nconst chatimage = \"icons/commodities/biological/tentacle-purple-white.webp\";\nlet coreRules = false;\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\n\n/* Grappling p101 SWADE core\nIMPORTANT\n- \n\nTODO\n- \nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Savage%20Worlds/Grappling.js\nicon: icons/commodities/biological/tentacle-purple-white.webp\n*/\n\n// Requires at least 1 target\nif (canvas.tokens.controlled[0]===undefined || Array.from(game.user.targets)[0]===undefined){\n  ui.notifications.warn(\"You must select a token and target another one!\");    \n} else {\n  let attacker=canvas.tokens.controlled[0];\n  let target=Array.from(game.user.targets)[0];    \n  messageToTheChat(attacker, target);\n}\n\nfunction messageToTheChat(attacker, target) {\n  let gangupbonus = gangUp(attacker, target);\n  let sizebonus = calc(attacker, target);\n  let attackerRolled;\n  let targetRolled;\n  let rolls3D=[];\n  \n  let message;\n  if (coreRules) {\n      message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> @Compendium[swade-core-rules.swade-rules.od3tHNJTS8Ma4n2o]{Grappling}</h2>`;\n  } else {\n     message = `<div><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Grappling</h2>`;\n  }    \n  \n  let attackerAthletics = attacker.actor.data.items.find(i => (i.name === 'Athletics' || i.name === '★ Athletics') );\n  let attackerAthleticsMod = attackerAthletics.data.data.die.modifier;\n  if(!attackerAthleticsMod) { attackerAthleticsMod = 0; }\n  let attackerDiceRoll = '1d'+attackerAthletics.data.data.die.sides + 'x+' + attackerAthleticsMod + '+' + gangupbonus + '-' + Math.abs(sizebonus);\n  attackerRolled = new Roll(attackerDiceRoll).roll({ async : false });  \n  rolls3D.push(attackerRolled);\n\n  let targetAthletics = target.actor.data.document.data.items.find(i => (i.name === 'Athletics' || i.name === '★ Athletics') );\n  let targetAthleticsMod = targetAthletics.data.data.die.modifier;\n  if(!targetAthleticsMod) { targetAthleticsMod = 0; }\n  let targetDiceRoll = '1d'+targetAthletics.data.data.die.sides + 'x+' + targetAthleticsMod;;\n  targetRolled = new Roll(targetDiceRoll).roll({ async : false });  \n  rolls3D.push(targetRolled);\n  \n  message += `<p>${attacker.name} is trying to grab ${target.name}.</p>`;\n  if (coreRules) {\n    message += `<ul><li>The @Compendium[swade-core-rules.swade-rules.hdXOHCe38O8KGyUz]{Ganging Up} bonus is: ${gangupbonus}</li>`;\n  } else {\n    message += `<ul><li>The Gang Up bonus is: ${gangupbonus}</li>`;  \n  }   \n  if (coreRules) {\n    message += `<li>The @Compendium[swade-core-rules.swade-rules.mbP0fwcquD98QtwX]{Size & Scale} penalty is: ${sizebonus}</li></ul>`;\n  } else {\n    message += `<li>The Size/Scale penalty is: ${sizebonus}</li></ul>`;    \n  }  \n\n  //outcome\n  if ( attackerRolled.total>=targetRolled.total ) {\n    if ( (attackerRolled.total+4)>=targetRolled.total ) {\n      if (coreRules) {\n        message += `<p>The ${target.name} is @Compendium[swade-core-rules.swade-rules.sTArFBzbesQkjLVg]{Bound and Entangled}.</p>`;\n      } else {\n        message += `<p>The ${target.name} is Entangled and Bound.</p>`;        \n      }        \n    } else {\n      if (coreRules) {\n        message += `<p>The ${target.name} is @Compendium[swade-core-rules.swade-rules.sTArFBzbesQkjLVg]{Entangled}.</p>`;\n      } else {\n        message += `<p>The ${target.name} is Entangled.</p>`;        \n      }         \n    }\n  } else {\n    message += `<p>${attacker.name} failed.</p>`;\n  }  \n  \n  message+=`</div>`;\n  \n  // send message\n  let chatData = {\n    content: message\n  };  \n  ChatMessage.create(chatData, {});  \n     \n  rolls3D[0].toMessage({flavor: `<h3 style=\"color:red\">${attacker.name}</h3>`});\n  rolls3D[1].toMessage({flavor: `<h3 style=\"color:red\">${target.name}</h3>`});  \n  \n}\n\n// pg 101 swade core\n// - Each additional adjacent foe (who isn’t Stunned)\n// - adds +1 to all the attackers’ Fighting rolls, up to a maximum of +4.\n// - Each ally adjacent to the defender cancels out one point of Gang Up bonus from an attacker adjacent to both.\nfunction gangUp(attacker, target) {\n  const debug_flag=true;\n\n  let itemRange=1; // dist 1''\n  let enemies;\n  let allies;\n  let modifier=0;\n  \n  let withinRangeOfToken;\n  let alliedWithinRangeOfToken;\n  let alliedWithinRangeOfTargetAndAttacker;\n  \n  if (attacker.data.disposition===-1) { // NPC (hostile) is attacking PCs (friendly)\n    withinRangeOfToken = canvas.tokens.placeables.filter(t => \n      t.id !== attacker.id \n      && t.data.disposition === -1 \n      && t.actor.data.data.status.isStunned === false \n      && t.visible \n      && withinRange(target, t, itemRange)\n    );    \n    alliedWithinRangeOfToken = canvas.tokens.placeables.filter(t => \n      t.id !== target.id \n      && t.data.disposition === 1 \n      && t.actor.data.data.status.isStunned === false \n      && withinRange(target, t, itemRange)\n    );    \n    //alliedWithinRangeOfTargetAndAttacker intersection with attacker and target\n    alliedWithinRangeOfTargetAndAttacker = alliedWithinRangeOfToken.filter(t => \n      t.data.disposition === 1 \n      && t.actor.data.data.status.isStunned === false \n      && withinRange(attacker, t, itemRange)\n    );   \n    console.log('case 1')\n  } else if (attacker.data.disposition===1) { // PCs (friendly) is attacking NPC (hostile)\n    withinRangeOfToken = canvas.tokens.placeables.filter(t => \n      t.id !== attacker.id \n      && t.data.disposition === 1 \n      && t.actor.data.data.status.isStunned === false \n      && t.visible \n      && withinRange(target, t, itemRange)\n    );    \n    alliedWithinRangeOfToken = canvas.tokens.placeables.filter(t => \n      t.id !== target.id \n      && t.data.disposition === -1 \n      && t.actor.data.data.status.isStunned === false \n      && withinRange(target, t, itemRange)\n    );    \n    //alliedWithinRangeOfTargetAndAttacker intersection with attacker and target\n    alliedWithinRangeOfTargetAndAttacker = alliedWithinRangeOfToken.filter(t => \n      t.data.disposition === -1 \n      && t.actor.data.data.status.isStunned === false \n      && withinRange(attacker, t, itemRange)\n    ); \n    console.log('case 2')\n  }\n\n  enemies = withinRangeOfToken.length;   \n  allies = alliedWithinRangeOfTargetAndAttacker.length;\n  modifier = Math.max(0, (enemies-allies) );  \n\n  //debug\n  if (debug_flag) {\n    console.log('-----------------------');\n    console.log('Enemies: ' + withinRangeOfToken.length);\n    console.log('Allies: ' + alliedWithinRangeOfToken.length);\n    console.log('Allies Adjacent to Both: ' + alliedWithinRangeOfTargetAndAttacker.length);\n    console.log('Modifier: ' + modifier);\n    console.log('Output: ' + Math.min( 4, modifier ));\n    console.log('-----------------------');\n  }\n  return Math.min( 4, modifier );\n}\n\n// function from Kekilla\nfunction withinRange(origin, target, range) {\n    const ray = new Ray(origin, target);\n    let distance = canvas.grid.measureDistances([{ ray }], { gridSpaces: true })[0];\n    return range >= distance;\n}\n\n// ======================\nfunction calc(attacker, target) {\n  let actorSize = attacker.actor.data.data.stats.size;\n  let targetSize = target.actor.data.data.stats.size;\n  let actorModifier = sizeToModifier(actorSize);\n  let targetModifier = sizeToModifier(targetSize);\n  let swat=false;   \n  \n  let diff;\n  if (actorModifier == targetModifier) {\n      return 0;\n  } else {\n      if (actorModifier < targetModifier) {\n          if (swat) {\n            diff = Math.abs(actorModifier) + Math.abs(targetModifier);\n            diff = Math.max( (diff-4), 0);\n          } else {                  \n            diff = Math.abs(actorModifier) + Math.abs(targetModifier);\n          }\n          return diff;\n      } else {\n          if (swat) {\n            diff = Math.abs(actorModifier) + Math.abs(targetModifier);                  \n            diff = Math.max( (diff-4), 0);\n          } else {\n            diff = Math.abs(actorModifier) + Math.abs(targetModifier);\n          }                \n          return -diff;\n      }\n  }\n}\n\nfunction sizeToModifier(size) { //p179 swade core\n    if (size == -4) {\n        return -6;\n    } else if (size == -3) {\n        return -4;\n    } else if (size == -2) {\n        return -2;\n    } else if (size >= -1 && size <= 3) {\n        return 0;\n    } else if (size >= 4 && size <= 7) {\n        return 2;\n    } else if (size >= 8 && size <= 11) {\n        return 4;\n    } else if (size >= 12 && size <= 20) {\n        return 6;\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"core":{"sourceId":"Macro.nUOg0MYMaKIATGUq"}},"_id":"D4q72hhtSEVOUVhk"}
{"name":"Gang Up","type":"script","author":"tckKxzbezKvre3KI","img":"icons/commodities/claws/claw-lizard-white-black.webp","scope":"global","command":"const version = 'v1.5';\nconst chatimage = \"icons/commodities/claws/claw-lizard-white-black.webp\";\n\n/* Gang Up p101 SWADE core\nIMPORTANT\n- YOU SHOULD DEFINE TOKEN DISPOSITION: FRIENDLY FOR PCS AND ALLIES. HOSTILE FOR ENEMIES\n\nMODULES\n- OPTIONAL: Token Faction\n\nTODO\n- detect dead\n- JB2A\n\nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Savage%20Worlds/GangUp.js\nicon: icons/commodities/claws/claw-lizard-white-black.webp\n*/\n\n// Requires at least 1 target\nif (canvas.tokens.controlled[0]===undefined || Array.from(game.user.targets)[0]===undefined){\n  ui.notifications.warn(\"You must select a token and target another one!\");    \n} else {\n  let target=Array.from(game.user.targets)[0]; // token will not be count\n  let attacker=canvas.tokens.controlled[0];  \n  messageToTheChat(attacker, target);\n}\n\nfunction messageToTheChat(attacker, target) {\n  let message = `<h2 style=\"color:red\"><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\">Gang Up</h2>`;\n  message += `<p><b style=\"color:red\">${attacker.name}</b> will receive ${gangUp(attacker, target)} to attack <b style=\"color:darkblue\">${target.name}</b></p>`;\n  \n  // send message\n  let chatData = {\n    user: game.user.id,    \n    content: message\n  };  \n  ChatMessage.create(chatData, {});  \n}\n\n// pg 101 swade core\n// - Each additional adjacent foe (who isn’t Stunned)\n// - adds +1 to all the attackers’ Fighting rolls, up to a maximum of +4.\n// - Each ally adjacent to the defender cancels out one point of Gang Up bonus from an attacker adjacent to both.\nfunction gangUp(attacker, target) {\n  const debug_flag=true;\n\n  let itemRange=1; // dist 1''\n  let enemies;\n  let allies;\n  let modifier=0;\n  \n  let withinRangeOfToken;\n  let alliedWithinRangeOfToken;\n  let alliedWithinRangeOfTargetAndAttacker;\n  \n  if (attacker.data.disposition===-1) { // NPC (hostile) is attacking PCs (friendly)\n    withinRangeOfToken = canvas.tokens.placeables.filter(t => \n      t.id !== attacker.id \n      && t.data.disposition === -1 \n      && t.actor.data.data.status.isStunned === false \n      && t.visible \n      && withinRange(target, t, itemRange)\n    );    \n    alliedWithinRangeOfToken = canvas.tokens.placeables.filter(t => \n      t.id !== target.id \n      && t.data.disposition === 1 \n      && t.actor.data.data.status.isStunned === false \n      && withinRange(target, t, itemRange)\n    );    \n    //alliedWithinRangeOfTargetAndAttacker intersection with attacker and target\n    alliedWithinRangeOfTargetAndAttacker = alliedWithinRangeOfToken.filter(t => \n      t.data.disposition === 1 \n      && t.actor.data.data.status.isStunned === false \n      && withinRange(attacker, t, itemRange)\n    );    \n  } else if (attacker.data.disposition===1) { // PCs (friendly) is attacking NPC (hostile)\n    withinRangeOfToken = canvas.tokens.placeables.filter(t => \n      t.id !== attacker.id \n      && t.data.disposition === 1 \n      && t.actor.data.data.status.isStunned === false \n      && t.visible \n      && withinRange(target, t, itemRange)\n    );    \n    alliedWithinRangeOfToken = canvas.tokens.placeables.filter(t => \n      t.id !== target.id \n      && t.data.disposition === -1 \n      && t.actor.data.data.status.isStunned === false \n      && withinRange(target, t, itemRange)\n    );    \n    //alliedWithinRangeOfTargetAndAttacker intersection with attacker and target\n    alliedWithinRangeOfTargetAndAttacker = alliedWithinRangeOfToken.filter(t => \n      t.data.disposition === -1 \n      && t.actor.data.data.status.isStunned === false \n      && withinRange(attacker, t, itemRange)\n    ); \n  }\n\n  enemies = withinRangeOfToken.length;   \n  allies = alliedWithinRangeOfTargetAndAttacker.length;\n  modifier = Math.max(0, (enemies-allies) );  \n\n  //debug\n  if (debug_flag) {\n    console.log('-----------------------');\n    console.log('Enemies: ' + withinRangeOfToken.length);\n    console.log('Allies: ' + alliedWithinRangeOfToken.length);\n    console.log('Allies Adjacent to Both: ' + alliedWithinRangeOfTargetAndAttacker.length);\n    console.log('Modifier: ' + modifier);\n    console.log('-----------------------');\n  }\n  return Math.min( 4, modifier );\n}\n\n// function from Kekilla\nfunction withinRange(origin, target, range) {\n    const ray = new Ray(origin, target);\n    let distance = canvas.grid.measureDistances([{ ray }], { gridSpaces: true })[0];\n    return range >= distance;\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"core":{"sourceId":"Macro.DLCBPZ662cUYbgil"}},"_id":"DMdeft0RxDVKsnDG"}
{"name":"Size/Scale Calculator","type":"script","author":"tckKxzbezKvre3KI","img":"icons/tools/hand/scale-balances-merchant-brown.webp","scope":"global","command":"const version = 'v1.7';\nconst chatimage = \"icons/tools/hand/scale-balances-merchant-brown.webp\";\n\n/* Size Scale p106 SWADE\n\nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Savage%20Worlds/SizeScaleCalculator.js\nicon: icons/tools/hand/scale-balances-merchant-brown.webp\n*/\n\nlet tokenActor = canvas.tokens.controlled[0];\nlet tokenTarget = Array.from(game.user.targets)[0];\nlet coreRules = false;\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\n\nif (tokenActor === undefined || tokenTarget === undefined) {\n    ui.notifications.warn(\"You must select a token and target another one!\");\n} else {\n    const actorSwat = token.actor.data.items.find(function (item) {\n        return ((item.name.toLowerCase() === \"swat\") && item.type === \"ability\");\n    });\n    const targetSwat = tokenTarget.actor.data.items.find(function (item) {\n        return ((item.name.toLowerCase() === \"swat\") && item.type === \"ability\");\n    });\n    rollForIt();\n\n\n    function rollForIt() {\n        let actorSize = tokenActor.actor.data.data.stats.size;\n        let targetSize = tokenTarget.actor.data.data.stats.size;\n        let actorModifier = sizeToModifier(actorSize);\n        let targetModifier = sizeToModifier(targetSize);\n        let modifier = calc(actorModifier, targetModifier);\n\n        let message = `<div><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Size & Scale Calculator</h2>`;\n        if (coreRules === true) {\n            message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> @Compendium[swade-core-rules.swade-rules.mbP0fwcquD98QtwX]{Size & Scale} Calculator</h2>`;\n        }\n        message += `<ul><li><b>${tokenActor.name}:</b> Size = ${actorSize} / Modifier = ${actorModifier}</li>`;\n        message += `<li><b>${tokenTarget.name}:</b> Size = ${targetSize} / Modifier = ${targetModifier}</li></ul>`;\n        message += `<h3>Result:</h3>`;\n        if (modifier != 0) {\n            message += `<ul><li>${tokenActor.name} has <b style=\"color:red\">${modifier}</b> to attack ${tokenTarget.name}`;\n            if (actorSwat) {\n                message += ` and has Swat*.</li>`;\n            } else { message += `.</li>` }\n            message += `<li>${tokenTarget.name} has <b style=\"color:red\">${calc(targetModifier, actorModifier)}</b> to attack ${tokenActor.name}`;\n            if (targetSwat) {\n                message += ` and has Swat*.</li></ul>`;\n            } else { message += `.</li></ul>` }\n            if ((actorSwat && targetSwat) || (actorSwat || targetSwat)) {\n                if (coreRules === true) {\n                    message += `<p>*<b>@Compendium[swade-core-rules.swade-rules.q5sk5hEw6TED0FOU]{Swat}:</b> Ignore up to 4 points of penalties from Scale for the specified action(s).</p>`;\n                } else {\n                    message += `<p>*<b>Swat:</b> Ignore up to 4 points of penalties from Scale for the specified action(s).</p>`;\n                }\n                if (coreRules === true) {\n                    message += `</div>`;\n                }\n            }\n        } else {\n            message += `<p><b>There is no modifier.</b> They have the same Scale.</p>`;\n        }\n\n        // send message\n        let chatData = {\n            content: message\n        };\n        ChatMessage.create(chatData, {});\n    }\n\n    function calc(actorModifier, targetModifier) {\n        let diff;\n        if (actorModifier == targetModifier) {\n            return 0;\n        } else {\n            if (actorModifier < targetModifier) {\n                diff = Math.abs(actorModifier) + Math.abs(targetModifier);\n                return diff;\n            } else {\n                diff = Math.abs(actorModifier) + Math.abs(targetModifier);\n                return -diff;\n            }\n        }\n    }\n\n    function sizeToModifier(size) { //p179 swade core\n        if (size == -4) {\n            return -6;\n        } else if (size == -3) {\n            return -4;\n        } else if (size == -2) {\n            return -2;\n        } else if (size >= -1 && size <= 3) {\n            return 0;\n        } else if (size >= 4 && size <= 7) {\n            return 2;\n        } else if (size >= 8 && size <= 11) {\n            return 4;\n        } else if (size >= 12 && size <= 20) {\n            return 6;\n        }\n    }\n    // v. 1.0.0 - Original code by brunocalado, modified by SalieriC#8263.\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"core":{"sourceId":"Macro.mvLjJ3zzm6PzElPZ"}},"_id":"DZoLJfvu1MNh8cqm"}
{"name":"Whisper","type":"script","author":"tckKxzbezKvre3KI","img":"icons/tools/scribal/ink-quill-pink.webp","scope":"global","command":"const version = 'v0.2';\n/* Whisper \nFeatures\n- whisper to conected players\n\nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Qualquer/Whisper.js\nicon: icons/tools/scribal/ink-quill-pink.webp\n*/\n\nlet users = User.collection.entities.filter(it => it.active === true);\n\nif (users.length < 2) {\n  ui.notifications.error(\"Nenhum jogador online.\");\n} else {\n  let applyChanges = false;\n  let content =`\n    <form>\n      <div class=\"form-group\">\n        <label>Selecione o jogador:</label>\n        <select id=\"player\" name=\"player\">\n  `;\n\n  for (let user of users) {  \n    content += `<option value=\"`+ user.data.name +`\">`+ user.data.name +\"</option>\";    \n  }\n\n  content += `\n        </select>\n      </div>\n        <div class=\"form-group\">\n        <label>Mensagem:</label>\n        <textarea name=\"msg\" style=\"width:250px;height:150px;\"></textarea><br>\n      </div>\n    </form>\n  `;\n\n  new Dialog(\n    {\n      title: `Mensagem Privada - ${version}`,\n      content: content,\n      buttons: {\n        yes: {\n          icon: \"<i class='fas fa-check'></i>\",\n          label: `Enviar`,\n          callback: () => applyChanges = true\n        },\n        no: {\n          icon: \"<i class='fas fa-times'></i>\",\n          label: `Cancelar`\n        },\n      },\n      default: \"yes\",\n      close: html => {\n        if (applyChanges) {\n          let player = html.find('[name=\"player\"]')[0].value;\n          let msg = html.find('[name=\"msg\"]')[0].value || \"none\";\n          if (msg !== \"none\") {\n            ChatMessage.create({\n              whisper: ChatMessage.getWhisperRecipients(player),\n              content: msg\n            })\n          }\n        }\n      }\n    }\n  ).render(true);\n  \n} // end","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"core":{"sourceId":"Macro.O3qzgjDIUCf7nvb5"}},"_id":"IgtWm5cNZjnSaF4v"}
{"name":"Mass Battle","type":"script","author":"tckKxzbezKvre3KI","img":"icons/environment/people/charge.webp","scope":"global","command":"const version = 'v1.1';\nconst chatimage = \"icons/environment/people/charge.webp\";\n\n/* Mass Battle p133 SWADE\n\nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Savage%20Worlds/MassBattle.js\nicon: icons/environment/people/charge.webp\n*/\n\nmain();\n\nfunction main() {  \n  let template = `  \n    <style type=\"text/css\">\n      div.purpleHorizon {\n        border: 4px solid #ff0000;\n        background-color: #000000;\n        width: 100%;\n        text-align: center;\n        border-collapse: collapse;\n      }\n      .divTable.purpleHorizon .divTableCell, .divTable.purpleHorizon .divTableHead {\n        border: 0px solid #550000;\n        padding: 5px 2px;\n      }\n      .divTable.purpleHorizon .divTableBody .divTableCell {\n        font-size: 13px;\n        font-weight: bold;\n        color: #FFFFFF;\n      }\n      \n      .divTable{ display: table; }\n      .divTableRow { display: table-row; }\n      .divTableHeading { display: table-header-group;}\n      .divTableCell, .divTableHead { display: table-cell;}\n      .divTableHeading { display: table-header-group;}\n      .divTableFoot { display: table-footer-group;}\n      .divTableBody { display: table-row-group;}\n\n      /* HIDE RADIO */\n      [type=radio] { \n      position: absolute;\n      opacity: 0;\n      width: 0;\n      height: 0;\n      }\n\n      /* IMAGE STYLES */\n      [type=radio] + img {\n      cursor: pointer;\n      }\n\n      /* CHECKED STYLES */\n      [type=radio]:checked + img {\n      outline: 4px solid #f00;\n      }\n      \n      .container {\n        position: relative;\n        text-align: center;\n        color: white;\n      }\n      /* Centered text */\n      .centered {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        font-size: 18px;\n      }    \n\n      #kultcss .window-content {    \n        background: #000000;\n      }     \n      #kultcss .dialog-button {\n        height: 40px;\n        background: #000000;\n        color: #ffffff;\n        justify-content: space-evenly;\n        align-items: center;\n        cursor: pointer;\n        border: none;    \n      }  \n      #kultcss header {\n        background: #000000;\n        border-radius: 0;    \n        border: none;    \n        margin-bottom: 2px;\n        font-size: .75rem;\n      }\n    </style>    \n    \n    <h1 style=\"color:white\">Force 1</h1>\n    <div class=\"divTable purpleHorizon\">\n    <div class=\"divTableBody\">\n    \n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <p>Name</p>\n        <input id=\"name1\" type=\"text\" max=\"20\" style=\"width: 100px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=\"Force1\">    \n    </div>\n    <div class=\"divTableCell\">      \n      <label>        \n        <div class=\"container\">\n          <p>Force</p>\n        <input id=\"force1\" type=\"number\" min=\"10\" max=\"10\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=10>\n        </div>\n      </label>      \n    </div>    \n    <div class=\"divTableCell\">\n        <p>Commander Die/Bonus</p>\n        <input id=\"commanderbonus1\" type=\"text\" style=\"width: 100px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=\"1d6x+4\">              \n    </div>\n    </div>\n\n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <p>Tactical Advantage</p>\n        <input id=\"tacticaladvantage1\" type=\"number\" min=\"0\" max=\"4\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=0>       \n    </div>\n    <div class=\"divTableCell\">      \n      <label>        \n        <div class=\"container\">\n          <p>Battle Plan</p>\n        <input id=\"battleplan1\" type=\"number\" min=\"0\" max=\"4\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=0>       \n        </div>\n      </label>      \n    </div>    \n    <div class=\"divTableCell\">\n        <p>Players Bonus</p>\n        <input id=\"playersbonus1\" type=\"number\" min=\"-20\" max=\"20\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=0>       \n    </div>\n    </div>\n    \n    </div>\n    </div>\n    \n\n    <h1 style=\"color:white\">Force 2</h1>\n    <div class=\"divTable purpleHorizon\">\n    <div class=\"divTableBody\">\n    \n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <p>Name</p>\n        <input id=\"name2\" type=\"text\" max=\"20\" style=\"width: 100px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=\"Force2\">    \n    </div>\n    <div class=\"divTableCell\">      \n      <label>        \n        <div class=\"container\">\n          <p>Force</p>\n        <input id=\"force2\" type=\"number\" min=\"10\" max=\"10\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=7>\n        </div>\n      </label>      \n    </div>   \n    <div class=\"divTableCell\">\n        <p>Commander Die/Bonus</p>\n        <input id=\"commanderbonus2\" type=\"text\" style=\"width: 100px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=\"1d8x+3\">       \n    </div>\n    </div>\n\n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <p>Tactical Advantage</p>\n        <input id=\"tacticaladvantage2\" type=\"number\" min=\"0\" max=\"4\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=0>       \n    </div>\n    <div class=\"divTableCell\">      \n      <label>        \n        <div class=\"container\">\n          <p>Battle Plan</p>\n        <input id=\"battleplan2\" type=\"number\" min=\"0\" max=\"4\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=0>       \n        </div>\n      </label>      \n    </div>    \n    <div class=\"divTableCell\">\n        <p>Players Bonus</p>\n        <input id=\"playersbonus2\" type=\"number\" min=\"-20\" max=\"20\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=0>       \n    </div>\n    </div>\n    \n    </div>\n    </div>\n    \n  `;\n  \n  new Dialog({\n    title: `Mass Battle - ${version}`,\n    content: template,\n    buttons: {\n      ok: {\n        label: \"Battle!\",\n        callback: async (html) => {\n          massbattle(html);\n        },\n      },\n      cancel: {\n        label: \"Cancel\",\n      }\n    },\n    default: \"ok\"\n  }, { id: 'kultcss'}).render(true);\n}\n\nasync function massbattle(html){\n  // FORCE 1\n  const name1 =  html.find(\"#name1\")[0].value;    \n  const force1 = parseInt( html.find(\"#force1\")[0].value );    \n  const commanderbonus1 = html.find(\"#commanderbonus1\")[0].value;    \n  const tacticaladvantage1 =  parseInt( html.find(\"#tacticaladvantage1\")[0].value );    \n  const battleplan1 = parseInt( html.find(\"#battleplan1\")[0].value );    \n  const playersbonus1 = parseInt( html.find(\"#playersbonus1\")[0].value );      \n  // FORCE 2\n  const name2 =  html.find(\"#name2\")[0].value;    \n  const force2 = parseInt( html.find(\"#force2\")[0].value );    \n  const commanderbonus2 = html.find(\"#commanderbonus2\")[0].value;    \n  const tacticaladvantage2 =  parseInt( html.find(\"#tacticaladvantage2\")[0].value );    \n  const battleplan2 = parseInt( html.find(\"#battleplan2\")[0].value );    \n  const playersbonus2 = parseInt( html.find(\"#playersbonus2\")[0].value ); \n  // \n  let commander1Dice = new Roll(commanderbonus1).roll({ async : false });  \n  let commanderRolled1=commander1Dice.total;\n  let commander2Dice = new Roll(commanderbonus2).roll({ async : false });  \n  let commanderRolled2=commander2Dice.total;\n  let result1=0;\n  let result2=0;\n  let message = `<h1 style=\"color:red\"><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\">Mass Battle</h1>`;\n  \n  result1 += forceBonus(force1, force2);\n  result2 += forceBonus(force1, force2);\n  result1 += tacticaladvantage1;\n  result2 += tacticaladvantage2;\n  result1 += battleplan1;\n  result2 += battleplan2;\n  result1 += playersbonus1;\n  result2 += playersbonus2;\n  result1 += commanderRolled1;\n  result2 += commanderRolled2;  \n  \n  message += `<h2>${name1}</h2>`;\n  message += `<ul>\n  <li><b>Commander Roll:</b> ${commanderRolled1}</li>\n  <li><b>Force Size:</b> ${force1}</li>\n  <li><b>Tactical Advantage:</b> ${tacticaladvantage1}</li>\n  <li><b>Battle Plan:</b> ${battleplan1}</li>\n  <li><b>Players Bonus:</b> ${playersbonus1}</li>\n  </ul>`;\n\n  message += `<h2>${name2}</h2>`;\n  message += `<ul>\n  <li><b>Commander Roll:</b> ${commanderRolled2}</li>\n  <li><b>Force Size:</b> ${force2}</li>\n  <li><b>Tactical Advantage:</b> ${tacticaladvantage2}</li>\n  <li><b>Battle Plan:</b> ${battleplan2}</li>\n  <li><b>Players Bonus:</b> ${playersbonus2}</li>\n  </ul>`;\n  \n  message += winnerCheck(result1, result2, name1, name2, force1, force2);\n  \n  let chatData = {\n    content: message\n  };  \n  ChatMessage.create(chatData, {});\n  \n  commander1Dice.toMessage({flavor: `${name1}`});\n  commander2Dice.toMessage({flavor: `${name2}`});\n}\n\nfunction forceBonus(force1, force2) {\n  if (force1>force2) {\n    return (force1-force2)\n  } else if (force2>force1) {\n    return (force2-force1)\n  } else {\n    return 0;\n  }\n}\n\nfunction winnerCheck(result1, result2, name1, name2, force1, force2) {\n  let message = `<h2 style=\"color:red\">Result</h2>`;\n  let force1after = force1;\n  let force2after = force2;\n  if (result1>result2) {\n    if ( (result1+4)>=result2 ) { // raise\n      message += `<p><b>Victory:</b> The defeated army loses two Force Tokens.</p>`;        \n      force2after -= 2; \n    } else {\n      message += `<p><b>Marginal Victory:</b> The victor loses one Force Token, the defeated loses two.</p>`;        \n      force2after -= 2; \n      force1after -= 1;          \n    }    \n    message += `<p>Winner: <b>${name1}</b></p>`;\n    message += `<p>Loser: <b>${name2}</b></p>`;        \n  } else if (result2>result1) {\n    if ( (result2+4)>=result1 ) { // raise\n      message += `<p><b>Victory:</b> The defeated army loses two Force Tokens.</p>`;        \n      force1after -= 2; \n    } else {\n      message += `<p><b>Marginal Victory:</b> The victor loses one Force Token, the defeated loses two.</p>`;        \n      force1after -= 2; \n      force2after -= 1;          \n    }\n    message += `<p>Winner: <b>${name2}</b></p>`;\n    message += `<p>Loser: <b>${name1}</b></p>`;    \n  } else {\n    message += `<p><b>Draw:</b> Both sides lose one Force Token.</p>`;    \n    force1after -= 1; \n    force2after -= 1;\n    message += `<p>The <b>${name1}</b> and <b>${name2}</b> are tied.</p>`;    \n  }\n\n  message += `<p><b>${name1}:</b> has ${force1after} force tokens</p>`;\n  message += `<p><b>${name2}:</b> has ${force2after} force tokens</p>`;\n  \n  message += `<h2 style=\"color:darkblue\">Morale</h2>`;\n  if ( (force1-force1after)>0 ) {\n    message += `<p><b>${name1}</b> rolls spirit with -${force1-force1after}.</p>`;\n  }\n  if ( (force2-force2after)>0 ) {\n    message += `<p><b>${name2}</b> rolls spirit with -${force2-force2after}.</p>`;\n  }\n  message += `<p>+2: The army is made up mostly of undead or other fearless troops.</p>`;\n  message += `<p>+2: The army is within fortifications or prepared positions.</p>`;\n  message += `<p>+2: The army cannot retreat or will be killed if it does.</p>`;\n\n  return message;\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"core":{"sourceId":"Macro.aEsJaGoeQTaaoJ0G"}},"_id":"OYpThODH5nXcgusd"}
{"name":"Deviation","type":"script","author":"tckKxzbezKvre3KI","img":"icons/weapons/thrown/dynamite-simple-brown.webp","scope":"global","command":"const version = 'v1.1';\nconst chatimage = \"https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Savage%20Worlds/icons/clock.webp\";\n\n/* Deviation p99 SWADE\nIf a blast template misses, it deviates 1d6″\nfor thrown weapons (such as grenades) and\n2d6″ for fired projectiles. Multiply by 2 if the\nattack was made at Medium Range, 3 if Long,\nand 4 for Extreme.\n\nNext roll a d12 and read it like a clock\nfacing to determine the direction the missile\ndeviates. A weapon can never deviate more\nthan half the distance to the original target\n(that keeps it from going behind the thrower).\n\nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Savage%20Worlds/Deviation.js\nicon: icons/weapons/thrown/dynamite-simple-brown.webp\n*/\n\nlet coreRules = false;\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\nconst chaticon = 'icons/weapons/thrown/dynamite-simple-brown.webp';\n\ngetRequirements();\n\nfunction getRequirements() {\n  let template = `\n  <h2>Weapon Type</h2>\n  <table style=\"width:100%\">\n  <tr>\n    <td><input type=\"radio\" id=\"thrown\" name=\"weapontype\" value=\"thrown\"><label for=\"thrown\">Thrown weapon</label></td>\n    <td><input type=\"radio\" id=\"projectile\" name=\"weapontype\" value=\"projectile\" checked=\"checked><label for=\"projectile\">Projectile</label></td>    \n  </tr>\n  </table>  \n  <h2>Range</h2>\n  <table style=\"width:100%\">\n  <tr>\n    <td><input type=\"radio\" id=\"short\" name=\"range\" value=\"short\" checked=\"checked><label for=\"thrown\">Short</label></td>\n    <td><input type=\"radio\" id=\"medium\" name=\"range\" value=\"medium\"><label for=\"projectile\">Medium</label></td>    \n    <td><input type=\"radio\" id=\"long\" name=\"range\" value=\"long\"><label for=\"projectile\">Long</label></td>    \n    <td><input type=\"radio\" id=\"extreme\" name=\"range\" value=\"extreme\"><label for=\"projectile\">Extreme</label></td>    \n  </tr>\n  </table>    \n  `;\n  new Dialog({\n    title: \"Deviation\",\n    content: template,\n    buttons: {\n      ok: {\n        label: \"Go!\",\n        callback: async (html) => {\n          rollForIt(html);\n        },\n      }\n    },\n  }).render(true);\n}\n\nfunction rollForIt(html) {\n  const weapontype=html.find('input[name=\"weapontype\"]:checked').val();\n  const range=html.find('input[name=\"range\"]:checked').val();\n  \n  if (weapontype=='thrown') {\n    diceRoll('1d6', range);\n  } else {\n    diceRoll('2d6', range);\n  }\n}\n\nfunction diceRoll(die, range) {\n  const rangeMultiplier = rangeCheck(range);\n  let roll = new Roll('{1d12,'+die+'}').roll({ async : false });\n  let direction = roll.terms[0].rolls[0].total;  \n  let distance =  roll.terms[0].rolls[1].total*rangeMultiplier;  \n\n  let message = `<div><h2><img style=\"vertical-align:middle\" src=${chaticon} width=\"28\" height=\"28\">Deviation</h2>`;    \n  if (coreRules === true) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chaticon} width=\"28\" height=\"28\"> @Compendium[swade-core-rules.swade-rules.xxEcWExtn36PPxg0]{Deviation}</h2>`;\n  }  \n  \n  message += `<p>Move the blast <b>${distance}\"</b> to <b style=\"color:red\">${direction}</b> O'Clock.</p>`;\n  if (directionCheck(direction)) {\n    message += `<p><b style=\"color:red\">A weapon can never deviate more than half the distance to the original target (that keeps it from going behind the thrower).</b></p>`;\n  }\n  message += `<p style=\"text-align:center\"><img style=\"vertical-align:middle\" src=${chatimage} width=\"200\" height=\"200\"><p></div>`;\n  \n  let chatData = {\n      content: message\n  };\n  ChatMessage.create(chatData, {});  \n  let tempChatData = {\n    content: message\n  };     \n  roll.toMessage();\n}\n\nfunction rangeCheck(range) {\n  if (range=='short') {\n    return 1;\n  } else if (range=='medium') {\n    return 2;\n  } else if (range=='long') {\n    return 3;\n  } else if (range=='extreme') {\n    return 4;\n  }\n}\n\nfunction directionCheck(direction) {\n  console.log(direction);\n  if (direction==4 || direction==5 || direction==6 || direction==7 || direction==8) {\n    return true\n  } else {\n    return false\n  } \n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"core":{"sourceId":"Macro.WMkBn3WtDCfnSJYY"}},"_id":"PUztcVNpHPyB5isJ"}
{"name":"Unshaken","type":"script","author":"tckKxzbezKvre3KI","img":"icons/magic/control/fear-fright-white.webp","scope":"global","command":"const version = 'v1.0';\nconst chatimage = \"icons/magic/control/fear-fright-white.webp\";\n\n/* Unshaken\n\nsource: \nicon: icons/magic/control/fear-fright-white.webp\n*/\n\nlet bennies;\nlet token;\nlet bv;\nif (canvas.tokens.controlled[0]===undefined) {\n  ui.notifications.error(\"Please select a token.\"); // No Token is Selected\n} else {\n  token = canvas.tokens.controlled[0];\n  main();\n}\n\nasync function main() {\n  if (token.actor.data.data.status.isShaken === true) {\n    rollUnshake()\n  } else if (token) {\n    token.actor.update({ \"data.status.isShaken\": true });\n    ChatMessage.create({\n      user: game.user.id,\n      content: `<p><b style=\"color:red\">${game.user.name}</b> is Shaken now!</p>`,\n    });        \n  }\n}\n\nasync function rollUnshake() {\n  const edgeNames = ['combat reflexes', 'demon', 'undead', 'construct', 'undead (harrowed)'];\n  const actorAlias = speaker.alias;\n  // ROLL SPIRIT AND CHECK COMBAT REFLEXES\n  let spirit = '{1d' + token.actor.data.data.attributes.spirit.die.sides + 'x+' + token.actor.data.data.attributes.spirit.die.modifier+',1d6x}';  \n  let spiritDice = new Roll(spirit).roll({ async : false });  \n  let traitdie = spiritDice.terms[0].results[0].result;\n  let wilddie = spiritDice.terms[0].results[1].result;  \n  let spiritRolled=Math.max(traitdie, wilddie);\n  \n  const edges = token.actor.data.items.filter(function (item) {\n    return edgeNames.includes(item.name.toLowerCase()) && (item.type === \"edge\" || item.type === \"ability\");\n  });\n  \n  let rollWithEdge = spiritRolled;\n  let edgeText = \"\";\n  for (let edge of edges) {\n    rollWithEdge += 2;\n    edgeText += `<br/><i>+ ${edge.name}</i>`;\n  }\n  \n  let chatData = `<div><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\">Shaken</h2>`;    \n  chatData += `${actorAlias} rolled <b style=\"color:blue\"> ${rollWithEdge} </b>`;\n  \n  // Checking for a Critical Failure.\n  if ( spiritDice.terms[0].results[0].result==1 && spiritDice.terms[0].results[1].result==1 ) {\n    ui.notifications.notify(\"You've rolled a Critical Failure!\");\n    chatData += `${actorAlias} rolled a <span style=\"font-size:150% color:red\"> Critical Failure! </span>`;\n  } else {\n    if (rollWithEdge <= 3) {\n        chatData += ` and remains Shaken.`;\n        useBenny();\n    } else if (rollWithEdge >= 4) {\n        chatData += `, is no longer Shaken and may act normally.`;\n        token.actor.update({ \"data.status.isShaken\": false });\n    }\n    chatData += ` ${edgeText}`;\n  }\n  ChatMessage.create({ content: chatData+`</div>` });\n  spiritDice.toMessage();\n}\n\nfunction useBenny() {\n  bv = checkBennies();\n  if (bv > 0) {\n    new Dialog({\n      title: 'Spend a Benny?',\n      content: `Do you want to spend a Benny to act immediately? (You have ${bv} Bennies left.)`,\n      buttons: {\n          one: {\n            label: \"Yes.\",\n            callback: (html) => {\n              spendBenny();\n              token.actor.update({ \"data.status.isShaken\": false });\n            }\n          },\n          two: {\n            label: \"No.\",\n            callback: (html) => { return; },\n          }\n        },\n        default: \"one\"\n      }).render(true)\n  }\n  else {\n      return;\n  }\n}\n\n// Check for Bennies\nfunction checkBennies() {\n  bennies = token.actor.data.data.bennies.value;\n\n  // Non GM token has <1 bennie OR GM user AND selected token has <1 benny\n  if ((!game.user.isGM && bennies < 1) || (game.user.isGM && bennies < 1 && game.user.getFlag(\"swade\", \"bennies\") < 1)) {\n    ui.notifications.error(\"You have no more bennies left.\");\n  }\n  if (game.user.isGM) {\n    bv = bennies + game.user.getFlag(\"swade\", \"bennies\");\n  }\n  else {\n    bv = bennies;\n  }\n  return bv;\n}\n\n// Spend Benny function\nasync function spendBenny() {\n  bennies = token.actor.data.data.bennies.value;\n  //Subtract the spend, use GM benny if user is GM and token has no more bennies left or spend token benny if user is player and/or token has bennies left.\n  if (game.user.isGM && bennies < 1) {\n    game.user.setFlag(\"swade\", \"bennies\", game.user.getFlag(\"swade\", \"bennies\") - 1)\n  } else {\n    token.actor.update({\n      \"data.bennies.value\": bennies - 1,\n    })\n  }\n\n  //Show the Benny Flip\n  if (game.dice3d) {\n    game.dice3d.showForRoll(new Roll(\"1dB\").roll({ async : false }), game.user, true, null, false);\n  }\n\n  //Chat Message to let the everyone know a benny was spent\n  ChatMessage.create({\n    user: game.user.id,\n    content: `<p><b style=\"color:red\">${game.user.name}</b> spent a Benny and <b style=\"color:red\">${token.name}</b> may act normally now.</p>`,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"wpWSO3unowg8siJN":3,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.xwvNVeOMp5PjtWaK"}},"_id":"PkCt0q2jtHo5Ycta"}
{"name":"Quick Combat","type":"script","author":"tckKxzbezKvre3KI","img":"icons/magic/time/clock-stopwatch-white-blue.webp","scope":"global","command":"/* All tokens to Combat v1.1\n* - This macro select all tokens in the scene\n* - Add all of them to the combat tracker\n* - Roll Initiave for all\n* modified from @atnoslen with a little help from @Atropos (thanks!) \n* source: \n* icon: icons/magic/time/clock-stopwatch-white-blue.webp\n*/\n\n(async () => {\n  const scene = game.scenes.contents.filter(scene => scene.active === true)[0];\n  let tokens = [];\n  \n  let startCRoll=async function rollAndStart() {\n    await game.combat.rollAll();\n    await game.combat.startCombat();\n  }\n\n  if (!game.combat) {\n    scene.data.tokens.forEach(function(token) {\n      tokens.push({tokenId:token.id});\n    });\n\n    Combat.create({scene:scene.data._id, combatants:tokens}).then(startCRoll);\n\n  } else {\n    // Combat already exists, add the missing tokens.\n    // This assumes createCombatant is expensive, so create an array\n    // instead of calling individually.\n    scene.data.tokens.forEach(function(token) {\n      if (game.combat.combatants.filter(combatant => combatant.tokenId === token.id).length === 0) {\n        tokens.push({tokenId:token.id});\n      }\n    });\n\n    //game.combat.createCombatant(tokens).then(startCRoll);\n    game.combat.createEmbeddedDocuments(\"Combatant\", tokens).then(startCRoll);\n\n    //The Combat#createCombatant method has been deprecated in favor of Combatant.create and will be removed in 0.9.0\n  }\n  \n})()","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"core":{"sourceId":"Macro.JyWJ0QNXLbgQWcls"}},"_id":"gUohjJe685VawHN3"}
