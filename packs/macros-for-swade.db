{"_id":"0USlmX9tiE85iJe0","name":"GM Macro Manager","type":"script","author":"tckKxzbezKvre3KI","img":"icons/sundries/documents/document-sealed-signatures-red.webp","scope":"global","command":"const version = '0.5';\n\n/*\n  GM Menu\n  \n  icons: icons/sundries/documents/document-sealed-signatures-red.webp\n  \n  Fill the constant macros with the names of your macros, when you click the button it will run the macro.\n\n  Dialog Window will not close until the X button is pressed.\n*/\nconst managerType = 'GM - Macro Manager';\n\n(()=>{\n  const macros = [\n    \"Chase\",\n    \"Deviation\",\n    \"Mass Battle\",\n    \"Raise Calculator\",\n    \"Size/Scale Calculator\",\n    \"Quick Combat\"    \n  ];\n\n  let buttons = {}, dialog, content = `<div sytle=\"width:100%;text-align:center;><h2>Choose Macro</h2></div>`;\n  \n  macros.forEach((str)=> {\n    let macro = game.macros.getName(str);\n    if(!macro) return;\n\n    buttons[str] = {\n      label : `\n        <div style=\"display:flex;flex-direction:row;justify-content:center;align-items:center;width\">\n          <div style=\"display:flex;justify-content:left;flex-grow:1;\"><img src=\"${macro.data.img}\" width=\"25\" height=\"25\" style=\"background-color:#5c5c5c;\"/></div>\n          <div style=\"display:flex;justify-content:left;flex-grow:4\"><label>${str}</label></div>\n        </div>`,\n      callback : () => {\n        game.macros.getName(str).execute();\n        //dialog.render(true);\n      }\n    }\n  });\n  dialog = new Dialog({title : `${managerType}`,content, buttons}).render(true);\n})();","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":{"id":"temp_iccf0fxdot","path":"Macros","color":"#ff0000"}}}
{"_id":"28yrde5JhqMaEbHb","name":"Healing","type":"script","author":"tckKxzbezKvre3KI","img":"icons/magic/life/cross-area-circle-green-white.webp","scope":"global","command":"/*\nHealing\n- Med kit heal faz roll\n- Natural heal faz roll\n\nicon: icons/magic/life/cross-area-circle-green-white.webp\n*/\n\nlet tokenD;\nconst version = 'v1.5';\nconst chatimage = \"icons/magic/life/cross-area-circle-green-white.webp\";\nlet coreRules = false;\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\n\nif (canvas.tokens.controlled[0]===undefined) {\n  ui.notifications.error(\"Please, select a token.\"); // No Token is Selected\n} else {\n  tokenD = canvas.tokens.controlled[0];\n  main();\n}\n\nfunction main() {\n  let dialogText = ``;\n  \n  dialogButtons = {\n    one: {\n      label: \"Natural Healing\",\n      callback: (html) => {\n        naturalHeal(html);\n      }\n    },\n    two: {\n      label: \"Healing Skill\",\n      callback: (html) => {\n        skillHealSelector(html);\n      }\n    }\n  }\n\n  // Main Dialogue\n  new Dialog({\n    title: 'Healing',\n    content: dialogText,\n    buttons: dialogButtons,\n    default: \"one\",\n  }).render(true);\n\n}\n\n// MACRO FUNCTIONS\n\n/*\nWounded characters make a Vigor roll every five days. Success recovers one Wounds, and a raise recovers two.\nA Critical Failure increases the victim’s Wounds level by one—either from infection, blood loss, or aggravating the injuries. If this causes Incapacitation, don’t use the usual rules for taking damage. Instead, the victim lapses in and out of consciousness and makes a Vigor roll every 12 hours. If the roll is failed, he expires. Success means he must roll again 12 hours later. With a raise he stabilizes and wakes. Allies may also attempt to stabilize the hero as explained under Bleeding Out, above.\nSupport: Don’t forget to use Support when your party has been beaten up a bit. Characters with Healing, Survival, or other skills can make Support rolls to help allies make their Vigor rolls to heal!\n*/\nasync function naturalHeal(html) {\n  const edgeNames = ['fast healer'];  \n  // Roll Vigor and check for Fast Healer.\n  let rolled = await tokenD.actor.rollAttribute('vigor');\n  let r = rolled;\n  \n  const edges = tokenD.actor.data.items.filter(function (item) {\n    return edgeNames.includes(item.name.toLowerCase()) && (item.type === \"edge\" || item.type === \"ability\");\n  });\n  let rollWithEdge = r.total;\n  let edgeText = \"\";\n  for (let edge of edges) {\n    rollWithEdge += 2;\n    edgeText += `<br/><i>+ ${edge.name}</i>`;\n  }\n  r = rollWithEdge;\n  \n  // Roll Vigor including +2 if Fast Healer is present and another +2 if this is a reroll.\n  let message;\n  if (coreRules) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> @Compendium[swade-core-rules.swade-rules.gCrNh35pUQHaVN4J]{Healing}</h2></div>`;\n  } else {\n    message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Healing</h2>`;\n  }\n\n  // Checking for a Critical Failure.  \n  if ( sm.isCritical(rolled) ) {\n    message += `${tokenD.name} rolled a <b style=\"color: red; font-size:150%\">Critical Failure!</b> and takes another Wound!`;    \n    sm.applyWounds(tokenD, 1);\n    ChatMessage.create({ content: message });\n  } else {\n    message += `<p><b style=\"color:red\">${tokenD.name}</b> rolled <b style=\"color:blue\">${r}</b>`;    \n    if (r < 4) {\n      message += ` and is <b style=\"color:red\">unable to heal</b> any Wounds.</p>`;\n    } else if ( r>=4 && r<8 ) {\n      message += ` and heals <b style=\"color:darkgreen\">1</b> of his ${sm.getWounds(tokenD)} Wounds.</p>`;      \n      sm.applyWounds(tokenD, -1);\n    } else if ( r>8 ) {\n      message += ` and heals <b style=\"color:darkgreen\">2</b> of his ${sm.getWounds(tokenD)} Wounds.</p>`;      \n      sm.applyWounds(tokenD, -2);\n    }\n        \n    message += ` ${edgeText}`;\n  }\n\n  message += `<ul><li>This roll can be done every five day</li></ul>`;\n\n  ChatMessage.create({ content: message });\n}\n\nasync function skillHealSelector(html) {\n  let tokenTarget = Array.from(game.user.targets)[0];\n  if (tokenTarget === undefined) {\n    skillHeal(html);\n  } else {\n    skillHealTarget(html, tokenTarget);\n  }  \n}\n\n/*\nHealing skill: Each attempt requires 10 minutes per wound level of the patient. Subtract 1 from Healing rolls without a basic First Aid kit or similar supplies.\nA success removes one Wound, and a raise removes two. Failure means no Wounds are removed. A Critical Failure increases the victim’s Wound level by one.\n*/\nasync function skillHeal(html) {\n  // Roll Vigor and check for Fast Healer.  \n  let r = await sm.rollSkill(tokenD, 'healing');  \n  let rolled = r;\n  let startingWounds = sm.getWounds(tokenD);\n  \n  let message;\n  if (coreRules) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> @Compendium[swade-core-rules.swade-rules.gCrNh35pUQHaVN4J]{Healing}</h2></div>`;\n  } else {\n    message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Healing</h2>`;\n  }\n\n  r = r.total;\n\n  // Checking for a Critical Failure.\n  if ( sm.isCritical(rolled) ) {\n    message += `${tokenD.name} rolled a <b style=\"color: red; font-size:150%\">Critical Failure!</b> and takes another Wound!`;    \n    sm.applyWounds(tokenD, 1);\n  } else {\n    let skill = 'Healing'.toLowerCase();\n    let actorSkill = tokenD.actor.data.items.find(i => (i.name.toLowerCase() === skill) );\n    let skillName; \n    if (!actorSkill) {skillName = 'Untrained';} else {skillName = actorSkill.name;}\n    message += `<p><b style=\"color:red\">${tokenD.name}</b> rolled <b style=\"color:blue\">${r}</b> with <b style=\"color:darkgreen\">${skillName}</b>`;\n    if (r < 4) {\n      message += ` and is <b style=\"color:red\">unable to heal</b> any Wounds.</p>`;\n    } else if ( r>=4 && r<8 ) {\n      message += ` and heals <b style=\"color:darkgreen\">1</b> of his ${startingWounds} Wounds.</p>`;      \n      sm.applyWounds(tokenD, -1);\n    } else if ( r>8 ) {\n      message += ` and heals <b style=\"color:darkgreen\">2</b> of his ${startingWounds} Wounds.</p>`;      \n      sm.applyWounds(tokenD, -2);\n    }\n  }\n  \n  message += `<ul>\n  <li><b>Subtract 1</b> from Healing rolls without a basic First Aid kit or similar supplies.</li>\n  <li>This attempt required <b>${startingWounds*10}</b> minutes</li></ul>`;\n  \n  ChatMessage.create({ content: message });\n}\n\n/*\nHealing skill: Each attempt requires 10 minutes per wound level of the patient. Subtract 1 from Healing rolls without a basic First Aid kit or similar supplies.\nA success removes one Wound, and a raise removes two. Failure means no Wounds are removed. A Critical Failure increases the victim’s Wound level by one.\n*/\nasync function skillHealTarget(html, tokenTarget) {\n  // Roll Vigor and check for Fast Healer.  \n  let r = await sm.rollSkill(tokenD, 'healing');  \n  let rolled = r;\n  let startingWounds = sm.getWounds(tokenTarget);\n\n  let message;\n  if (coreRules) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> @Compendium[swade-core-rules.swade-rules.gCrNh35pUQHaVN4J]{Healing}</h2></div>`;\n  } else {\n    message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Healing</h2>`;\n  }\n\n  r = r.total;\n\n  // Checking for a Critical Failure.\n  if ( sm.isCritical(rolled) ) {\n    message += `${tokenD.name} rolled a <b style=\"color: red; font-size:150%\">Critical Failure!</b> and <b style=\"color: red;\">${tokenTarget.name}</b> takes another Wound!`;    \n    sm.applyWounds(tokenD, 1);\n  } else {\n    let skill = 'Healing'.toLowerCase();\n    let actorSkill = tokenD.actor.data.items.find(i => (i.name.toLowerCase() === skill) );\n    let skillName; \n    if (!actorSkill) {skillName = 'Untrained';} else {skillName = actorSkill.name;}\n    message += `<p><b style=\"color:red\">${tokenD.name}</b> rolled <b style=\"color:blue\">${r}</b> with <b style=\"color:darkgreen\">${skillName}</b>`;\n    if (r < 4) {\n      message += ` and is <b style=\"color:red\">unable to heal</b> any Wounds from <b style=\"color: red;\">${tokenTarget.name}</b>.</p>`;\n    } else if ( r>=4 && r<8 ) {\n      message += ` and heals <b style=\"color:darkgreen\">1</b> from <b style=\"color: red;\">${tokenTarget.name}</b>.</p>`;            \n    } else if ( r>8 ) {\n      message += ` and heals <b style=\"color:darkgreen\">2</b> from <b style=\"color: red;\">${tokenTarget.name}</b>.</p>`;            \n    }\n  }\n\n  message += `<ul>\n  <li><b>Subtract 1</b> from Healing rolls without a basic First Aid kit or similar supplies.</li>\n  <li>This attempt required <b>${startingWounds*10}</b> minutes</li></ul>`;\n  \n  ChatMessage.create({ content: message });\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.SjOf7Sp0D4ljIWfQ"},"cf":{"id":"temp_iccf0fxdot","path":"Macros","color":"#ff0000"}}}
{"_id":"4QtCeDOxcJZkms5N","name":"LP Check","type":"script","author":"tckKxzbezKvre3KI","img":"icons/commodities/treasure/puzzle-box-glowing-blue.webp","scope":"global","command":"const version = 'v1.2';\nconst chatimage = \"icons/commodities/treasure/puzzle-box-glowing-blue.webp\";\nconst rule = '@Compendium[sprawl-core-rules.sprawl-rules.jhEs3al7qA4sAwaa]{Logistics Points}';\nlet coreRules = false;\nif (game.modules.get(\"sprawl-core-rules\")?.active) { coreRules = true; }\n\n/* LP Check\n\nTODO \n- async\n\nsource: https://gitlab.com/sigil-vtt-projects/sprawlrunners/sprawlrunners/-/issues/10\nicon: icons/commodities/treasure/puzzle-box-glowing-blue.webp\n*/\n\nlet grandTotal = 0;\nlet grandTotalMax = 0;\nlet message;\n\nif (coreRules) {\n  message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${rule}</h2></div><ul>`;\n} else {\n  message = `<div><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Logistics Points</h2><div><ul>`;\n}\n\nlet characters = game.actors.contents.filter(e => e.data.type === 'character' && e.hasPlayerOwner);\n\nif (characters==undefined) {\n  ui.notifications.warn(\"Each player should own a character!\");    \n} else {\n  for(const character of characters) {\n    if (character.data.data.additionalStats.LP==undefined) {\n      ui.notifications.error(\"You need to check Enabled for LP in player Tweaks!\");\n      return;\n    }   \n    \n    let maxLP = character.data.data.additionalStats.LP.max;\n\n    let total = character.items.map(i => i.data.data).filter(p => (p.price > 0) && (p.equipped) ).reduce((total, curr) => total + curr.price, 0);\n    /*let total = character.items\n        .map(i => i.data.data.price)\n        .filter(p => p > 0)\n        .reduce((total, curr) => total + curr, 0);*/\n\n    message += `<li> ${character.name}: <b style=\"color:darkblue\">${total}</b> of <b style=\"color:red\">${maxLP}</b> </li>`;\n\n    character.update({\"data.additionalStats.LP.value\": total});\n\n    grandTotal += total;\n    grandTotalMax += maxLP;\n  }\n\n  message += `</ul><p>Total: <b style=\"color:darkblue\">${grandTotal}</b> of <b style=\"color:red\">${grandTotalMax}</b> </p>`;\n\n  // to chat\n  let chatData = {\n    user: game.user.id,\n    speaker: ChatMessage.getSpeaker(),\n    content: message\n  };\n\n  ChatMessage.create(chatData, {});\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":{"id":"temp_iccf0fxdot","path":"Macros","color":"#ff0000"}}}
{"_id":"4kPqkrZakBope3Sv","name":"Test","type":"script","author":"tckKxzbezKvre3KI","img":"icons/sundries/gaming/dice-pair-white-green.webp","scope":"global","command":"const version = 'v1.0';\nconst chatimage = 'icons/sundries/gaming/dice-pair-white-green.webp';\nlet coreRules = false;\nconst coreRulesLink = '@Compendium[swade-core-rules.swade-rules.2aAyYC6n07MrZ47O]{Test}';\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\n\n/* Test\nIMPORTANT\n- \n\nTODO\n- \nsource: \nicon: icons/sundries/gaming/dice-pair-white-green.webp\n*/\n\n// Requires at least 1 target\nlet supporter;\nlet target;    \nif (canvas.tokens.controlled[0]===undefined || Array.from(game.user.targets)[0]===undefined){\n  ui.notifications.warn(\"You must select a token and target another one!\");    \n} else {\n  supporter=canvas.tokens.controlled[0];\n  target=Array.from(game.user.targets)[0];    \n  main();\n}\n\nfunction main() {  \n\n  let supporterSkills = sm.listSkills(supporter);\n  let targetSkills = sm.listSkills(target);\n\n  let supporterSkillsList = ``;\n  supporterSkills.map((t) => {\n    supporterSkillsList += `<option value=\"${t}\">${t}</option>`;\n  });\n\n  let template = `  \n    <style type=\"text/css\">\n      div.purpleHorizon {\n        border: 4px solid #ff0000;\n        background-color: #000000;\n        width: 100%;\n        text-align: center;\n        border-collapse: collapse;\n      }\n      .divTable.purpleHorizon .divTableCell, .divTable.purpleHorizon .divTableHead {\n        border: 0px solid #550000;\n        padding: 5px 2px;\n      }\n      .divTable.purpleHorizon .divTableBody .divTableCell {\n        font-size: 13px;\n        font-weight: bold;\n        color: #FFFFFF;\n      }\n      \n      .divTable{ display: table; }\n      .divTableRow { display: table-row; }\n      .divTableHeading { display: table-header-group;}\n      .divTableCell, .divTableHead { display: table-cell;}\n      .divTableHeading { display: table-header-group;}\n      .divTableFoot { display: table-footer-group;}\n      .divTableBody { display: table-row-group;}\n\n      /* HIDE RADIO */\n      [type=radio] { \n      position: absolute;\n      opacity: 0;\n      width: 0;\n      height: 0;\n      }\n\n      /* IMAGE STYLES */\n      [type=radio] + img {\n      cursor: pointer;\n      }\n\n      /* CHECKED STYLES */\n      [type=radio]:checked + img {\n      outline: 4px solid #f00;\n      }\n      \n      .container {\n        position: relative;\n        text-align: center;\n        color: white;\n      }\n      /* Centered text */\n      .centered {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        font-size: 18px;\n      }    \n\n      #kultcss .window-content {    \n        background: #000000;\n      }     \n      #kultcss .dialog-button {\n        height: 40px;\n        background: #000000;\n        color: #ffffff;\n        justify-content: space-evenly;\n        align-items: center;\n        cursor: pointer;\n        border: none;    \n      }  \n      #kultcss header {\n        background: #000000;\n        border-radius: 0;    \n        border: none;    \n        margin-bottom: 2px;\n        font-size: .75rem;\n      }\n    </style>    \n    \n    <h2 style=\"text-align:center; color:white\">${supporter.name} will try to Test ${target.name}!</h2>\n    \n    <div class=\"divTable purpleHorizon\">\n    <div class=\"divTableBody\">\n    \n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <p>Supporter Skill (Choose)</p>\n        <select id=\"skillAttacker\" type=\"text\" style=\"width: 100px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\">\n          ${supporterSkillsList}\n        </select>      \n    </div>\n    </div>\n    \n    </div>\n    </div>    \n  `;\n  \n  new Dialog({\n    title: `Test - ${version}`,\n    content: template,\n    buttons: {\n      ok: {\n        label: \"Test!\",\n        callback: async (html) => {\n          testTarget(html);\n        },\n      },\n      cancel: {\n        label: \"Cancel\",\n      }\n    },\n    default: \"ok\"\n  }, { id: 'kultcss'}).render(true);\n}\n\nasync function testTarget(html) {\n  const skillSupporter = html.find(\"#skillAttacker\")[0].value;    \n  let supporterRolled;\n  let total;\n  let message;\n  let message_temp=``;\n  let word1 = 'Distracted';\n  let word2 = 'Vulnerable';\n  let word3 = 'Shaken';\n  if (coreRules) {\n    word1 = '@Compendium[swade-core-rules.swade-rules.vuud75GDkKL3NW10]{Distracted}';\n    word2 = '@Compendium[swade-core-rules.swade-rules.vuud75GDkKL3NW10]{Vulnerable}';\n    word3 = '@Compendium[swade-core-rules.swade-rules.30TJKevSbgxK6jQy]{Shaken}';\n  }\n  \n  if (coreRules) {\n      message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${coreRulesLink}</h2><div>`;\n  } else {\n     message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Push</h2>`;\n  }    \n\n  supporterRolled = await sm.rollSkill(supporter, skillSupporter);  \n  total = supporterRolled.total;\n\n  message += `<p><b style=\"color:darkblue\">${supporter.name}</b> is trying to test <b style=\"color:darkred\">${target.name}</b>.</p>`;  \n\n  message_temp += `<p><b style=\"color:darkred\">${target.name}</b> should roll <b style=\"color:red\">${total}</b> or higher.</p>`;  \n  message_temp += `<h3>Outcomes</h3>`;\n  message_temp += `<ul><li><b style=\"color:darkred\">${supporter.name}</b> succeeded: <b style=\"color:darkblue\">${supporter.name}</b> can add ${word1} or ${word2} to <b style=\"color:darkred\">${target.name}</b></li>`;\n  message_temp += `<li><b style=\"color:darkred\">${supporter.name}</b> raised: <b style=\"color:darkblue\">${supporter.name}</b> can add ${word1} or ${word2} to <b style=\"color:darkred\">${target.name}</b> and <b style=\"color:darkred\">${target.name}</b> is ${word3}.</li></ul>`;\n\n  \n  if ( sm.isCritical(supporterRolled) ) {\n    message += `<p><b style=\"color:darkblue\">${supporter.name}</b> rolled a <b style=\"color: red; font-size:150%\">Critical Failure!</b>!</p>`;\n  } else if ( total>=4 ) {\n    message += `<p><b style=\"color:darkblue\">${supporter.name}</b> rolled <b style=\"color: red;\">${total}</b>!</p>`;\n    message += message_temp;\n  } else {\n    message += `<p><b style=\"color:darkblue\">${supporter.name}</b> failed!</p>`;    \n  }\n\n  // send message1\n  let chatData = {\n    content: message\n  };  \n  ChatMessage.create(chatData, {});\n  \n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":{"id":"temp_iccf0fxdot","path":"Macros","color":"#ff0000"}}}
{"_id":"6CInQFu2d6s0s55b","name":"Size/Scale Calculator","type":"script","author":"tckKxzbezKvre3KI","img":"icons/tools/hand/scale-balances-merchant-brown.webp","scope":"global","command":"const version = 'v1.9';\nconst chatimage = \"icons/tools/hand/scale-balances-merchant-brown.webp\";\nconst debugFlag = false;\n\n/* Size Scale p106 SWADE\n\nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Savage%20Worlds/SizeScaleCalculator.js\nicon: icons/tools/hand/scale-balances-merchant-brown.webp\n    // v. 1.0.0 - Original code by brunocalado, modified by SalieriC#8263.\n*/\n\nlet tokenActor = canvas.tokens.controlled[0];\nlet tokenTarget = Array.from(game.user.targets)[0];\nlet coreRules = false;\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\nconst rules = '@Compendium[swade-core-rules.swade-rules.mbP0fwcquD98QtwX]{Size & Scale}';\n\nif (tokenActor === undefined || tokenTarget === undefined) {\n    ui.notifications.warn(\"You must select a token and target another one!\");\n} else {\n  const actorSwat = token.actor.data.items.find(function (item) {\n      return ((item.name.toLowerCase() === \"swat\") && item.type === \"ability\");\n  });\n  const targetSwat = tokenTarget.actor.data.items.find(function (item) {\n      return ((item.name.toLowerCase() === \"swat\") && item.type === \"ability\");\n  });\n  rollForIt();\n\n\n  function rollForIt() {\n      let actorSize = tokenActor.actor.data.data.stats.size;\n      let targetSize = tokenTarget.actor.data.data.stats.size;\n      let actorModifier = sizeToScaleModifier(actorSize);\n      let targetModifier = sizeToScaleModifier(targetSize);\n      let modifier = getToHitScaleModifier(actorSize, targetSize);\n\n      let message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Size & Scale Calculator</h2>`;\n      if (coreRules === true) {\n          message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${rules} Calculator</h2></div>`;\n      }\n      \n      message += `<ul><li><b>${tokenActor.name}:</b> Size = ${actorSize} / Modifier = ${actorModifier}</li>`;\n      message += `<li><b>${tokenTarget.name}:</b> Size = ${targetSize} / Modifier = ${targetModifier}</li></ul>`;\n      message += `<h3>Result:</h3>`;\n      if (modifier != 0) {\n        message += `<ul><li>${tokenActor.name} has <b style=\"color:red\">${modifier}</b> to attack ${tokenTarget.name}`;\n\n        if (actorSwat) {\n          message += ` and has Swat*.</li>`;\n        } else { message += `.</li>` }\n\n        message += `<li>${tokenTarget.name} has <b style=\"color:red\">${getToHitScaleModifier(targetSize, actorSize)}</b> to attack ${tokenActor.name}`;\n\n        if (targetSwat) {\n          message += ` and has Swat*.</li></ul>`;\n        } else { message += `.</li></ul>` }\n\n        if ((actorSwat && targetSwat) || (actorSwat || targetSwat)) {\n          if (coreRules === true) {\n            message += `<p>*<b>@Compendium[swade-core-rules.swade-rules.q5sk5hEw6TED0FOU]{Swat}:</b> Ignore up to 4 points of penalties from Scale for the specified action(s).</p>`;\n          } else {\n            message += `<p>*<b>Swat:</b> Ignore up to 4 points of penalties from Scale for the specified action(s).</p>`;\n          }\n        }\n      } else {\n        message += `<p><b>There is no modifier.</b> They have the same Scale.</p>`;\n      }\n\n      // send message\n      let chatData = {\n        content: message\n      };\n      ChatMessage.create(chatData, {});\n  }\n\n  function getToHitScaleModifier(actorSize, targetSize) { // Match from page 106 core\n    let actorScaleModifier = sizeToScaleModifier(actorSize);\n    let targetScaleModifier = sizeToScaleModifier(targetSize);\n    return targetScaleModifier - actorScaleModifier;\n  } \n/*\n  function sizeCalculator(actorSize, targetSize) { // Mach from page 106 core\n    let actorModifier = sizeToModifier(actorSize);\n    let targetModifier = sizeToModifier(targetSize);\n\n    let diff;\n    if (actorSize == targetSize) {\n      return 0;\n    } else {\n      // When creatures of different Scales attack each other, the smaller creature adds the difference between its Scale and its target to its attacks. A Tiny fairy (−6 Scale modifier), for example, adds +10 to hurl a bolt at a Huge dragon (+4).\n      if (actorSize < targetSize) {\n        diff = Math.abs(actorModifier) + Math.abs(targetModifier);\n        return diff;\n      // The larger creature subtracts the difference from its attacks. A Very Small eagle (−4) subtracts 2 from its Fighting totals when attacking a Tiny fairy (−6).\n      } else { // actorSize > targetSize\n        diff = Math.abs(actorModifier) - Math.abs(targetModifier);\n        return diff;\n      }\n    }\n  }\n*/\n  function sizeToScaleModifier(size) { //p179 swade core\n    if (size == -4) {\n        return -6;\n    } else if (size == -3) {\n        return -4;\n    } else if (size == -2) {\n        return -2;\n    } else if (size >= -1 && size <= 3) {\n        return 0;\n    } else if (size >= 4 && size <= 7) {\n        return 2;\n    } else if (size >= 8 && size <= 11) {\n        return 4;\n    } else if (size >= 12 && size <= 20) {\n        return 6;\n    } else {\n      ui.notifications.error(\"Size out of scale. Core p179\");\n    }\n  }\n\n}\n\nfunction debugSize() {\n  let actorSize;\n  let targetSize;\n  let output;\n  \n  console.log(\"===========================\");\n  console.log(\"Size/Scale Debug\");\n\n  // actorSize > targetSize\n  actorSize = -3; // Very Small eagle\n  targetSize = -4; // Tiny fairy\n  output = sizeCalculator(actorSize, targetSize);\n  console.log(\"Very Small eagle \" + actorSize + \" attacks Tiny fairy \" + targetSize + ': ' + output);\n\n  actorSize = 8; // Dragon\n  targetSize = 5; // White rhino\n  output = sizeCalculator(actorSize, targetSize);\n  console.log(\"Dragon \" + actorSize + \" attacks White rhino \" + targetSize + ': ' + output);\n   \n  // targetSize > actorSize\n  actorSize = -4; // Tiny fairy\n  targetSize = 8; // dragon\n  output = sizeCalculator(actorSize, targetSize);\n  console.log(\"Tiny fairy \" + actorSize + \" attacks dragon \" + targetSize + ': ' + output);\n\n  console.log(\"===========================\");  \n}\n\nif (debugFlag) {\n  debugSize();\n}\n\n\n/* delete this stuff\n      console.log('---------------');\n      console.log('actorModifier: ' + actorModifier);\n      console.log('targetModifier: ' + targetModifier);\n      console.log('actorSize: ' + actorSize);\n      console.log('targetSize: ' + targetSize);\n      console.log('diff: ' + diff);\n      console.log('---------------');     \n*/","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"cf":{"id":"temp_iccf0fxdot","path":"Macros","color":"#ff0000"},"combat-utility-belt":{"macroTrigger":""}}}
{"_id":"7mvonjdWYTxqAMVD","name":"3D Measure","type":"script","author":"tckKxzbezKvre3KI","img":"icons/tools/navigation/sextant-steel-blue.webp","scope":"global","command":"const version = '0.1';\nconst icon = 'icons/tools/navigation/sextant-steel-blue.webp';\n\n/* Medir distância v0.1 / Measure distance between two 3d coordinates\nHow to\n1 - Marque um token.\n2 - Selecione outro token\n3 - Execute a macro.\n*/\n\nfunction measureDistance(origin, target) {\n  const gs = canvas.dimensions.size;\n  const ray = new Ray(origin, target);\n\n  // How many squares do we travel across to get there? If 2.3, we should count that as 3 instead of 2; hence, Math.ceil\n  const nx = Math.ceil(Math.abs(ray.dx / gs));\n  const ny = Math.ceil(Math.abs(ray.dy / gs));\n\n  // Elevation\n  const gd = game.scenes.active.data.gridDistance;\n  const oz = origin.elevation ? origin.elevation : 0;\n  const tz = target.elevation ? target.elevation : 0;\n  const nz = Math.ceil(Math.abs(tz - oz) / gd);\n\n  // Let's order and rename nx, ny, nz so that A >= B >= C\n  let [A, B, C] = [nx, ny, nz].sort(function(a, b) { return b - a; });\n\n  // Get the total number of straight and diagonal moves\n  const nStraight = A - B;\n  const nDiagonal = B;\n  const n3dDiagonal = C;\n\n  // Get total distance\n  const distance =\n      nStraight                       // 1 each\n    + Math.floor(nDiagonal * 1.5)     // 1 then 2 then 1 then 2...\n    + Math.floor(n3dDiagonal * 0.5);  // 0 then 1 then 0 then 1...\n\n  // Convert distance to grid's dimensions\n  const distanceOnGrid = distance * canvas.dimensions.distance;\n  return distanceOnGrid;\n}\n\n/*\n * Measure distance between two tokens\n */\nfunction computeDistance(token, target)\n{\n  let tokenData = token.data;\n  let targetData = target.data;\n  const gs = canvas.dimensions.size;\n  const gd = game.scenes.active.data.gridDistance;\n\n  // Set search variables\n  var minDistance = 100000;\n  var minTokenSquare = {};\n  var minTargetSquare = {};\n  var tokenSquare = {};\n  var targetSquare = {};\n  var distance;\n\n  // Search for minimum distance\n  for (let toX = 0; toX < tokenData.width; ++toX) {\n    for (let toY = 0; toY < tokenData.height; ++toY) {\n      for (let toZ = 0; toZ < tokenData.width; ++toZ) {\n        for (let taX = 0; taX < targetData.width; ++taX) {\n          for (let taY = 0; taY < targetData.height; ++taY) {\n            for (let taZ = 0; taZ < targetData.width; ++taZ) {\n              tokenSquare = {\n                x: tokenData.x + toX * gs,\n                y: tokenData.y + toY * gs,\n                elevation: tokenData.elevation + toZ * gd,\n              };\n              targetSquare = {\n                x: targetData.x + taX * gs,\n                y: targetData.y + taY * gs,\n                elevation: targetData.elevation + taZ * gd,\n              }\n              distance = measureDistance(tokenSquare, targetSquare);\n              if (distance < minDistance) {\n                minDistance = distance;\n                minTokenSquare = tokenSquare;\n                minTargetSquare = targetSquare;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return minDistance;\n}\n\n/*\n * Measure distances between a token and a list of targets\n */\nfunction computeDistances(token, targets)\n{\n  return targets.map(function(target) {\n    return {\n      name: target.data.name,\n      distance: computeDistance(token, target),\n    };\n  });\n}\n\n/*\n * Print results to chat\n */\nfunction showResults(token, distances)\n{\n  let content = '';\n  message = `<h3><img style=\"vertical-align:middle\" src=${icon} width=\"28\" height=\"28\"> Distance From <b>${token.name}</b></h3>`;\n  \n  for(const d of distances) {\n    message += `<p><b>${d.name}</b>: <b style=\"color: red\">${d.distance}</b></p>`;\n  };    \n\n  ChatMessage.create({\n    content: message,\n    type: CONST.CHAT_MESSAGE_TYPES.OOC\n  });\n}\n\n/*\n * Run everything\n */\nfunction main() {\n  const selected = canvas.tokens.controlled;\n  if (selected.length === 0) {\n    ui.notifications.error(\"Please select at least one token\");\n    return;\n  }\n\n  const targets = Array.from(game.user.targets);\n  if (targets.length === 0) {\n    ui.notifications.error(\"Please select at least one target\");\n    return;\n  }\n\n  for (let token of selected) {\n    const distances = computeDistances(token, targets);\n    showResults(token, distances);\n  }\n}\n\nmain();","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":{"id":"temp_iccf0fxdot","path":"Macros","color":"#ff0000"}}}
{"_id":"CosgK0smgKHTUBua","name":"Active Effect Builder","type":"script","author":"tckKxzbezKvre3KI","img":"icons/magic/symbols/rune-sigil-green.webp","scope":"global","command":"/* AE Builder\n*/\n\nconst version = 'v1.0';\nconst icon = \"icons/magic/symbols/rune-sigil-green.webp\";\n\nif ( canvas.tokens.controlled[0]===undefined && Array.from(game.user.targets)[0]===undefined ) {\n  ui.notifications.error(\"Please, select or target a token.\"); // No Token is Selected\n} else {\n  main();\n}\n\nfunction main() {\n  \n  let dialogue_content = `\n    <form>\n      <div class=\"form-group\">\n        <label>Name:</label>\n        <input id=\"aename\" name=\"aename\" type=\"text\" value=\"effect 1\">\n      </div>    \n      <div class=\"form-group\">\n      \n        <label for=\"aeType\">Effect:</label>\n        <input list=\"aeTypes\" id=\"aeType\" name=\"aeType\">\n        <datalist id=\"aeTypes\">\n          <option value=\"data.stats.toughness.armor\">Armor</option>          \n          <option value=\"data.stats.size\">Size</option>\n          <option value=\"data.stats.speed.value\">Pace</option>\n          <option value=\"data.stats.parry.value\">Parry</option>\n          <option value=\"data.stats.toughness.value\">Toughness</option>\n          \n          <option value=\"data.status.isShaken\">Shaken</option>\n          <option value=\"data.status.isDistracted\">Distracted</option>\n          <option value=\"data.status.isVulnerable\">Vulnerable</option>\n          <option value=\"data.status.isStunned\">Stunned</option>\n          <option value=\"data.status.isEntangled\">Entangled</option>\n          <option value=\"data.status.isBound\">Bound</option>\n          \n        </datalist>  \n      </div>\n      <div class=\"form-group\">\n        <label>Value:</label>\n        <input id=\"aevalue\" name=\"aevalue\" type=\"text\" value=\"2\">\n      </div>   \n    </form>\n`;\n\n  let applyChanges = false;\n  let dialogButtons = {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply Changes`,\n      callback: (html) => {\n        applyActiveEffect(html);\n      }\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel Changes`\n    }   \n  }\n\n  // Main Dialogue    \n  new Dialog({\n    title: `Active Effect Builder - ${version}`,\n    content: dialogue_content,\n    buttons: dialogButtons,\n    default: \"yes\",\n  }).render(true);\n}\n\nasync function applyActiveEffect(html) {\n  let aename = html.find('[name=\"aename\"]')[0].value;\n  let aekey = html.find(\"#aeType\")[0].value;\n  let aevalue = html.find('[name=\"aevalue\"]')[0].value;\n  \n  let aemode = keyToMode(aekey);\n  aevalue = keyToValue(aekey, aevalue);\n\n  let myActiveEffect = {icon: icon, label: aename, changes: [\n    {key:aekey, value: aevalue, mode: aemode }\n  ]};\n\n  for (let tokenD of canvas.tokens.controlled) {\n    let activeEffectClass = getDocumentClass(\"ActiveEffect\");\n    const output = await activeEffectClass.create(myActiveEffect, {parent:tokenD.actor});\n  }\n\n  for (let tokenD of Array.from(game.user.targets)) {\n    let activeEffectClass = getDocumentClass(\"ActiveEffect\");\n    const output = await activeEffectClass.create(myActiveEffect, {parent:tokenD.actor});\n  }\n  \n}\n\nfunction keyToMode(mykey) {\n  let aeTypeAdd = ['data.stats.toughness.armor', 'data.stats.size', 'data.stats.speed.value', 'data.stats.parry.value', 'data.stats.toughness.value' ];\n  let aeTypeOverride = [ 'data.status.isShaken', 'data.status.isDistracted', 'data.status.isVulnerable', 'data.status.isStunned', 'data.status.isEntangled', 'data.status.isBound' ];\n\n  if ( aeTypeAdd.includes(mykey) ) {\n    return CONST.ACTIVE_EFFECT_MODES.ADD;\n  } else if ( aeTypeOverride.includes(mykey) ) {\n    return CONST.ACTIVE_EFFECT_MODES.OVERRIDE;\n  } else {\n    ui.notifications.error(\"Error\");\n  }  \n}\n\nfunction keyToValue(mykey, myvalue) {\n  let aeTypeAdd = ['data.stats.toughness.armor', 'data.stats.size', 'data.stats.speed.value', 'data.stats.parry.value', 'data.stats.toughness.value' ];\n  let aeTypeOverride = [ 'data.status.isShaken', 'data.status.isDistracted', 'data.status.isVulnerable', 'data.status.isStunned', 'data.status.isEntangled', 'data.status.isBound' ];\n\n  if ( aeTypeAdd.includes(mykey) ) {\n    return myvalue;\n  } else if ( aeTypeOverride.includes(mykey) ) {\n    return true;\n  } else {\n    ui.notifications.error(\"Error\");\n  }  \n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.75l7UQ8ICvV0DoJV"},"cf":{"id":"temp_iccf0fxdot","path":"Macros","color":"#ff0000"}}}
{"_id":"Enp2bPCK5MnCGOK1","name":"Mass Battle","type":"script","author":"tckKxzbezKvre3KI","img":"icons/environment/people/charge.webp","scope":"global","command":"const version = 'v1.4';\nconst chatimage = \"icons/environment/people/charge.webp\";\nlet coreRules = false;\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\n\n/* Mass Battle p133 SWADE\n\nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Savage%20Worlds/MassBattle.js\nicon: icons/environment/people/charge.webp\n*/\n\nmain();\n\nfunction main() {  \n  let template = `  \n    <style type=\"text/css\">\n      div.purpleHorizon {\n        border: 4px solid #ff0000;\n        background-color: #000000;\n        width: 100%;\n        text-align: center;\n        border-collapse: collapse;\n      }\n      .divTable.purpleHorizon .divTableCell, .divTable.purpleHorizon .divTableHead {\n        border: 0px solid #550000;\n        padding: 5px 2px;\n      }\n      .divTable.purpleHorizon .divTableBody .divTableCell {\n        font-size: 13px;\n        font-weight: bold;\n        color: #FFFFFF;\n      }\n      \n      .divTable{ display: table; }\n      .divTableRow { display: table-row; }\n      .divTableHeading { display: table-header-group;}\n      .divTableCell, .divTableHead { display: table-cell;}\n      .divTableHeading { display: table-header-group;}\n      .divTableFoot { display: table-footer-group;}\n      .divTableBody { display: table-row-group;}\n\n      /* HIDE RADIO */\n      [type=radio] { \n      position: absolute;\n      opacity: 0;\n      width: 0;\n      height: 0;\n      }\n\n      /* IMAGE STYLES */\n      [type=radio] + img {\n      cursor: pointer;\n      }\n\n      /* CHECKED STYLES */\n      [type=radio]:checked + img {\n      outline: 4px solid #f00;\n      }\n      \n      .container {\n        position: relative;\n        text-align: center;\n        color: white;\n      }\n      /* Centered text */\n      .centered {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        font-size: 18px;\n      }    \n\n      #kultcss .window-content {    \n        background: #000000;\n      }     \n      #kultcss .dialog-button {\n        height: 40px;\n        background: #000000;\n        color: #ffffff;\n        justify-content: space-evenly;\n        align-items: center;\n        cursor: pointer;\n        border: none;    \n      }  \n      #kultcss header {\n        background: #000000;\n        border-radius: 0;    \n        border: none;    \n        margin-bottom: 2px;\n        font-size: .75rem;\n      }\n    </style>    \n    \n    <h1 style=\"color:white\">Force 1</h1>\n    <div class=\"divTable purpleHorizon\">\n    <div class=\"divTableBody\">\n    \n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <p>Name</p>\n        <input id=\"name1\" type=\"text\" max=\"20\" style=\"width: 100px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=\"Force1\">    \n    </div>\n    <div class=\"divTableCell\">      \n      <label>        \n        <div class=\"container\">\n          <p>Force</p>\n        <input id=\"force1\" type=\"number\" min=\"10\" max=\"10\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=10>\n        </div>\n      </label>      \n    </div>    \n    <div class=\"divTableCell\">\n        <p>Die</p>\n        <select id=\"commanderdie1\" type=\"text\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\">\n        <option value=\"1d4x\">1d4x</option>\n        <option value=\"1d6x\">1d6x</option>\n        <option value=\"1d8x\" selected=\"selected\">1d8x</option>\n        <option value=\"1d10x\">1d10x</option>\n        <option value=\"1d12x\">1d12x</option>\n        </select>\n    </div>\n    <div class=\"divTableCell\">\n        <p>Bonus</p>\n        <input id=\"commanderbonus1\" type=\"text\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=\"3\">       \n    </div>       \n    </div>\n\n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <p>Advantage</p>\n        <input id=\"tacticaladvantage1\" type=\"number\" min=\"0\" max=\"4\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=0>       \n    </div>\n    <div class=\"divTableCell\">      \n      <p>Plan</p>\n      <input id=\"battleplan1\" type=\"number\" min=\"0\" max=\"4\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=0>       \n    </div>    \n    <div class=\"divTableCell\">\n        <p>Players Bonus</p>\n        <input id=\"playersbonus1\" type=\"number\" min=\"-20\" max=\"20\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=0>       \n    </div>\n    <div class=\"divTableCell\">\n        <p>Is Wild?</p>\n        <input id=\"wildcard1\" type=\"checkbox\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" checked>       \n    </div>    \n    </div>\n    \n    </div>\n    </div>\n    \n\n    <h1 style=\"color:white\">Force 2</h1>\n    <div class=\"divTable purpleHorizon\">\n    <div class=\"divTableBody\">\n    \n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <p>Name</p>\n        <input id=\"name2\" type=\"text\" max=\"20\" style=\"width: 100px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=\"Force2\">    \n    </div>\n    <div class=\"divTableCell\">      \n      <label>        \n        <div class=\"container\">\n          <p>Force</p>\n        <input id=\"force2\" type=\"number\" min=\"10\" max=\"10\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=7>\n        </div>\n      </label>      \n    </div>   \n    <div class=\"divTableCell\">\n        <p>Die</p>\n        <select id=\"commanderdie2\" type=\"text\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\">\n        <option value=\"1d4x\">1d4x</option>\n        <option value=\"1d6x\">1d6x</option>\n        <option value=\"1d8x\" selected=\"selected\">1d8x</option>\n        <option value=\"1d10x\">1d10x</option>\n        <option value=\"1d12x\">1d12x</option>\n        </select>\n    </div>\n    <div class=\"divTableCell\">\n        <p>Bonus</p>\n        <input id=\"commanderbonus2\" type=\"text\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=\"3\">       \n    </div>    \n    </div>\n\n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <p>Advantage</p>\n        <input id=\"tacticaladvantage2\" type=\"number\" min=\"0\" max=\"4\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=0>       \n    </div>\n    <div class=\"divTableCell\">      \n      <label>        \n        <div class=\"container\">\n          <p>Plan</p>\n        <input id=\"battleplan2\" type=\"number\" min=\"0\" max=\"4\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=0>       \n        </div>\n      </label>      \n    </div>    \n    <div class=\"divTableCell\">\n        <p>Players Bonus</p>\n        <input id=\"playersbonus2\" type=\"number\" min=\"-20\" max=\"20\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=0>       \n    </div>\n    <div class=\"divTableCell\">\n        <p>Is Wild?</p>\n        <input id=\"wildcard2\" type=\"checkbox\" style=\"width: 60px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" checked>       \n    </div>      \n    </div>\n    \n    </div>\n    </div>\n    \n  `;\n  \n  new Dialog({\n    title: `Mass Battle - ${version}`,\n    content: template,\n    buttons: {\n      ok: {\n        label: \"Battle!\",\n        callback: async (html) => {\n          massbattle(html);\n        },\n      },\n      cancel: {\n        label: \"Cancel\",\n      }\n    },\n    default: \"ok\"\n  }, { id: 'kultcss'}).render(true);\n}\n\nasync function massbattle(html){\n  // FORCE 1\n  const name1 =  html.find(\"#name1\")[0].value;    \n  const force1 = parseInt( html.find(\"#force1\")[0].value );    \n  const commanderdie1 = html.find(\"#commanderdie1\")[0].value;  \n  const commanderbonus1 = html.find(\"#commanderbonus1\")[0].value;    \n  const tacticaladvantage1 =  parseInt( html.find(\"#tacticaladvantage1\")[0].value );    \n  const battleplan1 = parseInt( html.find(\"#battleplan1\")[0].value );    \n  const playersbonus1 = parseInt( html.find(\"#playersbonus1\")[0].value );  \n  const wildcard1 = html.find(\"#wildcard1\")[0].checked;\n  //const stackupcards = html.find(\"#stackupcards\")[0].checked;\n\n  // FORCE 2\n  const name2 =  html.find(\"#name2\")[0].value;    \n  const force2 = parseInt( html.find(\"#force2\")[0].value );    \n  const commanderdie2 = html.find(\"#commanderdie2\")[0].value;  \n  const commanderbonus2 = html.find(\"#commanderbonus2\")[0].value;    \n  const tacticaladvantage2 =  parseInt( html.find(\"#tacticaladvantage2\")[0].value );    \n  const battleplan2 = parseInt( html.find(\"#battleplan2\")[0].value );    \n  const playersbonus2 = parseInt( html.find(\"#playersbonus2\")[0].value ); \n  const wildcard2 = html.find(\"#wildcard2\")[0].checked;\n\n  // \n  let commander1DiceExpression;\n  if (wildcard1) {\n    commander1DiceExpression = '{' + commanderdie1 + '+' + commanderbonus1 + ', 1d6x+' + commanderbonus1 + '}';\n  } else {\n    commander1DiceExpression = commanderdie1 + '+' + commanderbonus1;\n  }  \n  if (wildcard2) {\n    commander2DiceExpression = '{' + commanderdie2 + '+' + commanderbonus2 + ', 1d6x+' + commanderbonus2 + '}';\n  } else {\n    commander2DiceExpression = commanderdie2 + '+' + commanderbonus2;\n  }  \n  \n  let commander1Dice = await new Roll(commander1DiceExpression).roll({ async : false });  \n  let commanderRolled1;\n  if (wildcard1) {\n    commanderRolled1 = Math.max( commander1Dice.terms[0].rolls[0].total,  commander1Dice.terms[0].rolls[1].total );\n  } else {\n    commanderRolled1 = commander1Dice.total;\n  }\n  \n  let commander2Dice = new Roll(commander2DiceExpression).roll({ async : false });  \n  let commanderRolled2;\n  if (wildcard2) {\n    commanderRolled2 = Math.max( commander2Dice.terms[0].rolls[0].total,  commander2Dice.terms[0].rolls[1].total );\n  } else {\n    commanderRolled2 = commander2Dice.total;\n  }\n  let result1=0;\n  let result2=0;\n  \n  let message;\n  if (coreRules) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> @Compendium[swade-core-rules.swade-rules.IJkWxV4kddDaU0Gl]{ Mass Battles}</h2></div>`;\n  } else {\n    message = `<div><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Mass Battle</h2><div>`;\n  }\n  \n  let forceMessage1;\n  let forceMessage2;\n  if (force1>force2) {\n    result1 += forceBonus(force1, force2);\n    forceMessage1 = `<li><b>Force Size:</b> ${force1} <b style=\"color:red\">(+${forceBonus(force1, force2)})</b></li>`;\n    forceMessage2 = `<li><b>Force Size:</b> ${force2} <b style=\"color:red\">(+0)</b></li>`;\n  } else {\n    result2 += forceBonus(force1, force2);\n    forceMessage2 = `<li><b>Force Size:</b> ${force2} <b style=\"color:red\">(+${forceBonus(force1, force2)})</b></li>`;\n    forceMessage1 = `<li><b>Force Size:</b> ${force1} <b style=\"color:red\">(+0)</b></li>`;    \n  }\n  result1 += tacticaladvantage1;\n  result2 += tacticaladvantage2;\n  result1 += battleplan1;\n  result2 += battleplan2;\n  result1 += playersbonus1;\n  result2 += playersbonus2;\n  result1 += commanderRolled1;\n  result2 += commanderRolled2;\n  \n  if (wildcard1) {\n    message += `<h2>(Wild Card) ${name1}</h2>`;\n  } else {\n    message += `<h2>${name1}</h2>`;\n  }\n   \n  message += `<ul>\n  <li><b style=\"color:red\">Total:</b> ${result1}</li>\n  <li><b>Commander Roll:</b> ${commanderRolled1}</li>\n  ${forceMessage1}\n  <li><b>Tactical Advantage:</b> ${tacticaladvantage1}</li>\n  <li><b>Battle Plan:</b> ${battleplan1}</li>\n  <li><b>Players Bonus:</b> ${playersbonus1}</li>\n  </ul>`;\n  \n  if (wildcard2) {\n    message += `<h2>(Wild Card) ${name2}</h2>`;\n  } else {\n    message += `<h2>${name2}</h2>`;\n  }\n  message += `<ul>\n  <li><b style=\"color:red\">Total:</b> ${result2}</li>\n  <li><b>Commander Roll:</b> ${commanderRolled2}</li>\n  ${forceMessage2}\n  <li><b>Tactical Advantage:</b> ${tacticaladvantage2}</li>\n  <li><b>Battle Plan:</b> ${battleplan2}</li>\n  <li><b>Players Bonus:</b> ${playersbonus2}</li>\n  </ul>`;\n  \n  message += winnerCheck(result1, result2, name1, name2, force1, force2);\n\n  let chatData = {\n    content: message,\n    whisper : ChatMessage.getWhisperRecipients(\"GM\")\n  };  \n  ChatMessage.create(chatData, {});  \n  \n  commander1Dice.toMessage({flavor: `${name1}`, whisper : ChatMessage.getWhisperRecipients(\"GM\") });\n  commander2Dice.toMessage({flavor: `${name2}`, whisper : ChatMessage.getWhisperRecipients(\"GM\") });\n}\n\nfunction forceBonus(force1, force2) {\n  if (force1>force2) {\n    return (force1-force2)\n  } else if (force2>force1) {\n    return (force2-force1)\n  } else {\n    return 0;\n  }\n}\n\nfunction winnerCheck(result1, result2, name1, name2, force1, force2) {\n  let message = `<h2 style=\"color:red\">Result</h2>`;\n  let force1after = force1;\n  let force2after = force2;\n  if (result1>result2) {\n    if ( (result1+4)>=result2 ) { // raise\n      message += `<p><b>Victory:</b> The defeated army loses two Force Tokens.</p>`;        \n      force2after -= 2; \n    } else {\n      message += `<p><b>Marginal Victory:</b> The victor loses one Force Token, the defeated loses two.</p>`;        \n      force2after -= 2; \n      force1after -= 1;          \n    }    \n    message += `<ul><li>Winner: <b>${name1}</b></li>`;\n    message += `<li>Loser: <b>${name2}</b></li>`;         \n  } else if (result2>result1) {\n    if ( (result2+4)>=result1 ) { // raise\n      message += `<p><b>Victory:</b> The defeated army loses two Force Tokens.</p>`;        \n      force1after -= 2; \n    } else {\n      message += `<p><b>Marginal Victory:</b> The victor loses one Force Token, the defeated loses two.</p>`;        \n      force1after -= 2; \n      force2after -= 1;          \n    }\n    message += `<ul><li>Winner: <b>${name2}</b></li>`;\n    message += `<li>Loser: <b>${name1}</b></li>`;    \n  } else {\n    message += `<p><b>Draw:</b> Both sides lose one Force Token.</p>`;    \n    force1after -= 1; \n    force2after -= 1;\n    message += `<ul><li>The <b>${name1}</b> and <b>${name2}</b> are tied.</li>`;    \n  }\n\n  message += `<li><b>${name1}:</b> has ${force1after} force tokens</li>`;\n  message += `<li><b>${name2}:</b> has ${force2after} force tokens</li></ul>`;\n  \n  message += `<h2 style=\"color:darkblue\">Morale</h2><ul>`;\n  if ( (force1-force1after)>0 ) {\n    message += `<li>-${force1-force1after}: for <b>${name1}</b> spirit roll</li>`;\n  }\n  if ( (force2-force2after)>0 ) {\n    message += `<li>-${force2-force2after}: for <b>${name2}</b> spirit roll</li>`;\n  }\n  message += `<li>+2: The army is made up mostly of undead or other fearless troops.</li>`;\n  message += `<li>+2: The army is within fortifications or prepared positions.</li>`;\n  message += `<li>+2: The army cannot retreat or will be killed if it does.</li></ul>`;\n\n  return message;\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":{"id":"temp_iccf0fxdot","path":"Macros","color":"#ff0000"}}}
{"_id":"FRhH6lKHaWDR2JVF","name":"Player Macro Manager","type":"script","author":"tckKxzbezKvre3KI","img":"icons/sundries/documents/document-writing-pink.webp","scope":"global","command":"const version = '0.7';\n\n/*\n  GM Menu\n  \n  icons: icons/sundries/documents/document-writing-pink.webp\n  \n  Fill the constant macros with the names of your macros, when you click the button it will run the macro.\n\n  Dialog Window will not close until the X button is pressed.\n*/\nconst managerType = 'Player - Macro Manager';\n\n(()=>{\n  const macros = [\n    \"Unshaken\",\n    \"Unstun\",\n    \"Fear Table\",\n    \"Gang Up\",\n    \"Healing\",\n    \"Raise Calculator\",\n    \"Size/Scale Calculator\",\n    \"Support\",\n    \"Survival Guide\",\n    \"Power Point Management\",\n    \"Test\"\n  ];\n\n  let buttons = {}, dialog, content = `<div sytle=\"width:100%;text-align:center;><h2>Choose Macro</h2></div>`;\n  \n  macros.forEach((str)=> {\n    let macro = game.macros.getName(str);\n    if(!macro) return;\n\n    buttons[str] = {\n      label : `\n        <div style=\"display:flex;flex-direction:row;justify-content:center;align-items:center;width\">\n          <div style=\"display:flex;justify-content:left;flex-grow:1;\"><img src=\"${macro.data.img}\" width=\"25\" height=\"25\" style=\"background-color:#5c5c5c;\"/></div>\n          <div style=\"display:flex;justify-content:left;flex-grow:4\"><label>${str}</label></div>\n        </div>`,\n      callback : () => {\n        game.macros.getName(str).execute();\n        //dialog.render(true);\n      }\n    }\n  });\n  dialog = new Dialog({title : `${managerType}`,content, buttons}).render(true);\n})();","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":{"id":"temp_iccf0fxdot","path":"Macros","color":"#ff0000"}}}
{"_id":"Ms4sUcEz3jW2qtUW","name":"Unshaken","type":"script","author":"tckKxzbezKvre3KI","img":"icons/magic/control/fear-fright-white.webp","scope":"global","command":"const version = 'v1.4';\n\n/* Unshaken\n\nsource: \nicon: icons/magic/control/fear-fright-white.webp\n*/\nconst chatimage = \"icons/magic/control/fear-fright-white.webp\";\nlet coreRules = false;\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\nconst coreRulesLink = '@Compendium[swade-core-rules.swade-rules.30TJKevSbgxK6jQy]{Shaken}';\nlet tokenD=canvas.tokens.controlled[0];\n\nif (tokenD===undefined) {\n  ui.notifications.error(\"Please select a token.\"); // No Token is Selected\n} else {\n  tokenD = canvas.tokens.controlled[0];\n  main();\n}\n\nasync function main() {\n  if (tokenD.actor.data.data.status.isShaken === true) {\n    rollUnshake();\n  } else if (tokenD) {\n    await tokenD.actor.update({ \"data.status.isShaken\": true });\n    ChatMessage.create({\n      user: game.user.id,      \n      content: `<p><b style=\"color:red\">${tokenD.name}</b> is Shaken now!</p>`,\n    });        \n  }\n}\n\nasync function rollUnshake() {\n  const edgeNames = ['combat reflexes', 'demon', 'undead', 'construct', 'undead (harrowed)'];\n  let message = ``;\n  let rolled = await tokenD.actor.rollAttribute('spirit');    // ROLL SPIRIT AND CHECK COMBAT REFLEXES\n  \n  const edges = tokenD.actor.data.items.filter(function (item) {\n    return edgeNames.includes(item.name.toLowerCase()) && (item.type === \"edge\" || item.type === \"ability\");\n  });\n  \n  let rollWithEdge = rolled.total;\n  let edgeText = \"\";\n  for (let edge of edges) {\n    rollWithEdge += 2;\n    edgeText += `<br/><i>+ ${edge.name}</i>`;\n  }\n\n  if (coreRules) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${coreRulesLink}</h2></div>`;\n  } else {\n    message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Shaken</h2>`;\n  }\n\n  message += `${tokenD.name} rolled <b style=\"color:blue\"> ${rollWithEdge} </b>`;\n  \n  // Checking for a Critical Failure.\n  if ( sm.isCritical(rolled) ) {\n    ui.notifications.notify(\"You've rolled a Critical Failure!\");\n    message += `<b>${tokenD.name}</b> rolled a <b style=\"color: red; font-size:150%\">Critical Failure!</b>!`;    \n  } else {\n    if (rollWithEdge <= 3) {\n      message += ` and remains Shaken.`;\n      sm.useBenny(tokenD);\n    } else if (rollWithEdge >= 4) {\n      message += `, is no longer Shaken and may act normally.`;\n      await tokenD.actor.update({ \"data.status.isShaken\": false });\n    }\n    message += ` ${edgeText}`;\n  }\n  ChatMessage.create({ content: message });\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.xwvNVeOMp5PjtWaK"},"cf":{"id":"temp_iccf0fxdot","path":"Macros","color":"#ff0000"}}}
{"_id":"XRYElywBM6F0FNQL","name":"Support","type":"script","author":"tckKxzbezKvre3KI","img":"icons/skills/social/diplomacy-unity-alliance.webp","scope":"global","command":"const version = 'v1.3';\nconst chatimage = \"icons/skills/social/diplomacy-unity-alliance.webp\";\nlet coreRules = false;\nconst coreRulesLink = '@Compendium[swade-core-rules.swade-rules.TFR8EmfT9ci1gBEy]{Support}';\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\n\n/* Support p104 SWADE core\nIMPORTANT\n- \n\nTODO\n- \nsource: \nicon: icons/skills/social/diplomacy-unity-alliance.webp\n*/\n\n/*\n- list target skills\n- search the same skill\n- roll\n- report outcome\n*/\n\n\n// Requires at least 1 target\nlet supporter;\nlet target;    \nif (canvas.tokens.controlled[0]===undefined || Array.from(game.user.targets)[0]===undefined){\n  ui.notifications.warn(\"You must select a token and target another one!\");    \n} else {\n  supporter=canvas.tokens.controlled[0];\n  target=Array.from(game.user.targets)[0];    \n  main();\n}\n\nfunction main() {  \n\n  let supporterSkills = sm.listSkills(supporter);\n\n  let supporterSkillsList = ``;\n  supporterSkills.map((t) => {\n    supporterSkillsList += `<option value=\"${t}\">${t}</option>`;\n  });\n\n  let template = `  \n    <style type=\"text/css\">\n      div.purpleHorizon {\n        border: 4px solid #ff0000;\n        background-color: #000000;\n        width: 100%;\n        text-align: center;\n        border-collapse: collapse;\n      }\n      .divTable.purpleHorizon .divTableCell, .divTable.purpleHorizon .divTableHead {\n        border: 0px solid #550000;\n        padding: 5px 2px;\n      }\n      .divTable.purpleHorizon .divTableBody .divTableCell {\n        font-size: 13px;\n        font-weight: bold;\n        color: #FFFFFF;\n      }\n      \n      .divTable{ display: table; }\n      .divTableRow { display: table-row; }\n      .divTableHeading { display: table-header-group;}\n      .divTableCell, .divTableHead { display: table-cell;}\n      .divTableHeading { display: table-header-group;}\n      .divTableFoot { display: table-footer-group;}\n      .divTableBody { display: table-row-group;}\n\n      /* HIDE RADIO */\n      [type=radio] { \n      position: absolute;\n      opacity: 0;\n      width: 0;\n      height: 0;\n      }\n\n      /* IMAGE STYLES */\n      [type=radio] + img {\n      cursor: pointer;\n      }\n\n      /* CHECKED STYLES */\n      [type=radio]:checked + img {\n      outline: 4px solid #f00;\n      }\n      \n      .container {\n        position: relative;\n        text-align: center;\n        color: white;\n      }\n      /* Centered text */\n      .centered {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        font-size: 18px;\n      }    \n\n      #kultcss .window-content {    \n        background: #000000;\n      }     \n      #kultcss .dialog-button {\n        height: 40px;\n        background: #000000;\n        color: #ffffff;\n        justify-content: space-evenly;\n        align-items: center;\n        cursor: pointer;\n        border: none;    \n      }  \n      #kultcss header {\n        background: #000000;\n        border-radius: 0;    \n        border: none;    \n        margin-bottom: 2px;\n        font-size: .75rem;\n      }\n    </style>    \n    \n    <h2 style=\"text-align:center; color:white\">${supporter.name} will try to Support ${target.name}.</h2>\n    \n    <div class=\"divTable purpleHorizon\">\n    <div class=\"divTableBody\">\n    \n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <p>Supporter Skill (Choose)</p>\n        <select id=\"skillAttacker\" type=\"text\" style=\"width: 100px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\">\n          ${supporterSkillsList}\n        </select>      \n    </div>\n    </div>\n    \n    </div>\n    </div>    \n  `;\n  \n  new Dialog({\n    title: `Support - ${version}`,\n    content: template,\n    buttons: {\n      ok: {\n        label: \"Support!\",\n        callback: async (html) => {\n          support(html);\n        },\n      },\n      cancel: {\n        label: \"Cancel\",\n      }\n    },\n    default: \"ok\"\n  }, { id: 'kultcss'}).render(true);\n}\n\nasync function support(html) {\n  const skillSupporter = html.find(\"#skillAttacker\")[0].value;    \n  let supporterRolled;\n  let total;\n  let message;\n  let modifier = 0;\n  \n  if (coreRules) {\n      message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${coreRulesLink}</h2><div>`;\n  } else {\n     message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Push</h2>`;\n  }    \n\n  supporterRolled = await sm.rollSkill(supporter, skillSupporter);  \n  total = supporterRolled.total;\n\n  message += `<p><b style=\"color:darkblue\">${supporter.name}</b> is trying to support <b style=\"color:darkred\">${target.name}</b>.</p>`;  \n  \n  if ( sm.isCritical(supporterRolled) ) {\n    message += `<p><b style=\"color:darkblue\">${supporter.name}</b> rolled a <b style=\"color: red; font-size:150%\">Critical Failure!</b>!</p>`;\n    modifier = -2;\n    message += `<p><b style=\"color:darkred\">${target.name}</b> should roll with <b style=\"color:red\">${modifier}</b>.</p>`;;\n  } else if ( total>=4 && total<8 ) {\n    message += `<p><b style=\"color:darkblue\">${supporter.name}</b> rolled <b style=\"color: red;\">${total}</b>!</p>`;\n    modifier = 1;\n    message += `<p><b style=\"color:darkred\">${target.name}</b> should roll with <b style=\"color:red\">${modifier}</b>.</p>`;;\n  } else if ( total>=8 ) {\n    message += `<p><b style=\"color:darkblue\">${supporter.name}</b> rolled <b style=\"color: red;\">${total}</b>!</p>`;\n    modifier = 2;\n    message += `<p><b style=\"color:darkred\">${target.name}</b> should roll with <b style=\"color:red\">${modifier}</b>.</p>`;;\n  } else {\n    message += `<p><b style=\"color:darkblue\">${supporter.name}</b> rolled <b style=\"color: red;\">${total}</b>!</p>`;\n    message += `<p><b style=\"color:darkblue\">${supporter.name}</b> failed!</p>`;    \n  }\n\n  \n\n  // send message1\n  let chatData = {\n    content: message\n  };  \n  ChatMessage.create(chatData, {});  \n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":{"id":"temp_iccf0fxdot","path":"Macros","color":"#ff0000"}}}
{"_id":"aX2owfn0jOBIpSdI","name":"#[CF_tempEntity]","type":"chat","author":"tckKxzbezKvre3KI","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"cf":{"id":"temp_iccf0fxdot","path":"Macros","color":"#ff0000","name":"Macros","children":["7mvonjdWYTxqAMVD","wTKmjh0VbDLH8amT","cgEFd8i6cRKH616L","cDKiXCsaOlsDVvC0","cbOOezTOQmWbGJww","loLcMEkmQmhqJw5S","gaplx9QDL58aYBRL","0USlmX9tiE85iJe0","MT3ZByXg7C0IRJtL","28yrde5JhqMaEbHb","4QtCeDOxcJZkms5N","Enp2bPCK5MnCGOK1","mpqzwwN1oWD4Qyjn","FRhH6lKHaWDR2JVF","f3e6vqeEc7lZ6v8V","so4bl3hD9cDELmqm","bNtNIenZqEIFUnaX","6CInQFu2d6s0s55b","XRYElywBM6F0FNQL","f1R8G7lU13HOYIyg","Ms4sUcEz3jW2qtUW","ul6XwVgyt7vUfZ3R","sIQtJo2qv1Q0GqOt","yNOMIUyOO4UCAoC4","CosgK0smgKHTUBua","4kPqkrZakBope3Sv"],"folderPath":[]}}}
{"_id":"bNtNIenZqEIFUnaX","name":"Raise Calculator","type":"script","author":"tckKxzbezKvre3KI","img":"icons/skills/movement/arrow-upward-yellow.webp","scope":"global","command":"const iconSize = 45;\nconst icon = 'icons/skills/movement/arrow-upward-yellow.webp';\nconst failureIcon = 'icons/magic/death/bones-crossed-orange.webp';\nconst successIcon = 'icons/skills/social/trading-justice-scale-yellow.webp';\nconst raisesIcon = 'icons/skills/social/peace-luck-insult.webp';\nconst text = `<div>\n  <img style=\"vertical-align:middle\" src=\"${icon}\" alt=\"\" width=\"${iconSize}\" height=\"${iconSize}\" /> \n  <span>Raises will show here once you leave the Result field.</span>\n</div>`;  \n\n\nnew Dialog({\n  title: 'Raise Calculator',\n  content: `\n    <style type=\"text/css\">\n    .tg  {border-collapse:collapse;border-spacing:0;height:200px;}\n    .tg td{border-color:black;border-style:solid;border-width:0px; width:60px;\n      overflow:hidden;padding:10px 5px;word-break:normal;}\n    .tg th{border-color:black;border-style:solid;border-width:0px;\n      font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n    .tg .tg-xwyw{border-color:#000000;text-align:center;vertical-align:middle}\n    </style>\n\n    <form>\n\n    <table class=\"tg\">\n    <tbody>\n      <tr>\n        <td class=\"tg-xwyw\">\n          <b style=\"font-size:20px\">Target Number</b>\n        </td>\n        <td class=\"tg-xwyw\">\n          <b style=\"font-size:20px\">Result</b>\n        </td>\n      </tr>\n      <tr>\n        <td class=\"tg-xwyw\">\n          <div class=\"form-group\">\n            <input name=\"target\" type=\"number\" min=\"0\" max=\"200\" value=4 autofocus onClick=\"this.select();\" style=\"width: 50px;\"/>\n          </div>                  \n        </td>\n        <td class=\"tg-xwyw\">\n          <div class=\"form-group\"> \n            <input name=\"result\" type=\"number\" min=\"0\" max=\"200\" onClick=\"this.select();\" style=\"width: 50px;\"/>\n          </div>        \n        </td>\n      </tr>\n      <tr>\n        <td colspan=\"2\">\n          <div class=\"calculation\">${text}</div>\n        </td>\n      </tr>\n    </tbody>\n    </table>\n\n    </form>`,\n  buttons: {},\n  render: ([dialogContent]) => {\n    \n    dialogContent.querySelector(`input[name=\"target\"`).focus();\n    dialogContent.querySelector(`input[name=\"result\"`).addEventListener(\"input\", (event) => {\n        const textInput = event.target;\n        const form = textInput.closest(\"form\")\n        const calcResult = form.querySelector(\".calculation\");\n        const target = form.querySelector('input[name=\"target\"]').value;\n        const result = form.querySelector('input[name=\"result\"]').value;\n        let raises = Math.floor((parseInt(result) - parseInt(target)) / 4);\n        let tmpIcon;\n        \n        if (parseInt(target) > parseInt(result)) {\n          tmpIcon = failureIcon;\n          calcResult.innerHTML = `<div>\n          <img style=\"vertical-align:middle\" src=\"${tmpIcon}\" alt=\"\" width=\"${iconSize}\" height=\"${iconSize}\" /> \n          <span style=\"font-size:20px\"><b>Failure</b></span>\n          </div>`;\n        }\n        else if (parseInt(target) <= parseInt(result) && raises < 1) {\n          tmpIcon = successIcon;\n          calcResult.innerHTML = `<div>\n          <img style=\"vertical-align:middle\" src=\"${tmpIcon}\" alt=\"\" width=\"${iconSize}\" height=\"${iconSize}\" /> \n          <span style=\"font-size:20px\"><b>Success</b></span>\n          </div>`;          \n        }\n        else {\n          tmpIcon = raisesIcon;\n          calcResult.innerHTML = `<div>\n          <img style=\"vertical-align:middle\" src=\"${tmpIcon}\" alt=\"\" width=\"${iconSize}\" height=\"${iconSize}\" /> \n          <span style=\"font-size:20px\"><b>${raises} Raise(s)</b></span>\n          </div>`;      \n        }\n        \n      });\n      \n  },\n}).render(true);","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.onkkfY2zBddVpiLr"},"cf":{"id":"temp_iccf0fxdot","path":"Macros","color":"#ff0000"}}}
{"_id":"cDKiXCsaOlsDVvC0","name":"Deviation","type":"script","author":"tckKxzbezKvre3KI","img":"icons/weapons/thrown/dynamite-simple-brown.webp","scope":"global","command":"const version = 'v1.1';\nconst chatimage = \"https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Savage%20Worlds/icons/clock.webp\";\n\n/* Deviation p99 SWADE\nIf a blast template misses, it deviates 1d6″\nfor thrown weapons (such as grenades) and\n2d6″ for fired projectiles. Multiply by 2 if the\nattack was made at Medium Range, 3 if Long,\nand 4 for Extreme.\n\nNext roll a d12 and read it like a clock\nfacing to determine the direction the missile\ndeviates. A weapon can never deviate more\nthan half the distance to the original target\n(that keeps it from going behind the thrower).\n\nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Savage%20Worlds/Deviation.js\nicon: icons/weapons/thrown/dynamite-simple-brown.webp\n*/\n\nlet coreRules = false;\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\nconst chaticon = 'icons/weapons/thrown/dynamite-simple-brown.webp';\n\ngetRequirements();\n\nfunction getRequirements() {\n  let template = `\n  <h2>Weapon Type</h2>\n  <table style=\"width:100%\">\n  <tr>\n    <td><input type=\"radio\" id=\"thrown\" name=\"weapontype\" value=\"thrown\"><label for=\"thrown\">Thrown weapon</label></td>\n    <td><input type=\"radio\" id=\"projectile\" name=\"weapontype\" value=\"projectile\" checked=\"checked><label for=\"projectile\">Projectile</label></td>    \n  </tr>\n  </table>  \n  <h2>Range</h2>\n  <table style=\"width:100%\">\n  <tr>\n    <td><input type=\"radio\" id=\"short\" name=\"range\" value=\"short\" checked=\"checked><label for=\"thrown\">Short</label></td>\n    <td><input type=\"radio\" id=\"medium\" name=\"range\" value=\"medium\"><label for=\"projectile\">Medium</label></td>    \n    <td><input type=\"radio\" id=\"long\" name=\"range\" value=\"long\"><label for=\"projectile\">Long</label></td>    \n    <td><input type=\"radio\" id=\"extreme\" name=\"range\" value=\"extreme\"><label for=\"projectile\">Extreme</label></td>    \n  </tr>\n  </table>    \n  `;\n  new Dialog({\n    title: \"Deviation\",\n    content: template,\n    buttons: {\n      ok: {\n        label: \"Go!\",\n        callback: async (html) => {\n          rollForIt(html);\n        },\n      }\n    },\n  }).render(true);\n}\n\nfunction rollForIt(html) {\n  const weapontype=html.find('input[name=\"weapontype\"]:checked').val();\n  const range=html.find('input[name=\"range\"]:checked').val();\n  \n  if (weapontype=='thrown') {\n    diceRoll('1d6', range);\n  } else {\n    diceRoll('2d6', range);\n  }\n}\n\nfunction diceRoll(die, range) {\n  const rangeMultiplier = rangeCheck(range);\n  let roll = new Roll('{1d12,'+die+'}').roll({ async : false });\n  let direction = roll.terms[0].rolls[0].total;  \n  let distance =  roll.terms[0].rolls[1].total*rangeMultiplier;  \n\n  let message = `<div><h2><img style=\"vertical-align:middle\" src=${chaticon} width=\"28\" height=\"28\">Deviation</h2>`;    \n  if (coreRules === true) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chaticon} width=\"28\" height=\"28\"> @Compendium[swade-core-rules.swade-rules.xxEcWExtn36PPxg0]{Deviation}</h2>`;\n  }  \n  \n  message += `<p>Move the blast <b>${distance}\"</b> to <b style=\"color:red\">${direction}</b> O'Clock.</p>`;\n  if (directionCheck(direction)) {\n    message += `<p><b style=\"color:red\">A weapon can never deviate more than half the distance to the original target (that keeps it from going behind the thrower).</b></p>`;\n  }\n  message += `<p style=\"text-align:center\"><img style=\"vertical-align:middle\" src=${chatimage} width=\"200\" height=\"200\"><p></div>`;\n  \n  let chatData = {\n      content: message\n  };\n  ChatMessage.create(chatData, {});  \n  let tempChatData = {\n    content: message\n  };     \n  roll.toMessage();\n}\n\nfunction rangeCheck(range) {\n  if (range=='short') {\n    return 1;\n  } else if (range=='medium') {\n    return 2;\n  } else if (range=='long') {\n    return 3;\n  } else if (range=='extreme') {\n    return 4;\n  }\n}\n\nfunction directionCheck(direction) {\n  console.log(direction);\n  if (direction==4 || direction==5 || direction==6 || direction==7 || direction==8) {\n    return true\n  } else {\n    return false\n  } \n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"cf":{"id":"temp_iccf0fxdot","path":"Macros","color":"#ff0000"}}}
{"_id":"cbOOezTOQmWbGJww","name":"Everyday Macro Manager","type":"script","author":"tckKxzbezKvre3KI","img":"icons/sundries/documents/document-symbol-skull-tan.webp","scope":"global","command":"const version = '0.6';\n\n/*\n  GM Menu\n  \n  icons: icons/sundries/documents/document-writing-pink.webp\n  \n  Fill the constant macros with the names of your macros, when you click the button it will run the macro.\n\n  Dialog Window will not close until the X button is pressed.\n*/\nconst managerType = 'Everyday - Macro Manager';\n\n(()=>{\n  const macros = [\n    \"3D Measure\",\n    \"Next Turn\",\n    \"Token Vision\"\n  ];\n\n  let buttons = {}, dialog, content = `<div sytle=\"width:100%;text-align:center;><h2>Choose Macro</h2></div>`;\n  \n  macros.forEach((str)=> {\n    let macro = game.macros.getName(str);\n    if(!macro) return;\n\n    buttons[str] = {\n      label : `\n        <div style=\"display:flex;flex-direction:row;justify-content:center;align-items:center;width\">\n          <div style=\"display:flex;justify-content:left;flex-grow:1;\"><img src=\"${macro.data.img}\" width=\"25\" height=\"25\" style=\"background-color:#5c5c5c;\"/></div>\n          <div style=\"display:flex;justify-content:left;flex-grow:4\"><label>${str}</label></div>\n        </div>`,\n      callback : () => {\n        game.macros.getName(str).execute();\n        //dialog.render(true);\n      }\n    }\n  });\n  dialog = new Dialog({title : `${managerType}`,content, buttons}).render(true);\n})();","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":{"id":"temp_iccf0fxdot","path":"Macros","color":"#ff0000"}}}
{"_id":"cgEFd8i6cRKH616L","name":"Chase","type":"script","author":"tckKxzbezKvre3KI","img":"icons/sundries/gaming/playing-cards.webp","scope":"global","command":"const version = 'v1.7';\n\n/* Chase\nFeatures\n- Draw n cards placing them in the scene\n- This macro can reset the table preventing from the error\n- This macro can line up the cards\nsource:\nicon: icons/sundries/gaming/playing-cards.webp\n*/\n\nasync function makeTiles(html) {\n    let spacingX = parseInt(html.find('#spacing-x')[0].value);\n    let spacingY = parseInt(html.find('#spacing-y')[0].value);\n    const rows = parseInt(html.find('#card-rows')[0].value);\n    const columns = parseInt(html.find('#card-columns')[0].value);\n    const stackCards = html.find('#stack-cards')[0].checked;\n    const tableName = html.find('#table-name')[0].value;\n    let cardHeight = parseInt(html.find('#card-height')[0].value);\n    let cardWidth = parseInt(html.find('#card-width')[0].value);\n\n    if (tableName === '') {\n        ui.notifications.warn(`Please select a RollTable from which to draw.`);\n    } else {\n        const cardsToDraw = rows * columns;\n        const cardDraws = (\n            await game.tables\n                .find((t) => t.data.name == tableName)\n                .drawMany(cardsToDraw, { displayChat: false })\n        ).results;\n\n        const sceneWidth = canvas.scene.dimensions.sceneWidth;\n        const sceneHeight = canvas.scene.dimensions.sceneHeight;\n        const sceneRectX = canvas.scene.dimensions.sceneRect.x;\n        const sceneRectY = canvas.scene.dimensions.sceneRect.y;\n\n        let totalSpacingX = spacingX * (columns - 1);\n        let totalSpacingY = spacingY * (rows - 1);\n        let fullSpreadWidth = (cardWidth * columns) + totalSpacingX;\n        let fullSpreadHeight = (cardHeight * rows) + totalSpacingY;\n\n        if (fullSpreadWidth > sceneWidth || fullSpreadHeight > sceneHeight) {\n            let newSpreadRatio = 1;\n\n            if (fullSpreadWidth > sceneWidth) {\n                newSpreadRatio = sceneWidth / fullSpreadWidth;\n                cardWidth = cardWidth * newSpreadRatio;\n                cardHeight = cardHeight * newSpreadRatio;\n                spacingX = spacingX * newSpreadRatio;\n                spacingY = spacingY * newSpreadRatio;\n                totalSpacingX = spacingX * (columns - 1);\n                totalSpacingY = spacingY * (rows - 1);\n                fullSpreadWidth = cardWidth * columns + totalSpacingX;\n                fullSpreadHeight = cardHeight * rows + totalSpacingY;\n            }\n\n            if (fullSpreadHeight > sceneHeight) {\n                newSpreadRatio = sceneHeight / fullSpreadHeight;\n                cardWidth = cardWidth * newSpreadRatio;\n                cardHeight = cardHeight * newSpreadRatio;\n                spacingX = spacingX * newSpreadRatio;\n                spacingY = spacingY * newSpreadRatio;\n                totalSpacingX = spacingX * (columns - 1);\n                totalSpacingY = spacingY * (rows - 1);\n                fullSpreadWidth = cardWidth * columns + totalSpacingX;\n                fullSpreadHeight = cardHeight * rows + totalSpacingY;\n            }\n        }\n\n        let startX = sceneRectX + ((sceneWidth - fullSpreadWidth) / 2);\n        let startY = sceneRectY + ((sceneHeight - fullSpreadHeight) / 2);\n\n        if (stackCards) {\n            startX = sceneRectX + ((sceneWidth - cardWidth) / 2);\n            startY = sceneRectY + ((sceneHeight - cardHeight) / 2);\n        }\n\n        let positionX = startX;\n        let positionY = startY;\n        let i = 0;\n\n        for (let y = 0; y < rows; y++) {\n            for (let x = 0; x < columns; x++) {\n                const tData = {\n                    img: cardDraws[i].data.img,\n                    width: cardWidth,\n                    height: cardHeight,\n                    x: positionX,\n                    y: positionY,\n                    'flags.swademacros.isChaseCard': true\n                };\n                if (!stackCards) {\n                    positionX = positionX + cardWidth + spacingX;\n                }\n                await TileDocument.create(tData, { parent: canvas.scene });\n                i++;\n            }\n            if (!stackCards) {\n                positionY = positionY + cardHeight + spacingY;\n            }\n            positionX = startX;\n        }\n    }\n}\n\nfunction main() {\n    //How Many Cards to Draw\n    //Width/Height\n    //Which Table to Draw From\n    const grid = canvas.scene.data.grid;\n\n    let cardsList = ``;\n    Array.from(game.tables).map((t) => {\n        cardsList += `<option value=\"${t.data.name}\">${t.data.name}</option>`;\n    });\n\n    const template = `\n        <style scoped>\n            .custom-sizing-spacing {\n                margin: 1em 0;\n            }\n        </style>\n        <form>\n            <fieldset>\n                <legend>Choose a Roll Table</legend>\n                <p>\n                    <label for=\"table-name\">Table to Draw From: <select id=\"table-name\">${cardsList}</select></label>\n                </p>\n            </fieldset>\n            <fieldset>\n                <legend>Layout</legend>\n                <table style=\"text-align: center;\">\n                <tbody>\n                  <tr>\n                    <td><label for=\"card-rows\">Rows: <input id=\"card-rows\" type=\"number\" min=\"1\" style=\"width: 50px;\" value=\"1\"></label></td>\n                    <td><label for=\"card-columns\">Columns: <input id=\"card-columns\" type=\"number\" min=\"1\" style=\"width: 50px;\" value=\"9\"></label></td>\n                  </tr>\n                </tbody>\n                </table>\n                <p>--OR--</p>\n                <p>\n                    <label for=\"stack-cards\"><input type=\"checkbox\" id=\"stack-cards\"/> Stack cards into single pile</label>\n                </p>\n            </fieldset>\n            <details class=\"custom-sizing-spacing\">\n                <summary>Customize Card Size and Spacing</summary>\n                <fieldset>\n                    <legend>Card Size (in pixels)</legend>\n                    <table style=\"text-align: center;\">\n                    <tbody>\n                      <tr>\n                        <td>\n                          <label for=\"card-height\">Height: <input id=\"card-height\" type=\"number\" min=\"1\" style=\"width: 50px;\" value=\"${grid * 3.5}\"></label>\n                        </td>\n                        <td>\n                          <label for=\"card-width\">Width: <input id=\"card-width\" type=\"number\" min=\"1\" style=\"width: 50px;\" value=\"${grid * 2.5}\"></label>\n                        </td>\n                      </tr>\n                    </tbody>\n                    </table>\n                </fieldset>\n                <fieldset>\n                    <legend>Spacing between Cards (in pixels)</legend>\n                      <table style=\"text-align: center;\">\n                      <tbody>\n                        <tr>\n                          <td>\n                            <label for=\"spacing-x\">Columns: <input id=\"spacing-x\" type=\"number\" min=\"0\" value=\"${grid / 2}\" step=\"1\" style=\"width: 50px;\"></label>\n                          </td>\n                          <td>\n                            <label for=\"spacing-y\">Rows: <input id=\"spacing-y\" type=\"number\" min=\"0\" value=\"${grid / 2}\" step=\"1\" style=\"width: 50px;\"></label>\n                          </td>\n                        </tr>\n                      </tbody>\n                      </table>\n                </fieldset>\n            </details>\n        </form>\n        `;\n    new Dialog({\n        title: `Draw Cards To Table - ${version}`,\n        content: template,\n        buttons: {\n            ok: {\n                label: `<b>Draw</b>`,\n                callback: async (html) => {\n                    makeTiles(html);\n                },\n            },\n            resetTable: {\n                label: `<b style=\"color:red\">Reset</b>`,\n                callback: async (html) => {\n                    const tableName = html.find('#table-name')[0].value;\n                    const table = await game.tables.find((t) => t.data.name === tableName);\n                    if (table !== undefined) {\n                        table.reset();\n                        ui.notifications.info(`The RollTable \"${tableName}\" has been reset.`)\n\n                    } else {\n                        ui.notifications.warn(`Please select a RollTable to reset.`)\n                    }\n                    const chaseCards = await canvas.scene.tiles.filter(t => t.getFlag('swademacros', 'isChaseCard') === true);\n                    if (chaseCards.length) {\n                        for await (const card of chaseCards) {\n                            await card.delete();\n                        }\n                        ui.notifications.info(`All tiles from ${tableName} have been removed from the scene.`)\n                    }\n                }\n            },\n            cancel: {\n                label: 'Cancel',\n            },\n        },\n    }).render(true);\n}\n\nmain();","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":{"id":"temp_iccf0fxdot","path":"Macros","color":"#ff0000"}}}
{"_id":"f1R8G7lU13HOYIyg","name":"Survival Guide","type":"script","author":"tckKxzbezKvre3KI","img":"icons/magic/symbols/star-solid-gold.webp","scope":"global","command":"//icon: \nlet compendiumName2 = 'swademacros.guide-macros-for-swade';\nlet pack = game.packs.get(compendiumName2);\nlet content = await pack.getDocuments();\nlet guide = content.find( i => (i.data.name === 'Survival Guide') );\nguide.sheet.render(true);","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":{"id":"temp_iccf0fxdot","path":"Macros","color":"#ff0000"}}}
{"_id":"gaplx9QDL58aYBRL","name":"Gang Up","type":"script","author":"tckKxzbezKvre3KI","img":"icons/creatures/mammals/wolf-shadow-black.webp","scope":"global","command":"const version = 'v1.6';\nconst chatimage = \"icons/creatures/mammals/wolf-shadow-black.webp\";\nconst rules = '@Compendium[swade-core-rules.swade-rules.hdXOHCe38O8KGyUz]{Ganging Up}';\nlet coreRules = false;\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\nconst debug_flag=true;\n  \n/* Gang Up p101 SWADE core\nIMPORTANT\n- YOU SHOULD DEFINE TOKEN DISPOSITION: FRIENDLY FOR PCS AND ALLIES. HOSTILE FOR ENEMIES\n\nMODULES\n- OPTIONAL: Token Faction\n\nTODO\n- detect dead\n- JB2A\n\nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Savage%20Worlds/GangUp.js\nicon: icons/creatures/mammals/wolf-shadow-black.webp\n*/\n\n// Requires at least 1 target\nif (canvas.tokens.controlled[0]===undefined || Array.from(game.user.targets)[0]===undefined){ \n  ui.notifications.warn(\"You must select a token and target another one!\");    \n} else {\n  let target=Array.from(game.user.targets)[0]; // token will not be count\n  let attacker=canvas.tokens.controlled[0];  \n  messageToTheChat(attacker, target);\n}\n\nfunction messageToTheChat(attacker, target) {\n  let message = ``;\n  if (coreRules) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${rules}</h2></div>`;\n  } else {\n    message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Ganging Up</h2>`;\n  }\n  \n  message += `<p><b style=\"color:red\">${attacker.name}</b> will receive ${gangUp(attacker, target)} to attack <b style=\"color:darkblue\">${target.name}</b>.</p>`;\n  \n  // send message\n  let chatData = {\n    user: game.user.id,    \n    content: message\n  };  \n  ChatMessage.create(chatData, {});  \n}\n\n// pg 101 swade core\n// - Each additional adjacent foe (who isn’t Stunned)\n// - adds +1 to all the attackers’ Fighting rolls, up to a maximum of +4.\n// - Each ally adjacent to the defender cancels out one point of Gang Up bonus from an attacker adjacent to both.\nfunction gangUp(attacker, target) {\n  let itemRange=1; // dist 1''\n  let enemies;\n  let allies;\n  let modifier=0;\n  \n  let withinRangeOfToken;\n  let alliedWithinRangeOfToken;\n  let alliedWithinRangeOfTargetAndAttacker;\n  \n  if (attacker.data.disposition===-1) { // NPC (hostile) is attacking PCs (friendly)\n    withinRangeOfToken = canvas.tokens.placeables.filter(t => \n      t.id !== attacker.id \n      && t.data.disposition === -1 \n      && t.actor.data.data.status.isStunned === false \n      && t.visible \n      && withinRange(target, t, itemRange)\n    );    \n    alliedWithinRangeOfToken = canvas.tokens.placeables.filter(t => \n      t.id !== target.id \n      && t.data.disposition === 1 \n      && t.actor.data.data.status.isStunned === false \n      && withinRange(target, t, itemRange)\n    );    \n    //alliedWithinRangeOfTargetAndAttacker intersection with attacker and target\n    alliedWithinRangeOfTargetAndAttacker = alliedWithinRangeOfToken.filter(t => \n      t.data.disposition === 1 \n      && t.actor.data.data.status.isStunned === false \n      && withinRange(attacker, t, itemRange)\n    );    \n  } else if (attacker.data.disposition===1) { // PCs (friendly) is attacking NPC (hostile)\n    withinRangeOfToken = canvas.tokens.placeables.filter(t => \n      t.id !== attacker.id \n      && t.data.disposition === 1 \n      && t.actor.data.data.status.isStunned === false \n      && t.visible \n      && withinRange(target, t, itemRange)\n    );    \n    alliedWithinRangeOfToken = canvas.tokens.placeables.filter(t => \n      t.id !== target.id \n      && t.data.disposition === -1 \n      && t.actor.data.data.status.isStunned === false \n      && withinRange(target, t, itemRange)\n    );    \n    //alliedWithinRangeOfTargetAndAttacker intersection with attacker and target\n    alliedWithinRangeOfTargetAndAttacker = alliedWithinRangeOfToken.filter(t => \n      t.data.disposition === -1 \n      && t.actor.data.data.status.isStunned === false \n      && withinRange(attacker, t, itemRange)\n    ); \n  }\n\n  enemies = withinRangeOfToken.length;   \n  allies = alliedWithinRangeOfTargetAndAttacker.length;\n  modifier = Math.max(0, (enemies-allies) );  \n\n  //debug\n  if (debug_flag) {\n    console.log('-----------------------');\n    console.log('Enemies: ' + withinRangeOfToken.length);\n    console.log('Allies: ' + alliedWithinRangeOfToken.length);\n    console.log('Allies Adjacent to Both: ' + alliedWithinRangeOfTargetAndAttacker.length);\n    console.log('Modifier: ' + modifier);\n    console.log('-----------------------');\n  }\n  return Math.min( 4, modifier );\n}\n\n// function from Kekilla\nfunction withinRange(origin, target, range) {\n    const ray = new Ray(origin, target);\n    let distance = canvas.grid.measureDistances([{ ray }], { gridSpaces: true })[0];\n    return range >= distance;\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":{"id":"temp_iccf0fxdot","path":"Macros","color":"#ff0000"}}}
{"_id":"loLcMEkmQmhqJw5S","name":"Fear Table","type":"script","author":"tckKxzbezKvre3KI","img":"icons/magic/death/undead-ghost-scream-teal.webp","scope":"global","command":"/* Fear Table\nicon: icons/magic/death/undead-ghost-scream-teal.webp\n*/\n\nlet tokenD;\nconst version = 'v1.2';\nconst chatimage = \"icons/magic/death/undead-ghost-scream-teal.webp\";\nlet coreRules = false;\nlet rules = '@Compendium[swade-core-rules.swade-rules.jaYcLBJnBk1ai5EH]{Fear}';\nif (game.modules.get(\"swade-core-rules\")?.active) { coreRules = true; }\n\nif (canvas.tokens.controlled[0]===undefined) {\n  ui.notifications.error(\"Please, select a token.\"); // No Token is Selected\n} else {\n  tokenD = canvas.tokens.controlled[0];\n  main();\n}\n\nasync function main(){\n  new Dialog({\n    title:\"Fear Table Modifier\",\n    content: `\n    <div style=\"display:flex\">\n      <p style=\"flex:3\">Creature Fear Penalty: </p>\n      <input type=\"number\" id=\"fearPenalty\" value=0 style=\"flex:1\"/>\n    </div>\n    `,\n    buttons: {\n      roll: {\n        label: \"Roll\",\n        callback: (html) => {\n          rollFearTable(html);\n        }\n      }, \n      cancel: {\n        label: \"Cancel\"\n      }\n    }\n  }).render(true)\n}\n\nasync function rollFearTable(html) {\n  let message=``;\n  let tableFearID = await game.packs.get(\"swade-core-rules.swade-tables\").index.find(el => el.name == \"Fear Table\")._id;\n  let fearTable = await game.packs.get(\"swade-core-rules.swade-tables\")\n    .getDocument( tableFearID );\n\n  const mod = html.find(\"#fearPenalty\")[0].value;  \n  const tableRoll = await new Roll(`1d20 + ${mod}`);  \n  let output = await fearTable.draw({roll: tableRoll});\n  let result = output.results[0].data.text;\n  let total = output.roll.total;\n\n  if (coreRules) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${rules}</h2></div>`;\n  } else {\n    message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Fear</h2>`;\n  }\n\n  message += `<p><b style=\"color:red\">${tokenD.name}</b> shoud deal with: </p>`;\n  message += result;\n  // send message\n  let chatData = {\n    content: message\n  };\n  ChatMessage.create(chatData, {});    \n  \n  applyFearOutcome(tokenD, total);\n}\n\nasync function applyFearOutcome(tokenD, val) {   \n  if ( val>=4 && val<=6 ) {\n    await tokenD.actor.update({ \"data.status.isDistracted\": true });    \n  } else if ( val>=7 && val<=9 ) {\n    await tokenD.actor.update({ \"data.status.isVulnerable\": true });    \n  } else if ( val>=10 && val<=12 ) {\n    await tokenD.actor.update({ \"data.status.isShaken\": true });    \n  } else if ( val==13 ) {\n    await tokenD.actor.update({ \"data.status.isStunned\": true });    \n  } else if ( val>=16 && val<=17 ) {\n    await tokenD.actor.update({ \"data.status.isShaken\": true });    \n  }  \n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"core":{"sourceId":"Macro.tt5wQLZWCHErlY8L"},"combat-utility-belt":{"macroTrigger":""},"cf":{"id":"temp_iccf0fxdot","path":"Macros","color":"#ff0000"}}}
{"_id":"mpqzwwN1oWD4Qyjn","name":"Next Turn","type":"script","author":"tckKxzbezKvre3KI","img":"icons/magic/time/arrows-circling-pink.webp","scope":"global","command":"/*\nSkip the current turn.\n*/\n\ngame.combat.nextTurn()","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"cf":{"id":"temp_iccf0fxdot","path":"Macros","color":"#ff0000"}}}
{"_id":"sIQtJo2qv1Q0GqOt","name":"Token Vision","type":"script","author":"tckKxzbezKvre3KI","img":"icons/sundries/lights/torch-brown-lit.webp","scope":"global","command":"/*\n// Open a dialog for quickly changing token vision parameters of the controlled tokens.\n// This macro was originally written by @Sky#9453\n// https://github.com/Sky-Captain-13/foundry\n// SWADE (this) version by SalieriC\n\n// Since return only works in functions, the sole purpose of the main() function is to stop the macro from executing if no token is selected.\n*/\n\nconst version = 'v1.0';\nconst chatimage = \"icons/sundries/lights/torch-brown-lit.webp\";\nconst rules = '@Compendium[swade-core-rules.swade-rules.033IuoJfthTXBJ4w]{Illumination}';\nlet coreRules = sm.isModuleOn(\"swade-core-rules\");\n\nif (canvas.tokens.controlled[0]===undefined) {\n  ui.notifications.error(\"Please, select a token.\"); // No Token is Selected\n} else {\n  main();\n}\n\nfunction main() {\n  // Add Vision Type only if the Game Master is using the Macro\n  let dialogue_content;\n  if (game.user.isGM) {\n    dialogue_content = `\n    <form>\n      <div class=\"form-group\">\n        <label>Light Source:</label>\n        <select id=\"light-source\" name=\"light-source\">\n          <option value=\"nochange\">No Change</option>\n          <option value=\"none\">None</option>\n          <option value=\"candle\">Candle [dim=0/bright=2]</option>\n          <option value=\"lamp\">Lantern [dim=0/bright=4]</option>\n          <option value=\"bullseye\">Lantern (Bullseye) [dim=0/bright=2/angle=50]</option>\n          <option value=\"torch\">Torch [dim=0/bright=4]</option>\n          <option value=\"flLight\">Flashlight [dim=0/bright=10/angle=50]</option>\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Vision Type:</label>\n        <select id=\"vision-type\" name=\"vision-type\">\n          <option value=\"nochange\">No Change</option>\n          <option value=\"pDark\">Pitch Darkness (0\") [dim=0/bright=0]</option>\n          <option value=\"dark\">Dark (10\") [dim=10/bright=0]</option>\n          <option value=\"dim\">Dim [dim=1000/bright=10]</option>\n          <option value=\"lowLiVis\">Low Light Vision [dim=1000/bright=0]</option>\n          <option value=\"infrVis\">Infravision [dim=1000/bright=0]</option>\n          <option value=\"fullNiVis\">Full Night Vision [dim=0/bright=1000]</option>\n        </select>\n      </div>\n    </form>\n`;\n  } else {\n    dialogue_content = `\n    <form>\n      <div class=\"form-group\">\n        <label>Light Source:</label>\n        <select id=\"light-source\" name=\"light-source\">\n          <option value=\"nochange\">No Change</option>\n          <option value=\"none\">None</option>\n          <option value=\"candle\">Candle [dim=0/bright=2]</option>\n          <option value=\"lamp\">Lantern [dim=0/bright=4]</option>\n          <option value=\"bullseye\">Lantern (Bullseye) [dim=0/bright=2/angle=50]</option>\n          <option value=\"torch\">Torch [dim=0/bright=4]</option>\n          <option value=\"flLight\">Flashlight [dim=0/bright=10/angle=50]</option>\n        </select>\n      </div>\n    `;\n  }\n\n  let applyChanges = false;\n  let dialogButtons = {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply Changes`,\n      callback: (html) => {\n        changeVision(html);\n      }\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel Changes`\n    }   \n  }  \n  \n  // Main Dialogue    \n  new Dialog({\n    title: `Token Vision - ${version}`,\n    content: dialogue_content,\n    buttons: dialogButtons,\n    default: \"yes\",\n  }).render(true);\n}\n\nasync function changeVision(html) {\n  for (let token of canvas.tokens.controlled) {\n    let visionType;\n    let lightSource = html.find('[name=\"light-source\"]')[0].value || \"none\";\n    let dimSight = 0;\n    let brightSight = 0;\n    let dimLight = 0;\n    let brightLight = 0;\n    let lightAngle = 360;\n    let lockRotation = token.data.lockRotation;\n\n    // Get Vision Type Values\n    if (game.user.isGM) {\n      visionType = html.find('[name=\"vision-type\"]')[0].value || \"none\";\n      switch (visionType) {\n        case \"pDark\":\n          dimSight = 0;\n          brightSight = 0;\n          break;\n        case \"dark\":\n          dimSight = 10;\n          brightSight = 0;\n          break;\n        case \"dim\":\n          dimSight = 1000;\n          brightSight = 10;\n          break;\n        case \"lowLiVis\":\n          dimSight = 1000;\n          brightSight = 0;\n          break;\n        case \"infrVis\":\n          dimSight = 1000;\n          brightSight = 0;\n          break;\n        case \"fullNiVis\":\n          dimSight = 0;\n          brightSight = 1000;\n          break;\n        case \"nochange\":\n        default:\n          dimSight = token.data.dimSight;\n          brightSight = token.data.brightSight;\n      }\n      // Get Light Source Values\n      switch (lightSource) {\n        case \"none\":\n          dimLight = 0;\n          brightLight = 0;\n          break;\n        case \"candle\":\n          dimLight = 0;\n          brightLight = 2;\n          break;\n        case \"lamp\":\n          dimLight = 0;\n          brightLight = 4;\n          break;\n        case \"bullseye\":\n          dimLight = 0;\n          brightLight = 4;\n          lockRotation = true;\n          lightAngle = 52.5;\n          break;\n        case \"torch\":\n          dimLight = 0;\n          brightLight = 4;\n          break;\n        case \"flLight\":\n          dimLight = 0;\n          brightLight = 10;\n          lockRotation = true;\n          lightAngle = 52.5;\n          break;\n        case \"nochange\":\n        default:\n          dimLight = token.data.dimLight;\n          brightLight = token.data.brightLight;\n          lightAngle = token.data.lightAngle;\n          lockRotation = token.data.lockRotation;\n      }\n      // Update Token\n      const updatePromise = await token.document.update({\n        vision: true,\n        dimSight: dimSight,\n        brightSight: brightSight,\n        dimLight: dimLight,\n        brightLight: brightLight,\n        lightAngle: lightAngle,\n        lockRotation: lockRotation\n      });\n    } else {\n      // Get Light Source Values\n      switch (lightSource) {\n        case \"none\":\n          dimLight = 0;\n          brightLight = 0;\n          break;\n        case \"candle\":\n          dimLight = 0;\n          brightLight = 2;\n          break;\n        case \"lamp\":\n          dimLight = 0;\n          brightLight = 4;\n          break;\n        case \"bullseye\":\n          dimLight = 0;\n          brightLight = 4;\n          lockRotation = true;\n          lightAngle = 52.5;\n          break;\n        case \"torch\":\n          dimLight = 0;\n          brightLight = 4;\n          break;\n        case \"flLight\":\n          dimLight = 0;\n          brightLight = 10;\n          lockRotation = true;\n          lightAngle = 52.5;\n          break;\n        case \"nochange\":\n        default:\n          dimLight = token.data.dimLight;\n          brightLight = token.data.brightLight;\n          lightAngle = token.data.lightAngle;\n          lockRotation = token.data.lockRotation;\n      }\n      // Update Token\n      const updatePromise = await token.document.update({\n        vision: true,\n        dimLight: dimLight,\n        brightLight: brightLight,\n        lightAngle: lightAngle,\n        lockRotation: lockRotation\n      });\n    }\n    \n    // chat\n    let message=``;\n    \n    if (coreRules === true) {\n      message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${rules}</h2></div>`;\n    }  else {\n      message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Illumination</h2>`;      \n    }\n    message += `<p><b>${token.name}</b> made changes to vision/illumination.</p>`;\n    message += `<ul><li>Dim Sight: ${dimSight}</li>`;\n    message += `<li>Bright Sight: ${brightSight}</li>`;\n    message += `<li>Dim Light: ${dimLight}</li>`;\n    message += `<li>Bright Light: ${brightLight}</li>`;\n    message += `<li>Light Angle: ${lightAngle}</li></ul>`;\n\n    // send message\n    let chatData = {\n      content: message\n    };\n    ChatMessage.create(chatData, {});    \n    \n  } // end for \n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.e3HFjRo6KaIDsfCR"},"cf":{"id":"temp_iccf0fxdot","path":"Macros","color":"#ff0000"}}}
{"_id":"so4bl3hD9cDELmqm","name":"Quick Combat","type":"script","author":"tckKxzbezKvre3KI","img":"icons/magic/time/clock-stopwatch-white-blue.webp","scope":"global","command":"/* All tokens to Combat v1.2\n* - This macro select all tokens in the scene\n* - Add all of them to the combat tracker\n* - Roll Initiave for all\n* modified from @atnoslen with a little help from @Atropos (thanks!) \n* source: \n* icon: icons/magic/time/clock-stopwatch-white-blue.webp\n*/\n\n(async () => {\n  const scene = game.scenes.contents.filter(scene => scene.active === true)[0];\n  let tokens = [];\n  \n  let startCRoll=async function rollAndStart() {\n    await game.combat.rollAll();\n    await game.combat.startCombat();\n  }\n\n  if (!game.combat) {\n    scene.data.tokens.forEach(function(token) {\n      tokens.push({tokenId:token.id});\n    });\n\n    //Combat.create({scene:scene.data._id, combatants:tokens}).then(startCRoll); // start and roll\n    Combat.create({scene:scene.data._id, combatants:tokens});\n\n  } else {\n    // Combat already exists, add the missing tokens.\n    // This assumes createCombatant is expensive, so create an array\n    // instead of calling individually.\n    scene.data.tokens.forEach(function(token) {\n      if (game.combat.combatants.filter(combatant => combatant.tokenId === token.id).length === 0) {\n        tokens.push({tokenId:token.id});\n      }\n    });\n\n    //game.combat.createEmbeddedDocuments(\"Combatant\", tokens).then(startCRoll); // start and roll\n    game.combat.createEmbeddedDocuments(\"Combatant\", tokens);\n    \n    //The Combat#createCombatant method has been deprecated in favor of Combatant.create and will be removed in 0.9.0\n  }\n  \n})()","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"cf":{"id":"temp_iccf0fxdot","path":"Macros","color":"#ff0000"},"combat-utility-belt":{"macroTrigger":""}}}
{"_id":"ul6XwVgyt7vUfZ3R","name":"Unstun","type":"script","author":"tckKxzbezKvre3KI","img":"icons/magic/symbols/symbol-lightning-bolt.webp","scope":"global","command":"const version = 'v1.0';\n\n/* Unstun\n\nsource: \nicon: icons/magic/symbols/symbol-lightning-bolt.webp\n*/\nconst chatimage = \"icons/magic/symbols/symbol-lightning-bolt.webp\";\nlet coreRules = sm.isModuleOn(\"swade-core-rules\");\nconst coreRulesLink = '@Compendium[swade-core-rules.swade-rules.nHbnnGpaM8CgA5SI]{Stunned}';\nlet tokenD=canvas.tokens.controlled[0];\n\nif (tokenD===undefined) {\n  ui.notifications.error(\"Please select a token.\"); // No Token is Selected\n} else {\n  tokenD = canvas.tokens.controlled[0];\n  main();\n}\n\nasync function main() {\n  if (tokenD.actor.data.data.status.isStunned === true) {\n    rollUnstun();\n  } else if (tokenD) {\n    let message = ``;\n    \n    if (tokenD.actor.data.data.status.isStunned === false) {\n      await tokenD.actor.update({ \"data.status.isStunned\": true });\n    };\n\n    if ( sm.isModuleOn(\"combat-utility-belt\") ) {\n      await game.cub.addCondition(\"Prone\");\n    };\n    await tokenD.actor.update({ \"data.status.isDistracted\": true });\n    await tokenD.actor.update({ \"data.status.isVulnerable\": true });\n\n    if (coreRules) {\n      message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${coreRulesLink}</h2></div>`;\n    } else {\n      message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Stunned</h2>`;      \n    }\n    \n    message += `<p><b style=\"color:red\">${tokenD.name}</b> is <b>stunned</b> now!</p>`\n    ChatMessage.create({\n      user: game.user.id,      \n      content: message,\n    });        \n  }\n}\n\nasync function rollUnstun() {\n  const edgeNames = ['combat reflexes'];\n  let message = ``;\n  let rolled = await tokenD.actor.rollAttribute('vigor');\n  \n  const edges = tokenD.actor.data.items.filter(function (item) {\n    return edgeNames.includes(item.name.toLowerCase()) && (item.type === \"edge\" || item.type === \"ability\");\n  });\n  \n  let rollWithEdge = rolled.total;\n  let edgeText = \"\";\n  for (let edge of edges) {\n    rollWithEdge += 2;\n    edgeText += `<br/><i>+ ${edge.name}</i>`;\n  }\n\n  if (coreRules) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${coreRulesLink}</h2></div>`;\n  } else {\n    message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Stunned</h2>`;\n  }\n\n  message += `<p>${tokenD.name} rolled <b style=\"color:blue\"> ${rollWithEdge}.</b></p>`;\n  \n  // Checking for a Critical Failure.\n  if ( sm.isCritical(rolled) ) {\n    ui.notifications.notify(\"You've rolled a Critical Failure!\");\n    message += `<b>${tokenD.name}</b> rolled a <b style=\"color: red; font-size:150%\">Critical Failure!</b>!`;    \n  } else {\n    if (rollWithEdge > 3 && rollWithEdge <= 7) {\n      message += `<p>${tokenD.name} is no longer Stunned.</p>`;\n      message += `<ul><li>remains Vulnerable until end of next turn.</li>`;\n      message += `<li>remains Distracted until end of this turn.</li></ul>`;\n      await tokenD.actor.update({ \"data.status.isVulnerable\": true });\n      await tokenD.actor.update({ \"data.status.isStunned\": false });\n      sm.useBenny(tokenD);\n    } else if (rollWithEdge >= 8) {\n      message += `<p>${tokenD.name} is no longer Stunned and looses Vulnerable/Distracted.</p>`;\n      await tokenD.actor.update({ \"data.status.isDistracted\": false });\n      await tokenD.actor.update({ \"data.status.isStunned\": false });\n      await tokenD.actor.update({ \"data.status.isVulnerable\": false });\n    } else {\n      message += `<p>${tokenD.name} remains Stunned.</p>`;\n      sm.useBenny(tokenD);\n    }\n    message += ` ${edgeText}`;\n  }\n  ChatMessage.create({ content: message });\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":{"id":"temp_iccf0fxdot","path":"Macros","color":"#ff0000"}}}
{"_id":"wTKmjh0VbDLH8amT","name":"Adventure Generator","type":"script","author":"tckKxzbezKvre3KI","img":"modules/deadlands-core-rules/assets/icons/deadlands-logo.webp","scope":"global","command":"const version = '1.0';\n// icon: modules/deadlands-core-rules/assets/icons/deadlands-logo.webp\n\nmain();\n\nasync function main() {\n  let message;\n\n  let Objective = await drawFromTable('Objective');\n  let Obstacle = await drawFromTable('Obstacle');\n  let Complication = await drawFromTable('Complication');\n  \n  let adventureContent = `<h2>Objective</h2>` + Objective.results[0].text;\n  adventureContent += `<h2>Obstacle</h2>` + Obstacle.results[0].text;\n  adventureContent += `<h2>Complication</h2>` + Complication.results[0].text;  \n\n  let data = {\n    name: 'My New Adventure',\n    content: adventureContent\n  };\n\n  addEventListenerOnHtmlElement(\"#createAdventure\", 'click', (e) => {    \n    createAdventure(data);\n  });            \n  message+=`<p>If you click the button this adventure will be posted in a journal.</p>`;\n  message+=`<button style=\"background:#d10000;color:white\" id=\"createAdventure\">Create Adventure</button>`;\n  \n  let chatData = {\n    user: game.user.id,    \n    content: message,\n    whisper : ChatMessage.getWhisperRecipients(\"GM\")\n  };   \n  ChatMessage.create(chatData, {});  \n}\n\nfunction addEventListenerOnHtmlElement(element, event, func){    \n    Hooks.once(\"renderChatMessage\", (chatItem, html) => { // Use Hook to add event to chat message html element\n        html[0].querySelector(element).addEventListener(event, func);        \n    });\n} // end addEventListenerOnHtmlElement\n\nasync function createAdventure(data) {  \n  const instantAdventure = await JournalEntry.create(data);\n  await instantAdventure.sheet.render(true);    \n}\n\nasync function drawFromTable(tableName) {\n  let list_compendium = await game.packs.filter(p=>p.documentName=='RollTable');      \n  let inside = await list_compendium.filter( p=>p.metadata.label=='Deadlands Tables' )[0].getDocuments();      \n  let table = await inside.filter( p=>p.data['name']==tableName )[0];\n  \n  if (!table) {\n    ui.notifications.warn(`Table ${tableName} not found.`, {});\n    return;\n  }\n  return await table.draw({rollMode: 'gmroll'});\n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":{"id":"temp_iccf0fxdot","path":"Macros","color":"#ff0000"}}}
{"_id":"yNOMIUyOO4UCAoC4","name":"Power Point Management","type":"script","author":"tckKxzbezKvre3KI","img":"icons/magic/symbols/elements-air-earth-fire-water.webp","scope":"global","command":"/* Power Point Management\n- \n\nicon: icons/magic/symbols/elements-air-earth-fire-water.webp\n*/\n\nconst version = 'v1.0';\nconst chatimage = \"icons/magic/symbols/elements-air-earth-fire-water.webp\";\nconst rule = '@Compendium[swade-core-rules.swade-rules.6SGCG8rZNklN3U6w]{Recharging}';\nlet coreRules = sm.isModuleOn(\"swade-core-rules\");\nlet tokenD;\n\nif (canvas.tokens.controlled[0]===undefined) {\n  ui.notifications.error(\"Please, select a token.\"); // No Token is Selected\n} else {\n  tokenD = canvas.tokens.controlled[0];\n  main();\n}\n\nfunction main() {\n  let dialogText = `    \n\n  <style type=\"text/css\">\n    .tg  {border-collapse:collapse;border-spacing:0;}\n    .tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n      overflow:hidden;padding:10px 5px;word-break:normal;}\n    .tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n      font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n    .tg .tg-c3ow{border-color:inherit;text-align:center;vertical-align:top}\n    .tg .tg-xwyw{border-color:#000000;text-align:center;vertical-align:middle}\n  </style>\n  <table class=\"tg\">\n  <tbody>\n    <tr>\n      <td class=\"tg-xwyw\">\n        <p style=text-align: center;\">Only use this input if you will use the <b>Manual Change</b>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"tg-c3ow\">\n        <p>Power Points: <input id=\"powerpoints\" type=\"number\" min=\"-30\" max=\"30\" style=\"width: 80px; text-align: center;\" value=0></input></p>\n      </td>\n    </tr>\n  </tbody>\n  </table>\n\n  `;\n\n  dialogButtons = {\n    one: {\n      label: \"Natural Recover\",\n      callback: (html) => {\n        naturalRecover(html);\n      }\n    },\n    two: {\n      label: \"Benny Recover\",\n      callback: (html) => {\n        bennyRecover(html);\n      }\n    },\n    three: {\n      label: \"Manual Change\",\n      callback: (html) => {\n        manualChange(html);\n      }\n    }    \n  }\n\n  // Main Dialogue    \n  new Dialog({\n    title: `Power Point Management - ${version}`,\n    content: dialogText,\n    buttons: dialogButtons,\n    default: \"one\",\n  }).render(true);\n\n}\n\n// MACRO FUNCTIONS\n\n/*\nRecharging p151\nA character recovers 5 Power Points per hour spent resting, meditating, etc.\n*/\nasync function naturalRecover(html) {  \n  let message;\n  \n  if (coreRules) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${rule}</h2></div>`;\n  } else {\n    message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Recharging</h2>`;\n  }\n\n  await changePowerPoints(tokenD, 5);\n  message += `<p><b style=\"color:red;\">${tokenD.name}</b> recovered 5 Power Points after 1 hour. The current power points are: <b>${tokenD.actor.data.data.powerPoints.value}</b> </p>`;\n\n  ChatMessage.create({ content: message });\n}\n\n/*\nREGAIN POWER POINTS: A character with an Arcane Background can spend a Benny to regain 5 Power Points (Power Points and their use are explained on page 147.)\n*/\nasync function bennyRecover(html) {\n  let message;\n  \n  if (coreRules) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${rule}</h2></div>`;\n  } else {\n    message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Recharging</h2>`;\n  }\n\n  if ( sm.checkBennies(tokenD)>0 ) {\n    sm.spendBenny(tokenD);\n    await changePowerPoints(tokenD, 5);\n    message += `<p><b style=\"color:red;\">${tokenD.name}</b> recovered 5 Power Points after spent a benny. The current power points are: <b>${tokenD.actor.data.data.powerPoints.value}</b>.</p>`;\n  } else {\n    message += `<p><b style=\"color:red;\">${tokenD.name}</b> don't have bennies to spend. The current power points are: <b>${tokenD.actor.data.data.powerPoints.value}</b>.</p>`;\n  }\n\n  ChatMessage.create({ content: message });\n}\n\nasync function manualChange(html) {\n  let message;\n  const powerpoints = parseInt( html.find(\"#powerpoints\")[0].value );    \n  \n  if (coreRules) {\n    message = `<div class=\"swade-core\"><h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> ${rule}</h2></div>`;\n  } else {\n    message = `<h2><img style=\"vertical-align:middle\" src=${chatimage} width=\"28\" height=\"28\"> Recharging</h2>`;\n  }\n\n  await changePowerPoints(tokenD, powerpoints);\n  \n  message += `<p><b style=\"color:red;\">${tokenD.name}</b> manually added ${powerpoints} Power Points. The current power points are: <b>${tokenD.actor.data.data.powerPoints.value}</b>.</p>`;\n  \n  ChatMessage.create({ content: message });\n}\n\nasync function changePowerPoints(tokenD, val) {\n  let maximumPP = tokenD.actor.data.data.powerPoints.max;\n  let currentPP = tokenD.actor.data.data.powerPoints.value;\n  \n  if ( (currentPP+val)> maximumPP ) {\n    await tokenD.actor.update({ \"data.powerPoints.value\": maximumPP });    \n  } else if ( (currentPP+val)<0 ) {\n    await tokenD.actor.update({ \"data.powerPoints.value\": 0 });    \n  } else {\n    await tokenD.actor.update({ \"data.powerPoints.value\": (currentPP+val) });    \n  }  \n}","folder":null,"sort":0,"permission":{"default":0,"tckKxzbezKvre3KI":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"cf":{"id":"temp_iccf0fxdot","path":"Macros","color":"#ff0000"}}}
